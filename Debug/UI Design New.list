
UI Design New.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c0  080046e4  080046e4  000146e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fa4  08004fa4  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08004fa4  08004fa4  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fa4  08004fa4  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fa4  08004fa4  00014fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fa8  08004fa8  00014fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08004fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  200000a0  0800504c  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  0800504c  00020608  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012729  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a5d  00000000  00000000  000327f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  00035250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  00036060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ebc  00000000  00000000  00036d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123ed  00000000  00000000  0004fc34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b6b2  00000000  00000000  00062021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ed6d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dd0  00000000  00000000  000ed728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	080046cc 	.word	0x080046cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	080046cc 	.word	0x080046cc

0800014c <HAL_Init>:
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init (void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

	/* Prefetch buffer is not available on value line devices */
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f923 	bl	80003a8 <HAL_NVIC_SetPriorityGrouping>

	/* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
	HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	200f      	movs	r0, #15
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

	/* Init the low level hardware */
	HAL_MspInit();
 8000168:	f003 fd1c 	bl	8003ba4 <HAL_MspInit>

	/* Return function status */
	return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f93b 	bl	8000412 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
	{
		return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
	{
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f903 	bl	80003be <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
	{
		return HAL_ERROR;
	}

	/* Return function status */
	return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
		return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000038 	.word	0x20000038
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick (void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000538 	.word	0x20000538

080001fc <HAL_GetTick>:
 * @note  This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick (void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
	return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000538 	.word	0x20000538

08000210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <__NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	2b00      	cmp	r3, #0
 8000284:	db0b      	blt.n	800029e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f003 021f 	and.w	r2, r3, #31
 800028c:	4906      	ldr	r1, [pc, #24]	; (80002a8 <__NVIC_EnableIRQ+0x34>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	095b      	lsrs	r3, r3, #5
 8000294:	2001      	movs	r0, #1
 8000296:	fa00 f202 	lsl.w	r2, r0, r2
 800029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	; (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	; (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000300:	b480      	push	{r7}
 8000302:	b089      	sub	sp, #36	; 0x24
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f003 0307 	and.w	r3, r3, #7
 8000312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	f1c3 0307 	rsb	r3, r3, #7
 800031a:	2b04      	cmp	r3, #4
 800031c:	bf28      	it	cs
 800031e:	2304      	movcs	r3, #4
 8000320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3304      	adds	r3, #4
 8000326:	2b06      	cmp	r3, #6
 8000328:	d902      	bls.n	8000330 <NVIC_EncodePriority+0x30>
 800032a:	69fb      	ldr	r3, [r7, #28]
 800032c:	3b03      	subs	r3, #3
 800032e:	e000      	b.n	8000332 <NVIC_EncodePriority+0x32>
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000334:	f04f 32ff 	mov.w	r2, #4294967295
 8000338:	69bb      	ldr	r3, [r7, #24]
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	43da      	mvns	r2, r3
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	401a      	ands	r2, r3
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000348:	f04f 31ff 	mov.w	r1, #4294967295
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	43d9      	mvns	r1, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000358:	4313      	orrs	r3, r2
         );
}
 800035a:	4618      	mov	r0, r3
 800035c:	3724      	adds	r7, #36	; 0x24
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3b01      	subs	r3, #1
 8000370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000374:	d301      	bcc.n	800037a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000376:	2301      	movs	r3, #1
 8000378:	e00f      	b.n	800039a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <SysTick_Config+0x40>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3b01      	subs	r3, #1
 8000380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000382:	210f      	movs	r1, #15
 8000384:	f04f 30ff 	mov.w	r0, #4294967295
 8000388:	f7ff ff90 	bl	80002ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <SysTick_Config+0x40>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000392:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <SysTick_Config+0x40>)
 8000394:	2207      	movs	r2, #7
 8000396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000398:	2300      	movs	r3, #0
}
 800039a:	4618      	mov	r0, r3
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	e000e010 	.word	0xe000e010

080003a8 <HAL_NVIC_SetPriorityGrouping>:
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping (uint32_t PriorityGroup)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ff2d 	bl	8000210 <__NVIC_SetPriorityGrouping>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <HAL_NVIC_SetPriority>:
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority (IRQn_Type IRQn, uint32_t PreemptPriority,
	uint32_t SubPriority)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b086      	sub	sp, #24
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	4603      	mov	r3, r0
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
 80003ca:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00U;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 80003d0:	f7ff ff42 	bl	8000258 <__NVIC_GetPriorityGrouping>
 80003d4:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	68b9      	ldr	r1, [r7, #8]
 80003da:	6978      	ldr	r0, [r7, #20]
 80003dc:	f7ff ff90 	bl	8000300 <NVIC_EncodePriority>
 80003e0:	4602      	mov	r2, r0
 80003e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003e6:	4611      	mov	r1, r2
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff5f 	bl	80002ac <__NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80003ee:	bf00      	nop
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <HAL_NVIC_EnableIRQ>:
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ (IRQn_Type IRQn)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	4603      	mov	r3, r0
 80003fe:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 8000400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff35 	bl	8000274 <__NVIC_EnableIRQ>
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <HAL_SYSTICK_Config>:
 * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config (uint32_t TicksNumb)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
	return SysTick_Config(TicksNumb);
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f7ff ffa2 	bl	8000364 <SysTick_Config>
 8000420:	4603      	mov	r3, r0
}
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <HAL_GPIO_Init>:
 * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800042c:	b480      	push	{r7}
 800042e:	b08b      	sub	sp, #44	; 0x2c
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
	uint32_t position = 0x00u;
 8000436:	2300      	movs	r3, #0
 8000438:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ioposition;
	uint32_t iocurrent;
	uint32_t temp;
	uint32_t config = 0x00u;
 800043a:	2300      	movs	r3, #0
 800043c:	623b      	str	r3, [r7, #32]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	while (((GPIO_Init->Pin) >> position) != 0x00u)
 800043e:	e169      	b.n	8000714 <HAL_GPIO_Init+0x2e8>
	{
		/* Get the IO position */
		ioposition = (0x01uL << position);
 8000440:	2201      	movs	r2, #1
 8000442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000444:	fa02 f303 	lsl.w	r3, r2, r3
 8000448:	61fb      	str	r3, [r7, #28]

		/* Get the current IO position */
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	69fa      	ldr	r2, [r7, #28]
 8000450:	4013      	ands	r3, r2
 8000452:	61bb      	str	r3, [r7, #24]

		if (iocurrent == ioposition)
 8000454:	69ba      	ldr	r2, [r7, #24]
 8000456:	69fb      	ldr	r3, [r7, #28]
 8000458:	429a      	cmp	r2, r3
 800045a:	f040 8158 	bne.w	800070e <HAL_GPIO_Init+0x2e2>
		{
			/* Check the Alternate function parameters */
			assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

			/* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
			switch (GPIO_Init->Mode)
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	4a9a      	ldr	r2, [pc, #616]	; (80006cc <HAL_GPIO_Init+0x2a0>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d05e      	beq.n	8000526 <HAL_GPIO_Init+0xfa>
 8000468:	4a98      	ldr	r2, [pc, #608]	; (80006cc <HAL_GPIO_Init+0x2a0>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d875      	bhi.n	800055a <HAL_GPIO_Init+0x12e>
 800046e:	4a98      	ldr	r2, [pc, #608]	; (80006d0 <HAL_GPIO_Init+0x2a4>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d058      	beq.n	8000526 <HAL_GPIO_Init+0xfa>
 8000474:	4a96      	ldr	r2, [pc, #600]	; (80006d0 <HAL_GPIO_Init+0x2a4>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d86f      	bhi.n	800055a <HAL_GPIO_Init+0x12e>
 800047a:	4a96      	ldr	r2, [pc, #600]	; (80006d4 <HAL_GPIO_Init+0x2a8>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d052      	beq.n	8000526 <HAL_GPIO_Init+0xfa>
 8000480:	4a94      	ldr	r2, [pc, #592]	; (80006d4 <HAL_GPIO_Init+0x2a8>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d869      	bhi.n	800055a <HAL_GPIO_Init+0x12e>
 8000486:	4a94      	ldr	r2, [pc, #592]	; (80006d8 <HAL_GPIO_Init+0x2ac>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d04c      	beq.n	8000526 <HAL_GPIO_Init+0xfa>
 800048c:	4a92      	ldr	r2, [pc, #584]	; (80006d8 <HAL_GPIO_Init+0x2ac>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d863      	bhi.n	800055a <HAL_GPIO_Init+0x12e>
 8000492:	4a92      	ldr	r2, [pc, #584]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d046      	beq.n	8000526 <HAL_GPIO_Init+0xfa>
 8000498:	4a90      	ldr	r2, [pc, #576]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d85d      	bhi.n	800055a <HAL_GPIO_Init+0x12e>
 800049e:	2b12      	cmp	r3, #18
 80004a0:	d82a      	bhi.n	80004f8 <HAL_GPIO_Init+0xcc>
 80004a2:	2b12      	cmp	r3, #18
 80004a4:	d859      	bhi.n	800055a <HAL_GPIO_Init+0x12e>
 80004a6:	a201      	add	r2, pc, #4	; (adr r2, 80004ac <HAL_GPIO_Init+0x80>)
 80004a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ac:	08000527 	.word	0x08000527
 80004b0:	08000501 	.word	0x08000501
 80004b4:	08000513 	.word	0x08000513
 80004b8:	08000555 	.word	0x08000555
 80004bc:	0800055b 	.word	0x0800055b
 80004c0:	0800055b 	.word	0x0800055b
 80004c4:	0800055b 	.word	0x0800055b
 80004c8:	0800055b 	.word	0x0800055b
 80004cc:	0800055b 	.word	0x0800055b
 80004d0:	0800055b 	.word	0x0800055b
 80004d4:	0800055b 	.word	0x0800055b
 80004d8:	0800055b 	.word	0x0800055b
 80004dc:	0800055b 	.word	0x0800055b
 80004e0:	0800055b 	.word	0x0800055b
 80004e4:	0800055b 	.word	0x0800055b
 80004e8:	0800055b 	.word	0x0800055b
 80004ec:	0800055b 	.word	0x0800055b
 80004f0:	08000509 	.word	0x08000509
 80004f4:	0800051d 	.word	0x0800051d
 80004f8:	4a79      	ldr	r2, [pc, #484]	; (80006e0 <HAL_GPIO_Init+0x2b4>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d013      	beq.n	8000526 <HAL_GPIO_Init+0xfa>
					config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
					break;

					/* Parameters are checked with assert_param */
				default:
					break;
 80004fe:	e02c      	b.n	800055a <HAL_GPIO_Init+0x12e>
					config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	623b      	str	r3, [r7, #32]
					break;
 8000506:	e029      	b.n	800055c <HAL_GPIO_Init+0x130>
					config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	3304      	adds	r3, #4
 800050e:	623b      	str	r3, [r7, #32]
					break;
 8000510:	e024      	b.n	800055c <HAL_GPIO_Init+0x130>
					config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	68db      	ldr	r3, [r3, #12]
 8000516:	3308      	adds	r3, #8
 8000518:	623b      	str	r3, [r7, #32]
					break;
 800051a:	e01f      	b.n	800055c <HAL_GPIO_Init+0x130>
					config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	330c      	adds	r3, #12
 8000522:	623b      	str	r3, [r7, #32]
					break;
 8000524:	e01a      	b.n	800055c <HAL_GPIO_Init+0x130>
					if (GPIO_Init->Pull == GPIO_NOPULL)
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d102      	bne.n	8000534 <HAL_GPIO_Init+0x108>
						config =
 800052e:	2304      	movs	r3, #4
 8000530:	623b      	str	r3, [r7, #32]
					break;
 8000532:	e013      	b.n	800055c <HAL_GPIO_Init+0x130>
					else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d105      	bne.n	8000548 <HAL_GPIO_Init+0x11c>
						config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800053c:	2308      	movs	r3, #8
 800053e:	623b      	str	r3, [r7, #32]
						GPIOx->BSRR = ioposition;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	69fa      	ldr	r2, [r7, #28]
 8000544:	611a      	str	r2, [r3, #16]
					break;
 8000546:	e009      	b.n	800055c <HAL_GPIO_Init+0x130>
						config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000548:	2308      	movs	r3, #8
 800054a:	623b      	str	r3, [r7, #32]
						GPIOx->BRR = ioposition;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	69fa      	ldr	r2, [r7, #28]
 8000550:	615a      	str	r2, [r3, #20]
					break;
 8000552:	e003      	b.n	800055c <HAL_GPIO_Init+0x130>
					config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000554:	2300      	movs	r3, #0
 8000556:	623b      	str	r3, [r7, #32]
					break;
 8000558:	e000      	b.n	800055c <HAL_GPIO_Init+0x130>
					break;
 800055a:	bf00      	nop
			}

			/* Check if the current bit belongs to first half or last half of the pin count number
			 in order to address CRH or CRL register*/
			configregister =
					(iocurrent < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 800055c:	69bb      	ldr	r3, [r7, #24]
 800055e:	2bff      	cmp	r3, #255	; 0xff
 8000560:	d801      	bhi.n	8000566 <HAL_GPIO_Init+0x13a>
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	e001      	b.n	800056a <HAL_GPIO_Init+0x13e>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	3304      	adds	r3, #4
			configregister =
 800056a:	617b      	str	r3, [r7, #20]
			registeroffset =
					(iocurrent < GPIO_PIN_8) ?
							(position << 2u) : ((position - 8u) << 2u);
 800056c:	69bb      	ldr	r3, [r7, #24]
 800056e:	2bff      	cmp	r3, #255	; 0xff
 8000570:	d802      	bhi.n	8000578 <HAL_GPIO_Init+0x14c>
 8000572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	e002      	b.n	800057e <HAL_GPIO_Init+0x152>
 8000578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057a:	3b08      	subs	r3, #8
 800057c:	009b      	lsls	r3, r3, #2
			registeroffset =
 800057e:	613b      	str	r3, [r7, #16]

			/* Apply the new configuration of the pin to the register */
			MODIFY_REG((*configregister),
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	210f      	movs	r1, #15
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	fa01 f303 	lsl.w	r3, r1, r3
 800058c:	43db      	mvns	r3, r3
 800058e:	401a      	ands	r2, r3
 8000590:	6a39      	ldr	r1, [r7, #32]
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	fa01 f303 	lsl.w	r3, r1, r3
 8000598:	431a      	orrs	r2, r3
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	601a      	str	r2, [r3, #0]
					((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset),
					(config << registeroffset));

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	f000 80b1 	beq.w	800070e <HAL_GPIO_Init+0x2e2>
			{
				/* Enable AFIO Clock */
				__HAL_RCC_AFIO_CLK_ENABLE();
 80005ac:	4b4d      	ldr	r3, [pc, #308]	; (80006e4 <HAL_GPIO_Init+0x2b8>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a4c      	ldr	r2, [pc, #304]	; (80006e4 <HAL_GPIO_Init+0x2b8>)
 80005b2:	f043 0301 	orr.w	r3, r3, #1
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b4a      	ldr	r3, [pc, #296]	; (80006e4 <HAL_GPIO_Init+0x2b8>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
				temp = AFIO->EXTICR[position >> 2u];
 80005c4:	4a48      	ldr	r2, [pc, #288]	; (80006e8 <HAL_GPIO_Init+0x2bc>)
 80005c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c8:	089b      	lsrs	r3, r3, #2
 80005ca:	3302      	adds	r3, #2
 80005cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d0:	60fb      	str	r3, [r7, #12]
				CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d4:	f003 0303 	and.w	r3, r3, #3
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	220f      	movs	r2, #15
 80005dc:	fa02 f303 	lsl.w	r3, r2, r3
 80005e0:	43db      	mvns	r3, r3
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	4013      	ands	r3, r2
 80005e6:	60fb      	str	r3, [r7, #12]
				SET_BIT(temp,
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a40      	ldr	r2, [pc, #256]	; (80006ec <HAL_GPIO_Init+0x2c0>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d013      	beq.n	8000618 <HAL_GPIO_Init+0x1ec>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a3f      	ldr	r2, [pc, #252]	; (80006f0 <HAL_GPIO_Init+0x2c4>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d00d      	beq.n	8000614 <HAL_GPIO_Init+0x1e8>
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a3e      	ldr	r2, [pc, #248]	; (80006f4 <HAL_GPIO_Init+0x2c8>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d007      	beq.n	8000610 <HAL_GPIO_Init+0x1e4>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4a3d      	ldr	r2, [pc, #244]	; (80006f8 <HAL_GPIO_Init+0x2cc>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d101      	bne.n	800060c <HAL_GPIO_Init+0x1e0>
 8000608:	2303      	movs	r3, #3
 800060a:	e006      	b.n	800061a <HAL_GPIO_Init+0x1ee>
 800060c:	2304      	movs	r3, #4
 800060e:	e004      	b.n	800061a <HAL_GPIO_Init+0x1ee>
 8000610:	2302      	movs	r3, #2
 8000612:	e002      	b.n	800061a <HAL_GPIO_Init+0x1ee>
 8000614:	2301      	movs	r3, #1
 8000616:	e000      	b.n	800061a <HAL_GPIO_Init+0x1ee>
 8000618:	2300      	movs	r3, #0
 800061a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800061c:	f002 0203 	and.w	r2, r2, #3
 8000620:	0092      	lsls	r2, r2, #2
 8000622:	4093      	lsls	r3, r2
 8000624:	68fa      	ldr	r2, [r7, #12]
 8000626:	4313      	orrs	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
						(GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
				AFIO->EXTICR[position >> 2u] = temp;
 800062a:	492f      	ldr	r1, [pc, #188]	; (80006e8 <HAL_GPIO_Init+0x2bc>)
 800062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062e:	089b      	lsrs	r3, r3, #2
 8000630:	3302      	adds	r3, #2
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Configure the interrupt mask */
				if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000640:	2b00      	cmp	r3, #0
 8000642:	d006      	beq.n	8000652 <HAL_GPIO_Init+0x226>
				{
					SET_BIT(EXTI->IMR, iocurrent);
 8000644:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <HAL_GPIO_Init+0x2d0>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	492c      	ldr	r1, [pc, #176]	; (80006fc <HAL_GPIO_Init+0x2d0>)
 800064a:	69bb      	ldr	r3, [r7, #24]
 800064c:	4313      	orrs	r3, r2
 800064e:	600b      	str	r3, [r1, #0]
 8000650:	e006      	b.n	8000660 <HAL_GPIO_Init+0x234>
				}
				else
				{
					CLEAR_BIT(EXTI->IMR, iocurrent);
 8000652:	4b2a      	ldr	r3, [pc, #168]	; (80006fc <HAL_GPIO_Init+0x2d0>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	69bb      	ldr	r3, [r7, #24]
 8000658:	43db      	mvns	r3, r3
 800065a:	4928      	ldr	r1, [pc, #160]	; (80006fc <HAL_GPIO_Init+0x2d0>)
 800065c:	4013      	ands	r3, r2
 800065e:	600b      	str	r3, [r1, #0]
				}

				/* Configure the event mask */
				if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000668:	2b00      	cmp	r3, #0
 800066a:	d006      	beq.n	800067a <HAL_GPIO_Init+0x24e>
				{
					SET_BIT(EXTI->EMR, iocurrent);
 800066c:	4b23      	ldr	r3, [pc, #140]	; (80006fc <HAL_GPIO_Init+0x2d0>)
 800066e:	685a      	ldr	r2, [r3, #4]
 8000670:	4922      	ldr	r1, [pc, #136]	; (80006fc <HAL_GPIO_Init+0x2d0>)
 8000672:	69bb      	ldr	r3, [r7, #24]
 8000674:	4313      	orrs	r3, r2
 8000676:	604b      	str	r3, [r1, #4]
 8000678:	e006      	b.n	8000688 <HAL_GPIO_Init+0x25c>
				}
				else
				{
					CLEAR_BIT(EXTI->EMR, iocurrent);
 800067a:	4b20      	ldr	r3, [pc, #128]	; (80006fc <HAL_GPIO_Init+0x2d0>)
 800067c:	685a      	ldr	r2, [r3, #4]
 800067e:	69bb      	ldr	r3, [r7, #24]
 8000680:	43db      	mvns	r3, r3
 8000682:	491e      	ldr	r1, [pc, #120]	; (80006fc <HAL_GPIO_Init+0x2d0>)
 8000684:	4013      	ands	r3, r2
 8000686:	604b      	str	r3, [r1, #4]
				}

				/* Enable or disable the rising trigger */
				if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000690:	2b00      	cmp	r3, #0
 8000692:	d006      	beq.n	80006a2 <HAL_GPIO_Init+0x276>
				{
					SET_BIT(EXTI->RTSR, iocurrent);
 8000694:	4b19      	ldr	r3, [pc, #100]	; (80006fc <HAL_GPIO_Init+0x2d0>)
 8000696:	689a      	ldr	r2, [r3, #8]
 8000698:	4918      	ldr	r1, [pc, #96]	; (80006fc <HAL_GPIO_Init+0x2d0>)
 800069a:	69bb      	ldr	r3, [r7, #24]
 800069c:	4313      	orrs	r3, r2
 800069e:	608b      	str	r3, [r1, #8]
 80006a0:	e006      	b.n	80006b0 <HAL_GPIO_Init+0x284>
				}
				else
				{
					CLEAR_BIT(EXTI->RTSR, iocurrent);
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <HAL_GPIO_Init+0x2d0>)
 80006a4:	689a      	ldr	r2, [r3, #8]
 80006a6:	69bb      	ldr	r3, [r7, #24]
 80006a8:	43db      	mvns	r3, r3
 80006aa:	4914      	ldr	r1, [pc, #80]	; (80006fc <HAL_GPIO_Init+0x2d0>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	608b      	str	r3, [r1, #8]
				}

				/* Enable or disable the falling trigger */
				if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d021      	beq.n	8000700 <HAL_GPIO_Init+0x2d4>
				{
					SET_BIT(EXTI->FTSR, iocurrent);
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <HAL_GPIO_Init+0x2d0>)
 80006be:	68da      	ldr	r2, [r3, #12]
 80006c0:	490e      	ldr	r1, [pc, #56]	; (80006fc <HAL_GPIO_Init+0x2d0>)
 80006c2:	69bb      	ldr	r3, [r7, #24]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	60cb      	str	r3, [r1, #12]
 80006c8:	e021      	b.n	800070e <HAL_GPIO_Init+0x2e2>
 80006ca:	bf00      	nop
 80006cc:	10320000 	.word	0x10320000
 80006d0:	10310000 	.word	0x10310000
 80006d4:	10220000 	.word	0x10220000
 80006d8:	10210000 	.word	0x10210000
 80006dc:	10120000 	.word	0x10120000
 80006e0:	10110000 	.word	0x10110000
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40010000 	.word	0x40010000
 80006ec:	40010800 	.word	0x40010800
 80006f0:	40010c00 	.word	0x40010c00
 80006f4:	40011000 	.word	0x40011000
 80006f8:	40011400 	.word	0x40011400
 80006fc:	40010400 	.word	0x40010400
				}
				else
				{
					CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000700:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <HAL_GPIO_Init+0x304>)
 8000702:	68da      	ldr	r2, [r3, #12]
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	43db      	mvns	r3, r3
 8000708:	4909      	ldr	r1, [pc, #36]	; (8000730 <HAL_GPIO_Init+0x304>)
 800070a:	4013      	ands	r3, r2
 800070c:	60cb      	str	r3, [r1, #12]
				}
			}
		}

		position++;
 800070e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000710:	3301      	adds	r3, #1
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
	while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071a:	fa22 f303 	lsr.w	r3, r2, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	f47f ae8e 	bne.w	8000440 <HAL_GPIO_Init+0x14>
	}
}
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	372c      	adds	r7, #44	; 0x2c
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	40010400 	.word	0x40010400

08000734 <HAL_GPIO_ReadPin>:
 * @param  GPIO_Pin: specifies the port bit to read.
 *         This parameter can be GPIO_PIN_x where x can be (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	807b      	strh	r3, [r7, #2]
	GPIO_PinState bitstatus;

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	if ((GPIOx->IDR & GPIO_Pin) != (uint32_t) GPIO_PIN_RESET)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	689a      	ldr	r2, [r3, #8]
 8000744:	887b      	ldrh	r3, [r7, #2]
 8000746:	4013      	ands	r3, r2
 8000748:	2b00      	cmp	r3, #0
 800074a:	d002      	beq.n	8000752 <HAL_GPIO_ReadPin+0x1e>
	{
		bitstatus = GPIO_PIN_SET;
 800074c:	2301      	movs	r3, #1
 800074e:	73fb      	strb	r3, [r7, #15]
 8000750:	e001      	b.n	8000756 <HAL_GPIO_ReadPin+0x22>
	}
	else
	{
		bitstatus = GPIO_PIN_RESET;
 8000752:	2300      	movs	r3, #0
 8000754:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 8000756:	7bfb      	ldrb	r3, [r7, #15]
}
 8000758:	4618      	mov	r0, r3
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr

08000762 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
	GPIO_PinState PinState)
{
 8000762:	b480      	push	{r7}
 8000764:	b083      	sub	sp, #12
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
 800076a:	460b      	mov	r3, r1
 800076c:	807b      	strh	r3, [r7, #2]
 800076e:	4613      	mov	r3, r2
 8000770:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET)
 8000772:	787b      	ldrb	r3, [r7, #1]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d003      	beq.n	8000780 <HAL_GPIO_WritePin+0x1e>
	{
		GPIOx->BSRR = GPIO_Pin;
 8000778:	887a      	ldrh	r2, [r7, #2]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	611a      	str	r2, [r3, #16]
	}
	else
	{
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16u;
	}
}
 800077e:	e003      	b.n	8000788 <HAL_GPIO_WritePin+0x26>
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16u;
 8000780:	887b      	ldrh	r3, [r7, #2]
 8000782:	041a      	lsls	r2, r3, #16
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	611a      	str	r2, [r3, #16]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
	...

08000794 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d101      	bne.n	80007a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
 80007a4:	e12b      	b.n	80009fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d106      	bne.n	80007c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2200      	movs	r2, #0
 80007b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f003 fa24 	bl	8003c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2224      	movs	r2, #36	; 0x24
 80007c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f022 0201 	bic.w	r2, r2, #1
 80007d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80007e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80007f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80007f8:	f001 f918 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 80007fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	4a81      	ldr	r2, [pc, #516]	; (8000a08 <HAL_I2C_Init+0x274>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d807      	bhi.n	8000818 <HAL_I2C_Init+0x84>
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4a80      	ldr	r2, [pc, #512]	; (8000a0c <HAL_I2C_Init+0x278>)
 800080c:	4293      	cmp	r3, r2
 800080e:	bf94      	ite	ls
 8000810:	2301      	movls	r3, #1
 8000812:	2300      	movhi	r3, #0
 8000814:	b2db      	uxtb	r3, r3
 8000816:	e006      	b.n	8000826 <HAL_I2C_Init+0x92>
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	4a7d      	ldr	r2, [pc, #500]	; (8000a10 <HAL_I2C_Init+0x27c>)
 800081c:	4293      	cmp	r3, r2
 800081e:	bf94      	ite	ls
 8000820:	2301      	movls	r3, #1
 8000822:	2300      	movhi	r3, #0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	e0e7      	b.n	80009fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	4a78      	ldr	r2, [pc, #480]	; (8000a14 <HAL_I2C_Init+0x280>)
 8000832:	fba2 2303 	umull	r2, r3, r2, r3
 8000836:	0c9b      	lsrs	r3, r3, #18
 8000838:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	68ba      	ldr	r2, [r7, #8]
 800084a:	430a      	orrs	r2, r1
 800084c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	6a1b      	ldr	r3, [r3, #32]
 8000854:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	4a6a      	ldr	r2, [pc, #424]	; (8000a08 <HAL_I2C_Init+0x274>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d802      	bhi.n	8000868 <HAL_I2C_Init+0xd4>
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	3301      	adds	r3, #1
 8000866:	e009      	b.n	800087c <HAL_I2C_Init+0xe8>
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800086e:	fb02 f303 	mul.w	r3, r2, r3
 8000872:	4a69      	ldr	r2, [pc, #420]	; (8000a18 <HAL_I2C_Init+0x284>)
 8000874:	fba2 2303 	umull	r2, r3, r2, r3
 8000878:	099b      	lsrs	r3, r3, #6
 800087a:	3301      	adds	r3, #1
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	6812      	ldr	r2, [r2, #0]
 8000880:	430b      	orrs	r3, r1
 8000882:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800088e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	495c      	ldr	r1, [pc, #368]	; (8000a08 <HAL_I2C_Init+0x274>)
 8000898:	428b      	cmp	r3, r1
 800089a:	d819      	bhi.n	80008d0 <HAL_I2C_Init+0x13c>
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	1e59      	subs	r1, r3, #1
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80008aa:	1c59      	adds	r1, r3, #1
 80008ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80008b0:	400b      	ands	r3, r1
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d00a      	beq.n	80008cc <HAL_I2C_Init+0x138>
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	1e59      	subs	r1, r3, #1
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80008c4:	3301      	adds	r3, #1
 80008c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008ca:	e051      	b.n	8000970 <HAL_I2C_Init+0x1dc>
 80008cc:	2304      	movs	r3, #4
 80008ce:	e04f      	b.n	8000970 <HAL_I2C_Init+0x1dc>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d111      	bne.n	80008fc <HAL_I2C_Init+0x168>
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	1e58      	subs	r0, r3, #1
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6859      	ldr	r1, [r3, #4]
 80008e0:	460b      	mov	r3, r1
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	440b      	add	r3, r1
 80008e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80008ea:	3301      	adds	r3, #1
 80008ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	bf0c      	ite	eq
 80008f4:	2301      	moveq	r3, #1
 80008f6:	2300      	movne	r3, #0
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	e012      	b.n	8000922 <HAL_I2C_Init+0x18e>
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	1e58      	subs	r0, r3, #1
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6859      	ldr	r1, [r3, #4]
 8000904:	460b      	mov	r3, r1
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	440b      	add	r3, r1
 800090a:	0099      	lsls	r1, r3, #2
 800090c:	440b      	add	r3, r1
 800090e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000912:	3301      	adds	r3, #1
 8000914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000918:	2b00      	cmp	r3, #0
 800091a:	bf0c      	ite	eq
 800091c:	2301      	moveq	r3, #1
 800091e:	2300      	movne	r3, #0
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <HAL_I2C_Init+0x196>
 8000926:	2301      	movs	r3, #1
 8000928:	e022      	b.n	8000970 <HAL_I2C_Init+0x1dc>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d10e      	bne.n	8000950 <HAL_I2C_Init+0x1bc>
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	1e58      	subs	r0, r3, #1
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6859      	ldr	r1, [r3, #4]
 800093a:	460b      	mov	r3, r1
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	440b      	add	r3, r1
 8000940:	fbb0 f3f3 	udiv	r3, r0, r3
 8000944:	3301      	adds	r3, #1
 8000946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800094a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800094e:	e00f      	b.n	8000970 <HAL_I2C_Init+0x1dc>
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	1e58      	subs	r0, r3, #1
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6859      	ldr	r1, [r3, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	440b      	add	r3, r1
 800095e:	0099      	lsls	r1, r3, #2
 8000960:	440b      	add	r3, r1
 8000962:	fbb0 f3f3 	udiv	r3, r0, r3
 8000966:	3301      	adds	r3, #1
 8000968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800096c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000970:	6879      	ldr	r1, [r7, #4]
 8000972:	6809      	ldr	r1, [r1, #0]
 8000974:	4313      	orrs	r3, r2
 8000976:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	69da      	ldr	r2, [r3, #28]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6a1b      	ldr	r3, [r3, #32]
 800098a:	431a      	orrs	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	430a      	orrs	r2, r1
 8000992:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800099e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	6911      	ldr	r1, [r2, #16]
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	68d2      	ldr	r2, [r2, #12]
 80009aa:	4311      	orrs	r1, r2
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	6812      	ldr	r2, [r2, #0]
 80009b0:	430b      	orrs	r3, r1
 80009b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	68db      	ldr	r3, [r3, #12]
 80009ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	695a      	ldr	r2, [r3, #20]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	431a      	orrs	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	430a      	orrs	r2, r1
 80009ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f042 0201 	orr.w	r2, r2, #1
 80009de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2200      	movs	r2, #0
 80009e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2220      	movs	r2, #32
 80009ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	000186a0 	.word	0x000186a0
 8000a0c:	001e847f 	.word	0x001e847f
 8000a10:	003d08ff 	.word	0x003d08ff
 8000a14:	431bde83 	.word	0x431bde83
 8000a18:	10624dd3 	.word	0x10624dd3

08000a1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af02      	add	r7, sp, #8
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	607a      	str	r2, [r7, #4]
 8000a26:	461a      	mov	r2, r3
 8000a28:	460b      	mov	r3, r1
 8000a2a:	817b      	strh	r3, [r7, #10]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000a30:	f7ff fbe4 	bl	80001fc <HAL_GetTick>
 8000a34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	2b20      	cmp	r3, #32
 8000a40:	f040 80e0 	bne.w	8000c04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	9300      	str	r3, [sp, #0]
 8000a48:	2319      	movs	r3, #25
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4970      	ldr	r1, [pc, #448]	; (8000c10 <HAL_I2C_Master_Transmit+0x1f4>)
 8000a4e:	68f8      	ldr	r0, [r7, #12]
 8000a50:	f000 fa92 	bl	8000f78 <I2C_WaitOnFlagUntilTimeout>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	e0d3      	b.n	8000c06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d101      	bne.n	8000a6c <HAL_I2C_Master_Transmit+0x50>
 8000a68:	2302      	movs	r3, #2
 8000a6a:	e0cc      	b.n	8000c06 <HAL_I2C_Master_Transmit+0x1ea>
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d007      	beq.n	8000a92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f042 0201 	orr.w	r2, r2, #1
 8000a90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000aa0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	2221      	movs	r2, #33	; 0x21
 8000aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2210      	movs	r2, #16
 8000aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	893a      	ldrh	r2, [r7, #8]
 8000ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	4a50      	ldr	r2, [pc, #320]	; (8000c14 <HAL_I2C_Master_Transmit+0x1f8>)
 8000ad2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000ad4:	8979      	ldrh	r1, [r7, #10]
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	6a3a      	ldr	r2, [r7, #32]
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f000 f9ca 	bl	8000e74 <I2C_MasterRequestWrite>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e08d      	b.n	8000c06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000b00:	e066      	b.n	8000bd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b02:	697a      	ldr	r2, [r7, #20]
 8000b04:	6a39      	ldr	r1, [r7, #32]
 8000b06:	68f8      	ldr	r0, [r7, #12]
 8000b08:	f000 fb0c 	bl	8001124 <I2C_WaitOnTXEFlagUntilTimeout>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d00d      	beq.n	8000b2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	d107      	bne.n	8000b2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e06b      	b.n	8000c06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b32:	781a      	ldrb	r2, [r3, #0]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b56:	3b01      	subs	r3, #1
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	d11b      	bne.n	8000ba4 <HAL_I2C_Master_Transmit+0x188>
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d017      	beq.n	8000ba4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b78:	781a      	ldrb	r2, [r3, #0]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b84:	1c5a      	adds	r2, r3, #1
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	3b01      	subs	r3, #1
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	6a39      	ldr	r1, [r7, #32]
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f000 fafc 	bl	80011a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d00d      	beq.n	8000bd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	2b04      	cmp	r3, #4
 8000bba:	d107      	bne.n	8000bcc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e01a      	b.n	8000c06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d194      	bne.n	8000b02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2220      	movs	r2, #32
 8000bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000c00:	2300      	movs	r3, #0
 8000c02:	e000      	b.n	8000c06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000c04:	2302      	movs	r3, #2
  }
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	00100002 	.word	0x00100002
 8000c14:	ffff0000 	.word	0xffff0000

08000c18 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af02      	add	r7, sp, #8
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	460b      	mov	r3, r1
 8000c26:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8000c28:	f7ff fae8 	bl	80001fc <HAL_GetTick>
 8000c2c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	2b20      	cmp	r3, #32
 8000c3c:	f040 8111 	bne.w	8000e62 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	2319      	movs	r3, #25
 8000c46:	2201      	movs	r2, #1
 8000c48:	4988      	ldr	r1, [pc, #544]	; (8000e6c <HAL_I2C_IsDeviceReady+0x254>)
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	f000 f994 	bl	8000f78 <I2C_WaitOnFlagUntilTimeout>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8000c56:	2302      	movs	r3, #2
 8000c58:	e104      	b.n	8000e64 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d101      	bne.n	8000c68 <HAL_I2C_IsDeviceReady+0x50>
 8000c64:	2302      	movs	r3, #2
 8000c66:	e0fd      	b.n	8000e64 <HAL_I2C_IsDeviceReady+0x24c>
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d007      	beq.n	8000c8e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f042 0201 	orr.w	r2, r2, #1
 8000c8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2224      	movs	r2, #36	; 0x24
 8000ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4a70      	ldr	r2, [pc, #448]	; (8000e70 <HAL_I2C_IsDeviceReady+0x258>)
 8000cb0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cc0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000cce:	68f8      	ldr	r0, [r7, #12]
 8000cd0:	f000 f952 	bl	8000f78 <I2C_WaitOnFlagUntilTimeout>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d00d      	beq.n	8000cf6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ce8:	d103      	bne.n	8000cf2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e0b6      	b.n	8000e64 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000cf6:	897b      	ldrh	r3, [r7, #10]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000d04:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8000d06:	f7ff fa79 	bl	80001fc <HAL_GetTick>
 8000d0a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	bf0c      	ite	eq
 8000d1a:	2301      	moveq	r3, #1
 8000d1c:	2300      	movne	r3, #0
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d30:	bf0c      	ite	eq
 8000d32:	2301      	moveq	r3, #1
 8000d34:	2300      	movne	r3, #0
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8000d3a:	e025      	b.n	8000d88 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000d3c:	f7ff fa5e 	bl	80001fc <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d302      	bcc.n	8000d52 <HAL_I2C_IsDeviceReady+0x13a>
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d103      	bne.n	8000d5a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	22a0      	movs	r2, #160	; 0xa0
 8000d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	f003 0302 	and.w	r3, r3, #2
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	bf0c      	ite	eq
 8000d68:	2301      	moveq	r3, #1
 8000d6a:	2300      	movne	r3, #0
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d7e:	bf0c      	ite	eq
 8000d80:	2301      	moveq	r3, #1
 8000d82:	2300      	movne	r3, #0
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2ba0      	cmp	r3, #160	; 0xa0
 8000d92:	d005      	beq.n	8000da0 <HAL_I2C_IsDeviceReady+0x188>
 8000d94:	7dfb      	ldrb	r3, [r7, #23]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d102      	bne.n	8000da0 <HAL_I2C_IsDeviceReady+0x188>
 8000d9a:	7dbb      	ldrb	r3, [r7, #22]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d0cd      	beq.n	8000d3c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2220      	movs	r2, #32
 8000da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d129      	bne.n	8000e0a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dc4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2319      	movs	r3, #25
 8000de2:	2201      	movs	r2, #1
 8000de4:	4921      	ldr	r1, [pc, #132]	; (8000e6c <HAL_I2C_IsDeviceReady+0x254>)
 8000de6:	68f8      	ldr	r0, [r7, #12]
 8000de8:	f000 f8c6 	bl	8000f78 <I2C_WaitOnFlagUntilTimeout>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e036      	b.n	8000e64 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2220      	movs	r2, #32
 8000dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e02c      	b.n	8000e64 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e18:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000e22:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	2319      	movs	r3, #25
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	490f      	ldr	r1, [pc, #60]	; (8000e6c <HAL_I2C_IsDeviceReady+0x254>)
 8000e2e:	68f8      	ldr	r0, [r7, #12]
 8000e30:	f000 f8a2 	bl	8000f78 <I2C_WaitOnFlagUntilTimeout>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e012      	b.n	8000e64 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	3301      	adds	r3, #1
 8000e42:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f4ff af32 	bcc.w	8000cb2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2220      	movs	r2, #32
 8000e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e000      	b.n	8000e64 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8000e62:	2302      	movs	r3, #2
  }
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3720      	adds	r7, #32
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	00100002 	.word	0x00100002
 8000e70:	ffff0000 	.word	0xffff0000

08000e74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af02      	add	r7, sp, #8
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	460b      	mov	r3, r1
 8000e82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	2b08      	cmp	r3, #8
 8000e8e:	d006      	beq.n	8000e9e <I2C_MasterRequestWrite+0x2a>
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d003      	beq.n	8000e9e <I2C_MasterRequestWrite+0x2a>
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000e9c:	d108      	bne.n	8000eb0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	e00b      	b.n	8000ec8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	2b12      	cmp	r3, #18
 8000eb6:	d107      	bne.n	8000ec8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ec6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f000 f84f 	bl	8000f78 <I2C_WaitOnFlagUntilTimeout>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d00d      	beq.n	8000efc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000eee:	d103      	bne.n	8000ef8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e035      	b.n	8000f68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f04:	d108      	bne.n	8000f18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000f06:	897b      	ldrh	r3, [r7, #10]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000f14:	611a      	str	r2, [r3, #16]
 8000f16:	e01b      	b.n	8000f50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000f18:	897b      	ldrh	r3, [r7, #10]
 8000f1a:	11db      	asrs	r3, r3, #7
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	f003 0306 	and.w	r3, r3, #6
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	f063 030f 	orn	r3, r3, #15
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	490e      	ldr	r1, [pc, #56]	; (8000f70 <I2C_MasterRequestWrite+0xfc>)
 8000f36:	68f8      	ldr	r0, [r7, #12]
 8000f38:	f000 f875 	bl	8001026 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e010      	b.n	8000f68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000f46:	897b      	ldrh	r3, [r7, #10]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	4907      	ldr	r1, [pc, #28]	; (8000f74 <I2C_MasterRequestWrite+0x100>)
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f000 f865 	bl	8001026 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e000      	b.n	8000f68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	00010008 	.word	0x00010008
 8000f74:	00010002 	.word	0x00010002

08000f78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	4613      	mov	r3, r2
 8000f86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f88:	e025      	b.n	8000fd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f90:	d021      	beq.n	8000fd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f92:	f7ff f933 	bl	80001fc <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d302      	bcc.n	8000fa8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d116      	bne.n	8000fd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2200      	movs	r2, #0
 8000fac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2220      	movs	r2, #32
 8000fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f043 0220 	orr.w	r2, r3, #32
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e023      	b.n	800101e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	0c1b      	lsrs	r3, r3, #16
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d10d      	bne.n	8000ffc <I2C_WaitOnFlagUntilTimeout+0x84>
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4013      	ands	r3, r2
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	bf0c      	ite	eq
 8000ff2:	2301      	moveq	r3, #1
 8000ff4:	2300      	movne	r3, #0
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	e00c      	b.n	8001016 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	43da      	mvns	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	4013      	ands	r3, r2
 8001008:	b29b      	uxth	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	bf0c      	ite	eq
 800100e:	2301      	moveq	r3, #1
 8001010:	2300      	movne	r3, #0
 8001012:	b2db      	uxtb	r3, r3
 8001014:	461a      	mov	r2, r3
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	429a      	cmp	r2, r3
 800101a:	d0b6      	beq.n	8000f8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b084      	sub	sp, #16
 800102a:	af00      	add	r7, sp, #0
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001034:	e051      	b.n	80010da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001044:	d123      	bne.n	800108e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001054:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800105e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2200      	movs	r2, #0
 8001064:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2220      	movs	r2, #32
 800106a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f043 0204 	orr.w	r2, r3, #4
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e046      	b.n	800111c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d021      	beq.n	80010da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001096:	f7ff f8b1 	bl	80001fc <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d302      	bcc.n	80010ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d116      	bne.n	80010da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2200      	movs	r2, #0
 80010b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2220      	movs	r2, #32
 80010b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f043 0220 	orr.w	r2, r3, #32
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e020      	b.n	800111c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	0c1b      	lsrs	r3, r3, #16
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d10c      	bne.n	80010fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	4013      	ands	r3, r2
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	bf14      	ite	ne
 80010f6:	2301      	movne	r3, #1
 80010f8:	2300      	moveq	r3, #0
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	e00b      	b.n	8001116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	43da      	mvns	r2, r3
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	4013      	ands	r3, r2
 800110a:	b29b      	uxth	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	bf14      	ite	ne
 8001110:	2301      	movne	r3, #1
 8001112:	2300      	moveq	r3, #0
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d18d      	bne.n	8001036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001130:	e02d      	b.n	800118e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f000 f878 	bl	8001228 <I2C_IsAcknowledgeFailed>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e02d      	b.n	800119e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d021      	beq.n	800118e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800114a:	f7ff f857 	bl	80001fc <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	429a      	cmp	r2, r3
 8001158:	d302      	bcc.n	8001160 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d116      	bne.n	800118e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2200      	movs	r2, #0
 8001164:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2220      	movs	r2, #32
 800116a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f043 0220 	orr.w	r2, r3, #32
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e007      	b.n	800119e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001198:	2b80      	cmp	r3, #128	; 0x80
 800119a:	d1ca      	bne.n	8001132 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	60f8      	str	r0, [r7, #12]
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80011b2:	e02d      	b.n	8001210 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f000 f837 	bl	8001228 <I2C_IsAcknowledgeFailed>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e02d      	b.n	8001220 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ca:	d021      	beq.n	8001210 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011cc:	f7ff f816 	bl	80001fc <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d302      	bcc.n	80011e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d116      	bne.n	8001210 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2200      	movs	r2, #0
 80011e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2220      	movs	r2, #32
 80011ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	f043 0220 	orr.w	r2, r3, #32
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e007      	b.n	8001220 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	2b04      	cmp	r3, #4
 800121c:	d1ca      	bne.n	80011b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800123a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800123e:	d11b      	bne.n	8001278 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001248:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2220      	movs	r2, #32
 8001254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	f043 0204 	orr.w	r2, r3, #4
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e000      	b.n	800127a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <HAL_RCC_OscConfig>:
 *         supported by this macro. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_OscConfig (RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	uint32_t pll_config;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_RCC_OscConfig+0x12>
	{
		return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e26c      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 8087 	beq.w	80013b2 <HAL_RCC_OscConfig+0x12e>
	{
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

		/* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012a4:	4b92      	ldr	r3, [pc, #584]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 030c 	and.w	r3, r3, #12
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	d00c      	beq.n	80012ca <HAL_RCC_OscConfig+0x46>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 80012b0:	4b8f      	ldr	r3, [pc, #572]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d112      	bne.n	80012e2 <HAL_RCC_OscConfig+0x5e>
						== RCC_SYSCLKSOURCE_STATUS_PLLCLK)
						&& (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012bc:	4b8c      	ldr	r3, [pc, #560]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c8:	d10b      	bne.n	80012e2 <HAL_RCC_OscConfig+0x5e>
		{
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ca:	4b89      	ldr	r3, [pc, #548]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d06c      	beq.n	80013b0 <HAL_RCC_OscConfig+0x12c>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d168      	bne.n	80013b0 <HAL_RCC_OscConfig+0x12c>
			{
				return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e246      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
			}
		}
		else
		{
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ea:	d106      	bne.n	80012fa <HAL_RCC_OscConfig+0x76>
 80012ec:	4b80      	ldr	r3, [pc, #512]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a7f      	ldr	r2, [pc, #508]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	e02e      	b.n	8001358 <HAL_RCC_OscConfig+0xd4>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10c      	bne.n	800131c <HAL_RCC_OscConfig+0x98>
 8001302:	4b7b      	ldr	r3, [pc, #492]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a7a      	ldr	r2, [pc, #488]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	4b78      	ldr	r3, [pc, #480]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a77      	ldr	r2, [pc, #476]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001314:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e01d      	b.n	8001358 <HAL_RCC_OscConfig+0xd4>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001324:	d10c      	bne.n	8001340 <HAL_RCC_OscConfig+0xbc>
 8001326:	4b72      	ldr	r3, [pc, #456]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a71      	ldr	r2, [pc, #452]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 800132c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	4b6f      	ldr	r3, [pc, #444]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a6e      	ldr	r2, [pc, #440]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e00b      	b.n	8001358 <HAL_RCC_OscConfig+0xd4>
 8001340:	4b6b      	ldr	r3, [pc, #428]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a6a      	ldr	r2, [pc, #424]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b68      	ldr	r3, [pc, #416]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a67      	ldr	r2, [pc, #412]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001356:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d013      	beq.n	8001388 <HAL_RCC_OscConfig+0x104>
			{
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8001360:	f7fe ff4c 	bl	80001fc <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0xf6>
				{
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001368:	f7fe ff48 	bl	80001fc <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	; 0x64
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0xf6>
					{
						return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e1fa      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	4b5d      	ldr	r3, [pc, #372]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0xe4>
 8001386:	e014      	b.n	80013b2 <HAL_RCC_OscConfig+0x12e>
				}
			}
			else
			{
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8001388:	f7fe ff38 	bl	80001fc <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x11e>
				{
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001390:	f7fe ff34 	bl	80001fc <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	; 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x11e>
					{
						return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e1e6      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	4b53      	ldr	r3, [pc, #332]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x10c>
 80013ae:	e000      	b.n	80013b2 <HAL_RCC_OscConfig+0x12e>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b0:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d063      	beq.n	8001486 <HAL_RCC_OscConfig+0x202>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013be:	4b4c      	ldr	r3, [pc, #304]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00b      	beq.n	80013e2 <HAL_RCC_OscConfig+0x15e>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 80013ca:	4b49      	ldr	r3, [pc, #292]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d11c      	bne.n	8001410 <HAL_RCC_OscConfig+0x18c>
						== RCC_SYSCLKSOURCE_STATUS_PLLCLK)
						&& (__HAL_RCC_GET_PLL_OSCSOURCE()
 80013d6:	4b46      	ldr	r3, [pc, #280]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d116      	bne.n	8001410 <HAL_RCC_OscConfig+0x18c>
								== RCC_PLLSOURCE_HSI_DIV2)))
		{
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e2:	4b43      	ldr	r3, [pc, #268]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <HAL_RCC_OscConfig+0x176>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d001      	beq.n	80013fa <HAL_RCC_OscConfig+0x176>
			{
				return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e1ba      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
			}
			/* Otherwise, just the calibration is allowed */
			else
			{
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80013fa:	4b3d      	ldr	r3, [pc, #244]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4939      	ldr	r1, [pc, #228]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 800140a:	4313      	orrs	r3, r2
 800140c:	600b      	str	r3, [r1, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140e:	e03a      	b.n	8001486 <HAL_RCC_OscConfig+0x202>
			}
		}
		else
		{
			/* Check the HSI State */
			if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d020      	beq.n	800145a <HAL_RCC_OscConfig+0x1d6>
			{
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 8001418:	4b36      	ldr	r3, [pc, #216]	; (80014f4 <HAL_RCC_OscConfig+0x270>)
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 800141e:	f7fe feed 	bl	80001fc <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x1b4>
				{
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001426:	f7fe fee9 	bl	80001fc <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x1b4>
					{
						return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e19b      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x1a2>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8001444:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	4927      	ldr	r1, [pc, #156]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001454:	4313      	orrs	r3, r2
 8001456:	600b      	str	r3, [r1, #0]
 8001458:	e015      	b.n	8001486 <HAL_RCC_OscConfig+0x202>
						RCC_OscInitStruct->HSICalibrationValue);
			}
			else
			{
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 800145a:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <HAL_RCC_OscConfig+0x270>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8001460:	f7fe fecc 	bl	80001fc <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x1f6>
				{
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001468:	f7fe fec8 	bl	80001fc <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x1f6>
					{
						return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e17a      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x1e4>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d03a      	beq.n	8001508 <HAL_RCC_OscConfig+0x284>
	{
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d019      	beq.n	80014ce <HAL_RCC_OscConfig+0x24a>
		{
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <HAL_RCC_OscConfig+0x274>)
 800149c:	2201      	movs	r2, #1
 800149e:	601a      	str	r2, [r3, #0]

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80014a0:	f7fe feac 	bl	80001fc <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x236>
			{
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a8:	f7fe fea8 	bl	80001fc <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x236>
				{
					return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e15a      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0x224>
				}
			}
			/*  To have a fully stabilized clock in the specified range, a software delay of 1ms
			 should be added.*/
			RCC_Delay(1);
 80014c6:	2001      	movs	r0, #1
 80014c8:	f000 fac4 	bl	8001a54 <RCC_Delay>
 80014cc:	e01c      	b.n	8001508 <HAL_RCC_OscConfig+0x284>
		}
		else
		{
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_RCC_OscConfig+0x274>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80014d4:	f7fe fe92 	bl	80001fc <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is disabled */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014da:	e00f      	b.n	80014fc <HAL_RCC_OscConfig+0x278>
			{
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014dc:	f7fe fe8e 	bl	80001fc <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d908      	bls.n	80014fc <HAL_RCC_OscConfig+0x278>
				{
					return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e140      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	42420000 	.word	0x42420000
 80014f8:	42420480 	.word	0x42420480
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fc:	4b9e      	ldr	r3, [pc, #632]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1e9      	bne.n	80014dc <HAL_RCC_OscConfig+0x258>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80a6 	beq.w	8001662 <HAL_RCC_OscConfig+0x3de>
			== RCC_OSCILLATORTYPE_LSE)
	{
		FlagStatus pwrclkchanged = RESET;
 8001516:	2300      	movs	r3, #0
 8001518:	75fb      	strb	r3, [r7, #23]
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800151a:	4b97      	ldr	r3, [pc, #604]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10d      	bne.n	8001542 <HAL_RCC_OscConfig+0x2be>
		{
			__HAL_RCC_PWR_CLK_ENABLE();
 8001526:	4b94      	ldr	r3, [pc, #592]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	4a93      	ldr	r2, [pc, #588]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001530:	61d3      	str	r3, [r2, #28]
 8001532:	4b91      	ldr	r3, [pc, #580]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 800153e:	2301      	movs	r3, #1
 8001540:	75fb      	strb	r3, [r7, #23]
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001542:	4b8e      	ldr	r3, [pc, #568]	; (800177c <HAL_RCC_OscConfig+0x4f8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d118      	bne.n	8001580 <HAL_RCC_OscConfig+0x2fc>
		{
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 800154e:	4b8b      	ldr	r3, [pc, #556]	; (800177c <HAL_RCC_OscConfig+0x4f8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a8a      	ldr	r2, [pc, #552]	; (800177c <HAL_RCC_OscConfig+0x4f8>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001558:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 800155a:	f7fe fe4f 	bl	80001fc <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x2f0>
			{
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001562:	f7fe fe4b 	bl	80001fc <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b64      	cmp	r3, #100	; 0x64
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x2f0>
				{
					return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e0fd      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	4b81      	ldr	r3, [pc, #516]	; (800177c <HAL_RCC_OscConfig+0x4f8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x2de>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d106      	bne.n	8001596 <HAL_RCC_OscConfig+0x312>
 8001588:	4b7b      	ldr	r3, [pc, #492]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	4a7a      	ldr	r2, [pc, #488]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6213      	str	r3, [r2, #32]
 8001594:	e02d      	b.n	80015f2 <HAL_RCC_OscConfig+0x36e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x334>
 800159e:	4b76      	ldr	r3, [pc, #472]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	4a75      	ldr	r2, [pc, #468]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015a4:	f023 0301 	bic.w	r3, r3, #1
 80015a8:	6213      	str	r3, [r2, #32]
 80015aa:	4b73      	ldr	r3, [pc, #460]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	4a72      	ldr	r2, [pc, #456]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015b0:	f023 0304 	bic.w	r3, r3, #4
 80015b4:	6213      	str	r3, [r2, #32]
 80015b6:	e01c      	b.n	80015f2 <HAL_RCC_OscConfig+0x36e>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b05      	cmp	r3, #5
 80015be:	d10c      	bne.n	80015da <HAL_RCC_OscConfig+0x356>
 80015c0:	4b6d      	ldr	r3, [pc, #436]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	4a6c      	ldr	r2, [pc, #432]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015c6:	f043 0304 	orr.w	r3, r3, #4
 80015ca:	6213      	str	r3, [r2, #32]
 80015cc:	4b6a      	ldr	r3, [pc, #424]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	4a69      	ldr	r2, [pc, #420]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6213      	str	r3, [r2, #32]
 80015d8:	e00b      	b.n	80015f2 <HAL_RCC_OscConfig+0x36e>
 80015da:	4b67      	ldr	r3, [pc, #412]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	4a66      	ldr	r2, [pc, #408]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015e0:	f023 0301 	bic.w	r3, r3, #1
 80015e4:	6213      	str	r3, [r2, #32]
 80015e6:	4b64      	ldr	r3, [pc, #400]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	4a63      	ldr	r2, [pc, #396]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80015ec:	f023 0304 	bic.w	r3, r3, #4
 80015f0:	6213      	str	r3, [r2, #32]
		/* Check the LSE State */
		if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d015      	beq.n	8001626 <HAL_RCC_OscConfig+0x3a2>
		{
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80015fa:	f7fe fdff 	bl	80001fc <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001600:	e00a      	b.n	8001618 <HAL_RCC_OscConfig+0x394>
			{
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001602:	f7fe fdfb 	bl	80001fc <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001610:	4293      	cmp	r3, r2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x394>
				{
					return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e0ab      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001618:	4b57      	ldr	r3, [pc, #348]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0ee      	beq.n	8001602 <HAL_RCC_OscConfig+0x37e>
 8001624:	e014      	b.n	8001650 <HAL_RCC_OscConfig+0x3cc>
			}
		}
		else
		{
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 8001626:	f7fe fde9 	bl	80001fc <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is disabled */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162c:	e00a      	b.n	8001644 <HAL_RCC_OscConfig+0x3c0>
			{
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800162e:	f7fe fde5 	bl	80001fc <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	f241 3288 	movw	r2, #5000	; 0x1388
 800163c:	4293      	cmp	r3, r2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x3c0>
				{
					return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e095      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001644:	4b4c      	ldr	r3, [pc, #304]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1ee      	bne.n	800162e <HAL_RCC_OscConfig+0x3aa>
				}
			}
		}

		/* Require to disable power clock if necessary */
		if (pwrclkchanged == SET)
 8001650:	7dfb      	ldrb	r3, [r7, #23]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d105      	bne.n	8001662 <HAL_RCC_OscConfig+0x3de>
		{
			__HAL_RCC_PWR_CLK_DISABLE();
 8001656:	4b48      	ldr	r3, [pc, #288]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	4a47      	ldr	r2, [pc, #284]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 800165c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001660:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 8081 	beq.w	800176e <HAL_RCC_OscConfig+0x4ea>
	{
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800166c:	4b42      	ldr	r3, [pc, #264]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b08      	cmp	r3, #8
 8001676:	d061      	beq.n	800173c <HAL_RCC_OscConfig+0x4b8>
		{
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d146      	bne.n	800170e <HAL_RCC_OscConfig+0x48a>
				assert_param(
						IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
				assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8001680:	4b3f      	ldr	r3, [pc, #252]	; (8001780 <HAL_RCC_OscConfig+0x4fc>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8001686:	f7fe fdb9 	bl	80001fc <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x41c>
				{
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168e:	f7fe fdb5 	bl	80001fc <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x41c>
					{
						return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e067      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a0:	4b35      	ldr	r3, [pc, #212]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f0      	bne.n	800168e <HAL_RCC_OscConfig+0x40a>
					}
				}

				/* Configure the HSE prediv factor --------------------------------*/
				/* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
				if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b4:	d108      	bne.n	80016c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

					/* Set PREDIV1 Value */
					__HAL_RCC_HSE_PREDIV_CONFIG(
 80016b6:	4b30      	ldr	r3, [pc, #192]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	492d      	ldr	r1, [pc, #180]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
							RCC_OscInitStruct->HSEPredivValue);
				}

				/* Configure the main PLL clock source and multiplication factors. */
				__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c8:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a19      	ldr	r1, [r3, #32]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	430b      	orrs	r3, r1
 80016da:	4927      	ldr	r1, [pc, #156]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
						RCC_OscInitStruct->PLL.PLLMUL);
				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 80016e0:	4b27      	ldr	r3, [pc, #156]	; (8001780 <HAL_RCC_OscConfig+0x4fc>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 80016e6:	f7fe fd89 	bl	80001fc <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x47c>
				{
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ee:	f7fe fd85 	bl	80001fc <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x47c>
					{
						return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e037      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x46a>
 800170c:	e02f      	b.n	800176e <HAL_RCC_OscConfig+0x4ea>
				}
			}
			else
			{
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <HAL_RCC_OscConfig+0x4fc>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8001714:	f7fe fd72 	bl	80001fc <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x4aa>
				{
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171c:	f7fe fd6e 	bl	80001fc <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x4aa>
					{
						return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e020      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x498>
 800173a:	e018      	b.n	800176e <HAL_RCC_OscConfig+0x4ea>
			}
		}
		else
		{
			/* Check if there is a request to disable the PLL used as System clock source */
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_RCC_OscConfig+0x4c4>
			{
				return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e013      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
			}
			else
			{
				/* Do not return HAL_ERROR if request repeats the current configuration */
				pll_config = RCC->CFGR;
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_RCC_OscConfig+0x4f4>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	60fb      	str	r3, [r7, #12]
				if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
						!= RCC_OscInitStruct->PLL.PLLSource)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a1b      	ldr	r3, [r3, #32]
				if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC)
 8001758:	429a      	cmp	r2, r3
 800175a:	d106      	bne.n	800176a <HAL_RCC_OscConfig+0x4e6>
						|| (READ_BIT(pll_config, RCC_CFGR_PLLMULL)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
								!= RCC_OscInitStruct->PLL.PLLMUL))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
						|| (READ_BIT(pll_config, RCC_CFGR_PLLMULL)
 8001766:	429a      	cmp	r2, r3
 8001768:	d001      	beq.n	800176e <HAL_RCC_OscConfig+0x4ea>
				{
					return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <HAL_RCC_OscConfig+0x4ec>
				}
			}
		}
	}

	return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40021000 	.word	0x40021000
 800177c:	40007000 	.word	0x40007000
 8001780:	42420060 	.word	0x42420060

08001784 <HAL_RCC_ClockConfig>:
 *         currently used as system clock source.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig (RCC_ClkInitTypeDef *RCC_ClkInitStruct,
	uint32_t FLatency)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_RCC_ClockConfig+0x14>
	{
		return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0d0      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001798:	4b6a      	ldr	r3, [pc, #424]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d910      	bls.n	80017c8 <HAL_RCC_ClockConfig+0x44>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b67      	ldr	r3, [pc, #412]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 0207 	bic.w	r2, r3, #7
 80017ae:	4965      	ldr	r1, [pc, #404]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	4b63      	ldr	r3, [pc, #396]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x44>
		{
			return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0b8      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
		}
	}

#endif /* FLASH_ACR_LATENCY */
	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d020      	beq.n	8001816 <HAL_RCC_ClockConfig+0x92>
			== RCC_CLOCKTYPE_HCLK)
	{
		/* Set the highest APBx dividers in order to ensure that we do not go through
		 a non-spec phase whatever we decrease or increase HCLK. */
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x68>
				== RCC_CLOCKTYPE_PCLK1)
		{
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e0:	4b59      	ldr	r3, [pc, #356]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	4a58      	ldr	r2, [pc, #352]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017ea:	6053      	str	r3, [r2, #4]
		}

		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_ClockConfig+0x80>
				== RCC_CLOCKTYPE_PCLK2)
		{
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f8:	4b53      	ldr	r3, [pc, #332]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4a52      	ldr	r2, [pc, #328]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001802:	6053      	str	r3, [r2, #4]
		}

		/* Set the new HCLK clock divider */
		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001804:	4b50      	ldr	r3, [pc, #320]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	494d      	ldr	r1, [pc, #308]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	4313      	orrs	r3, r2
 8001814:	604b      	str	r3, [r1, #4]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d040      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x120>
			== RCC_CLOCKTYPE_SYSCLK)
	{
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xb6>
		{
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4b47      	ldr	r3, [pc, #284]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d115      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
			{
				return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e07f      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
			}
		}
		/* PLL is selected as System Clock Source */
		else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xce>
		{
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001842:	4b41      	ldr	r3, [pc, #260]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d109      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
			{
				return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e073      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
		}
		/* HSI is selected as System Clock Source */
		else
		{
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001852:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
			{
				return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e06b      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
			}
		}
		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001862:	4b39      	ldr	r3, [pc, #228]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f023 0203 	bic.w	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4936      	ldr	r1, [pc, #216]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]

		/* Get Start Tick */
		tickstart = HAL_GetTick();
 8001874:	f7fe fcc2 	bl	80001fc <HAL_GetTick>
 8001878:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 800187a:	e00a      	b.n	8001892 <HAL_RCC_ClockConfig+0x10e>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
		{
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187c:	f7fe fcbe 	bl	80001fc <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f241 3288 	movw	r2, #5000	; 0x1388
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_ClockConfig+0x10e>
			{
				return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e053      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8001892:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	009b      	lsls	r3, r3, #2
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d1eb      	bne.n	800187c <HAL_RCC_ClockConfig+0xf8>
		}
	}

#if defined(FLASH_ACR_LATENCY)
	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018a4:	4b27      	ldr	r3, [pc, #156]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d210      	bcs.n	80018d4 <HAL_RCC_ClockConfig+0x150>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b24      	ldr	r3, [pc, #144]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 0207 	bic.w	r2, r3, #7
 80018ba:	4922      	ldr	r1, [pc, #136]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	4313      	orrs	r3, r2
 80018c0:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x150>
		{
			return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e032      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
		}
	}
#endif /* FLASH_ACR_LATENCY */

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x16e>
			== RCC_CLOCKTYPE_PCLK1)
	{
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 80018e0:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4916      	ldr	r1, [pc, #88]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d009      	beq.n	8001912 <HAL_RCC_ClockConfig+0x18e>
			== RCC_CLOCKTYPE_PCLK2)
	{
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	490e      	ldr	r1, [pc, #56]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	4313      	orrs	r3, r2
 8001910:	604b      	str	r3, [r1, #4]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8001912:	f000 f821 	bl	8001958 <HAL_RCC_GetSysClockFreq>
 8001916:	4602      	mov	r2, r0
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	490a      	ldr	r1, [pc, #40]	; (800194c <HAL_RCC_ClockConfig+0x1c8>)
 8001924:	5ccb      	ldrb	r3, [r1, r3]
 8001926:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 800192a:	4a09      	ldr	r2, [pc, #36]	; (8001950 <HAL_RCC_ClockConfig+0x1cc>)
 800192c:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings*/
	HAL_InitTick(uwTickPrio);
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_RCC_ClockConfig+0x1d0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fc20 	bl	8000178 <HAL_InitTick>

	return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40022000 	.word	0x40022000
 8001948:	40021000 	.word	0x40021000
 800194c:	08004f58 	.word	0x08004f58
 8001950:	20000038 	.word	0x20000038
 8001954:	20000000 	.word	0x20000000

08001958 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq (void)
{
 8001958:	b490      	push	{r4, r7}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
	const uint8_t aPLLMULFactorTable[16] =
 800195e:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001960:	1d3c      	adds	r4, r7, #4
 8001962:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001964:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16 };
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
	const uint8_t aPredivFactorTable[2] =
 8001968:	f240 2301 	movw	r3, #513	; 0x201
 800196c:	803b      	strh	r3, [r7, #0]
	{ 1, 2 };
#endif /*RCC_CFGR2_PREDIV1*/

#endif
	uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
	uint32_t sysclockfreq = 0U;
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

	tmpreg = RCC->CFGR;
 8001982:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	61fb      	str	r3, [r7, #28]

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (tmpreg & RCC_CFGR_SWS)
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b04      	cmp	r3, #4
 8001990:	d002      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0x40>
 8001992:	2b08      	cmp	r3, #8
 8001994:	d003      	beq.n	800199e <HAL_RCC_GetSysClockFreq+0x46>
 8001996:	e02d      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0x9c>
	{
		case RCC_SYSCLKSOURCE_STATUS_HSE: /* HSE used as system clock */
		{
			sysclockfreq = HSE_VALUE;
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 800199a:	623b      	str	r3, [r7, #32]
			break;
 800199c:	e02d      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0xa2>
		}
		case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock */
		{
			pllmul = aPLLMULFactorTable[(uint32_t) (tmpreg & RCC_CFGR_PLLMULL)
					>> RCC_CFGR_PLLMULL_Pos];
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	0c9b      	lsrs	r3, r3, #18
 80019a2:	f003 030f 	and.w	r3, r3, #15
			pllmul = aPLLMULFactorTable[(uint32_t) (tmpreg & RCC_CFGR_PLLMULL)
 80019a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019aa:	4413      	add	r3, r2
 80019ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80019b0:	617b      	str	r3, [r7, #20]
			if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d013      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x8c>
			{
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
				prediv = aPredivFactorTable[(uint32_t) (RCC->CFGR
 80019bc:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xb4>)
 80019be:	685b      	ldr	r3, [r3, #4]
						& RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019c0:	0c5b      	lsrs	r3, r3, #17
 80019c2:	f003 0301 	and.w	r3, r3, #1
				prediv = aPredivFactorTable[(uint32_t) (RCC->CFGR
 80019c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019ca:	4413      	add	r3, r2
 80019cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
				/* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
				pllclk = (uint32_t) ((HSE_VALUE * pllmul) / prediv);
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	4a0e      	ldr	r2, [pc, #56]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019d6:	fb02 f203 	mul.w	r2, r2, r3
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
 80019e2:	e004      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
			}
			else
			{
				/* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
				pllclk = (uint32_t) ((HSI_VALUE >> 1) * pllmul);
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019e8:	fb02 f303 	mul.w	r3, r2, r3
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
			}
			sysclockfreq = pllclk;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	623b      	str	r3, [r7, #32]
			break;
 80019f2:	e002      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0xa2>
		}
		case RCC_SYSCLKSOURCE_STATUS_HSI: /* HSI used as system clock source */
		default: /* HSI used as system clock */
		{
			sysclockfreq = HSI_VALUE;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019f6:	623b      	str	r3, [r7, #32]
			break;
 80019f8:	bf00      	nop
		}
	}
	return sysclockfreq;
 80019fa:	6a3b      	ldr	r3, [r7, #32]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3728      	adds	r7, #40	; 0x28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc90      	pop	{r4, r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	080046e4 	.word	0x080046e4
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	007a1200 	.word	0x007a1200
 8001a14:	003d0900 	.word	0x003d0900

08001a18 <HAL_RCC_GetHCLKFreq>:
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq (void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 8001a1c:	4b02      	ldr	r3, [pc, #8]	; (8001a28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	20000038 	.word	0x20000038

08001a2c <HAL_RCC_GetPCLK1Freq>:
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq (void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8001a30:	f7ff fff2 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a34:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	0a1b      	lsrs	r3, r3, #8
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	4903      	ldr	r1, [pc, #12]	; (8001a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a42:	5ccb      	ldrb	r3, [r1, r3]
 8001a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	08004f68 	.word	0x08004f68

08001a54 <RCC_Delay>:
 * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
 * @param  mdelay: specifies the delay time length, in milliseconds.
 * @retval None
 */
static void RCC_Delay (uint32_t mdelay)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	__IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <RCC_Delay+0x34>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <RCC_Delay+0x38>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	0a5b      	lsrs	r3, r3, #9
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	fb02 f303 	mul.w	r3, r2, r3
 8001a6e:	60fb      	str	r3, [r7, #12]
	do
	{
		__NOP();
 8001a70:	bf00      	nop
	} while (Delay--);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	1e5a      	subs	r2, r3, #1
 8001a76:	60fa      	str	r2, [r7, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1f9      	bne.n	8001a70 <RCC_Delay+0x1c>
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	20000038 	.word	0x20000038
 8001a8c:	10624dd3 	.word	0x10624dd3

08001a90 <HAL_TIM_Base_Init>:
 *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Init (TIM_HandleTypeDef *htim)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	/* Check the TIM handle allocation */
	if (htim == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_TIM_Base_Init+0x12>
	{
		return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e041      	b.n	8001b26 <HAL_TIM_Base_Init+0x96>
	assert_param(IS_TIM_INSTANCE(htim->Instance));
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
	assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

	if (htim->State == HAL_TIM_STATE_RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d106      	bne.n	8001abc <HAL_TIM_Base_Init+0x2c>
	{
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_TIM_Base_MspInit(htim);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f002 f8e4 	bl	8003c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Set the Time Base configuration */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3304      	adds	r3, #4
 8001acc:	4619      	mov	r1, r3
 8001ace:	4610      	mov	r0, r2
 8001ad0:	f000 fa70 	bl	8001fb4 <TIM_Base_SetConfig>

	/* Initialize the DMA burst operation state */
	htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	/* Initialize the TIM channels state */
	TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <HAL_TIM_Base_Start_IT>:
 * @brief  Starts the TIM Base generation in interrupt mode.
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT (TIM_HandleTypeDef *htim)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

	/* Check the parameters */
	assert_param(IS_TIM_INSTANCE(htim->Instance));

	/* Check the TIM state */
	if (htim->State != HAL_TIM_STATE_READY)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d001      	beq.n	8001b48 <HAL_TIM_Base_Start_IT+0x18>
	{
		return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e03a      	b.n	8001bbe <HAL_TIM_Base_Start_IT+0x8e>
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Enable the TIM Update interrupt */
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	60da      	str	r2, [r3, #12]

	/* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
	if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a18      	ldr	r2, [pc, #96]	; (8001bc8 <HAL_TIM_Base_Start_IT+0x98>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d00e      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0x58>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b72:	d009      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0x58>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <HAL_TIM_Base_Start_IT+0x9c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d004      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0x58>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a13      	ldr	r2, [pc, #76]	; (8001bd0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d111      	bne.n	8001bac <HAL_TIM_Base_Start_IT+0x7c>
	{
		tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	60fb      	str	r3, [r7, #12]
		if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d010      	beq.n	8001bbc <HAL_TIM_Base_Start_IT+0x8c>
		{
			__HAL_TIM_ENABLE(htim);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 0201 	orr.w	r2, r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]
		if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001baa:	e007      	b.n	8001bbc <HAL_TIM_Base_Start_IT+0x8c>
		}
	}
	else
	{
		__HAL_TIM_ENABLE(htim);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
	}

	/* Return function status */
	return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	40012c00 	.word	0x40012c00
 8001bcc:	40000400 	.word	0x40000400
 8001bd0:	40000800 	.word	0x40000800

08001bd4 <HAL_TIM_IRQHandler>:
 * @brief  This function handles TIM interrupts requests.
 * @param  htim TIM  handle
 * @retval None
 */
void HAL_TIM_IRQHandler (TIM_HandleTypeDef *htim)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	/* Capture compare 1 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d122      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x5c>
	{
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d11b      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x5c>
		{
			{
				__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0202 	mvn.w	r2, #2
 8001c00:	611a      	str	r2, [r3, #16]
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	771a      	strb	r2, [r3, #28]

				/* Input capture event */
				if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_TIM_IRQHandler+0x4a>
				{
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
					HAL_TIM_IC_CaptureCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f9b1 	bl	8001f7e <HAL_TIM_IC_CaptureCallback>
 8001c1c:	e005      	b.n	8001c2a <HAL_TIM_IRQHandler+0x56>
				{
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
					HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f9a4 	bl	8001f6c <HAL_TIM_OC_DelayElapsedCallback>
					HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f9b3 	bl	8001f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
				}
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	771a      	strb	r2, [r3, #28]
			}
		}
	}
	/* Capture compare 2 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d122      	bne.n	8001c84 <HAL_TIM_IRQHandler+0xb0>
	{
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d11b      	bne.n	8001c84 <HAL_TIM_IRQHandler+0xb0>
		{
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f06f 0204 	mvn.w	r2, #4
 8001c54:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2202      	movs	r2, #2
 8001c5a:	771a      	strb	r2, [r3, #28]
			/* Input capture event */
			if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_TIM_IRQHandler+0x9e>
			{
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
				HAL_TIM_IC_CaptureCallback(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f987 	bl	8001f7e <HAL_TIM_IC_CaptureCallback>
 8001c70:	e005      	b.n	8001c7e <HAL_TIM_IRQHandler+0xaa>
			{
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
				HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f97a 	bl	8001f6c <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f989 	bl	8001f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	771a      	strb	r2, [r3, #28]
		}
	}
	/* Capture compare 3 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d122      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x104>
	{
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d11b      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x104>
		{
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f06f 0208 	mvn.w	r2, #8
 8001ca8:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2204      	movs	r2, #4
 8001cae:	771a      	strb	r2, [r3, #28]
			/* Input capture event */
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_TIM_IRQHandler+0xf2>
			{
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
				HAL_TIM_IC_CaptureCallback(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f95d 	bl	8001f7e <HAL_TIM_IC_CaptureCallback>
 8001cc4:	e005      	b.n	8001cd2 <HAL_TIM_IRQHandler+0xfe>
			{
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
				HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f950 	bl	8001f6c <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f95f 	bl	8001f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	771a      	strb	r2, [r3, #28]
		}
	}
	/* Capture compare 4 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	2b10      	cmp	r3, #16
 8001ce4:	d122      	bne.n	8001d2c <HAL_TIM_IRQHandler+0x158>
	{
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	2b10      	cmp	r3, #16
 8001cf2:	d11b      	bne.n	8001d2c <HAL_TIM_IRQHandler+0x158>
		{
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f06f 0210 	mvn.w	r2, #16
 8001cfc:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2208      	movs	r2, #8
 8001d02:	771a      	strb	r2, [r3, #28]
			/* Input capture event */
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_TIM_IRQHandler+0x146>
			{
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
				HAL_TIM_IC_CaptureCallback(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f933 	bl	8001f7e <HAL_TIM_IC_CaptureCallback>
 8001d18:	e005      	b.n	8001d26 <HAL_TIM_IRQHandler+0x152>
			{
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
				HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f926 	bl	8001f6c <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f935 	bl	8001f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	771a      	strb	r2, [r3, #28]
		}
	}
	/* TIM Update event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d10e      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x184>
	{
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d107      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x184>
		{
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0201 	mvn.w	r2, #1
 8001d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
			HAL_TIM_PeriodElapsedCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f001 fee6 	bl	8003b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
	/* TIM Break input event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d62:	2b80      	cmp	r3, #128	; 0x80
 8001d64:	d10e      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x1b0>
	{
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d70:	2b80      	cmp	r3, #128	; 0x80
 8001d72:	d107      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x1b0>
		{
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
			HAL_TIMEx_BreakCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 fa77 	bl	8002272 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
	/* TIM Trigger detection event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8e:	2b40      	cmp	r3, #64	; 0x40
 8001d90:	d10e      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x1dc>
	{
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9c:	2b40      	cmp	r3, #64	; 0x40
 8001d9e:	d107      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x1dc>
		{
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
			HAL_TIM_TriggerCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f8f9 	bl	8001fa2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
	/* TIM commutation event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f003 0320 	and.w	r3, r3, #32
 8001dba:	2b20      	cmp	r3, #32
 8001dbc:	d10e      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x208>
	{
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	2b20      	cmp	r3, #32
 8001dca:	d107      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x208>
		{
			__HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f06f 0220 	mvn.w	r2, #32
 8001dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
			HAL_TIMEx_CommutCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 fa42 	bl	8002260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_TIM_ConfigClockSource>:
 *         contains the clock source information for the TIM peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource (TIM_HandleTypeDef *htim,
	TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
	uint32_t tmpsmcr;

	/* Process Locked */
	__HAL_LOCK(htim);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_TIM_ConfigClockSource+0x18>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e0b3      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x180>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	htim->State = HAL_TIM_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Check the parameters */
	assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

	/* Reset the SMS, TS, ECE, ETPS and ETRF bits */
	tmpsmcr = htim->Instance->SMCR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	60fb      	str	r3, [r7, #12]
	tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e1a:	60fb      	str	r3, [r7, #12]
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e22:	60fb      	str	r3, [r7, #12]
	htim->Instance->SMCR = tmpsmcr;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	609a      	str	r2, [r3, #8]

	switch (sClockSourceConfig->ClockSource)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e34:	d03e      	beq.n	8001eb4 <HAL_TIM_ConfigClockSource+0xd0>
 8001e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e3a:	f200 8087 	bhi.w	8001f4c <HAL_TIM_ConfigClockSource+0x168>
 8001e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e42:	f000 8085 	beq.w	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e4a:	d87f      	bhi.n	8001f4c <HAL_TIM_ConfigClockSource+0x168>
 8001e4c:	2b70      	cmp	r3, #112	; 0x70
 8001e4e:	d01a      	beq.n	8001e86 <HAL_TIM_ConfigClockSource+0xa2>
 8001e50:	2b70      	cmp	r3, #112	; 0x70
 8001e52:	d87b      	bhi.n	8001f4c <HAL_TIM_ConfigClockSource+0x168>
 8001e54:	2b60      	cmp	r3, #96	; 0x60
 8001e56:	d050      	beq.n	8001efa <HAL_TIM_ConfigClockSource+0x116>
 8001e58:	2b60      	cmp	r3, #96	; 0x60
 8001e5a:	d877      	bhi.n	8001f4c <HAL_TIM_ConfigClockSource+0x168>
 8001e5c:	2b50      	cmp	r3, #80	; 0x50
 8001e5e:	d03c      	beq.n	8001eda <HAL_TIM_ConfigClockSource+0xf6>
 8001e60:	2b50      	cmp	r3, #80	; 0x50
 8001e62:	d873      	bhi.n	8001f4c <HAL_TIM_ConfigClockSource+0x168>
 8001e64:	2b40      	cmp	r3, #64	; 0x40
 8001e66:	d058      	beq.n	8001f1a <HAL_TIM_ConfigClockSource+0x136>
 8001e68:	2b40      	cmp	r3, #64	; 0x40
 8001e6a:	d86f      	bhi.n	8001f4c <HAL_TIM_ConfigClockSource+0x168>
 8001e6c:	2b30      	cmp	r3, #48	; 0x30
 8001e6e:	d064      	beq.n	8001f3a <HAL_TIM_ConfigClockSource+0x156>
 8001e70:	2b30      	cmp	r3, #48	; 0x30
 8001e72:	d86b      	bhi.n	8001f4c <HAL_TIM_ConfigClockSource+0x168>
 8001e74:	2b20      	cmp	r3, #32
 8001e76:	d060      	beq.n	8001f3a <HAL_TIM_ConfigClockSource+0x156>
 8001e78:	2b20      	cmp	r3, #32
 8001e7a:	d867      	bhi.n	8001f4c <HAL_TIM_ConfigClockSource+0x168>
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d05c      	beq.n	8001f3a <HAL_TIM_ConfigClockSource+0x156>
 8001e80:	2b10      	cmp	r3, #16
 8001e82:	d05a      	beq.n	8001f3a <HAL_TIM_ConfigClockSource+0x156>
			TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
			break;
		}

		default:
			break;
 8001e84:	e062      	b.n	8001f4c <HAL_TIM_ConfigClockSource+0x168>
			TIM_ETR_SetConfig(htim->Instance,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	6899      	ldr	r1, [r3, #8]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f000 f966 	bl	8002166 <TIM_ETR_SetConfig>
			tmpsmcr = htim->Instance->SMCR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	60fb      	str	r3, [r7, #12]
			tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ea8:	60fb      	str	r3, [r7, #12]
			htim->Instance->SMCR = tmpsmcr;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	609a      	str	r2, [r3, #8]
			break;
 8001eb2:	e04e      	b.n	8001f52 <HAL_TIM_ConfigClockSource+0x16e>
			TIM_ETR_SetConfig(htim->Instance,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	6899      	ldr	r1, [r3, #8]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f000 f94f 	bl	8002166 <TIM_ETR_SetConfig>
			htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ed6:	609a      	str	r2, [r3, #8]
			break;
 8001ed8:	e03b      	b.n	8001f52 <HAL_TIM_ConfigClockSource+0x16e>
			TIM_TI1_ConfigInputStage(htim->Instance,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6859      	ldr	r1, [r3, #4]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	f000 f8c6 	bl	8002078 <TIM_TI1_ConfigInputStage>
			TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2150      	movs	r1, #80	; 0x50
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 f91d 	bl	8002132 <TIM_ITRx_SetConfig>
			break;
 8001ef8:	e02b      	b.n	8001f52 <HAL_TIM_ConfigClockSource+0x16e>
			TIM_TI2_ConfigInputStage(htim->Instance,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6859      	ldr	r1, [r3, #4]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	461a      	mov	r2, r3
 8001f08:	f000 f8e4 	bl	80020d4 <TIM_TI2_ConfigInputStage>
			TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2160      	movs	r1, #96	; 0x60
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f90d 	bl	8002132 <TIM_ITRx_SetConfig>
			break;
 8001f18:	e01b      	b.n	8001f52 <HAL_TIM_ConfigClockSource+0x16e>
			TIM_TI1_ConfigInputStage(htim->Instance,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	6859      	ldr	r1, [r3, #4]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	461a      	mov	r2, r3
 8001f28:	f000 f8a6 	bl	8002078 <TIM_TI1_ConfigInputStage>
			TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2140      	movs	r1, #64	; 0x40
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 f8fd 	bl	8002132 <TIM_ITRx_SetConfig>
			break;
 8001f38:	e00b      	b.n	8001f52 <HAL_TIM_ConfigClockSource+0x16e>
			TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4619      	mov	r1, r3
 8001f44:	4610      	mov	r0, r2
 8001f46:	f000 f8f4 	bl	8002132 <TIM_ITRx_SetConfig>
			break;
 8001f4a:	e002      	b.n	8001f52 <HAL_TIM_ConfigClockSource+0x16e>
			break;
 8001f4c:	bf00      	nop
 8001f4e:	e000      	b.n	8001f52 <HAL_TIM_ConfigClockSource+0x16e>
			break;
 8001f50:	bf00      	nop
	}
	htim->State = HAL_TIM_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	__HAL_UNLOCK(htim);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_TIM_OC_DelayElapsedCallback>:
 * @brief  Output Compare callback in non-blocking mode
 * @param  htim TIM OC handle
 * @retval None
 */
__weak void HAL_TIM_OC_DelayElapsedCallback (TIM_HandleTypeDef *htim)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
	 */
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr

08001f7e <HAL_TIM_IC_CaptureCallback>:
 * @brief  Input Capture callback in non-blocking mode
 * @param  htim TIM IC handle
 * @retval None
 */
__weak void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef *htim)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_IC_CaptureCallback could be implemented in the user file
	 */
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <HAL_TIM_PWM_PulseFinishedCallback>:
 * @brief  PWM Pulse finished callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIM_PWM_PulseFinishedCallback (TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
	 */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_TIM_TriggerCallback>:
 * @brief  Hall Trigger detection callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIM_TriggerCallback (TIM_HandleTypeDef *htim)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_TriggerCallback could be implemented in the user file
	 */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <TIM_Base_SetConfig>:
 * @param  TIMx TIM peripheral
 * @param  Structure TIM Base configuration structure
 * @retval None
 */
void TIM_Base_SetConfig (TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
	uint32_t tmpcr1;
	tmpcr1 = TIMx->CR1;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	60fb      	str	r3, [r7, #12]

	/* Set TIM Time Base Unit parameters ---------------------------------------*/
	if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a29      	ldr	r2, [pc, #164]	; (800206c <TIM_Base_SetConfig+0xb8>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d00b      	beq.n	8001fe4 <TIM_Base_SetConfig+0x30>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd2:	d007      	beq.n	8001fe4 <TIM_Base_SetConfig+0x30>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a26      	ldr	r2, [pc, #152]	; (8002070 <TIM_Base_SetConfig+0xbc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d003      	beq.n	8001fe4 <TIM_Base_SetConfig+0x30>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a25      	ldr	r2, [pc, #148]	; (8002074 <TIM_Base_SetConfig+0xc0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d108      	bne.n	8001ff6 <TIM_Base_SetConfig+0x42>
	{
		/* Select the Counter Mode */
		tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fea:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= Structure->CounterMode;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
	}

	if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a1c      	ldr	r2, [pc, #112]	; (800206c <TIM_Base_SetConfig+0xb8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d00b      	beq.n	8002016 <TIM_Base_SetConfig+0x62>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002004:	d007      	beq.n	8002016 <TIM_Base_SetConfig+0x62>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a19      	ldr	r2, [pc, #100]	; (8002070 <TIM_Base_SetConfig+0xbc>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d003      	beq.n	8002016 <TIM_Base_SetConfig+0x62>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a18      	ldr	r2, [pc, #96]	; (8002074 <TIM_Base_SetConfig+0xc0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d108      	bne.n	8002028 <TIM_Base_SetConfig+0x74>
	{
		/* Set the clock division */
		tmpcr1 &= ~TIM_CR1_CKD;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800201c:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= (uint32_t) Structure->ClockDivision;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4313      	orrs	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]
	}

	/* Set the auto-reload preload */
	MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	4313      	orrs	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]

	TIMx->CR1 = tmpcr1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	601a      	str	r2, [r3, #0]

	/* Set the Autoreload value */
	TIMx->ARR = (uint32_t) Structure->Period;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Set the Prescaler value */
	TIMx->PSC = Structure->Prescaler;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	629a      	str	r2, [r3, #40]	; 0x28

	if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a07      	ldr	r2, [pc, #28]	; (800206c <TIM_Base_SetConfig+0xb8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d103      	bne.n	800205c <TIM_Base_SetConfig+0xa8>
	{
		/* Set the Repetition Counter value */
		TIMx->RCR = Structure->RepetitionCounter;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	631a      	str	r2, [r3, #48]	; 0x30
	}

	/* Generate an update event to reload the Prescaler
	 and the repetition counter (only for advanced timer) value immediately */
	TIMx->EGR = TIM_EGR_UG;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	615a      	str	r2, [r3, #20]
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	40012c00 	.word	0x40012c00
 8002070:	40000400 	.word	0x40000400
 8002074:	40000800 	.word	0x40000800

08002078 <TIM_TI1_ConfigInputStage>:
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI1_ConfigInputStage (TIM_TypeDef *TIMx,
	uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002078:	b480      	push	{r7}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
	uint32_t tmpccmr1;
	uint32_t tmpccer;

	/* Disable the Channel 1: Reset the CC1E Bit */
	tmpccer = TIMx->CCER;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	617b      	str	r3, [r7, #20]
	TIMx->CCER &= ~TIM_CCER_CC1E;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	f023 0201 	bic.w	r2, r3, #1
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	621a      	str	r2, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	613b      	str	r3, [r7, #16]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020a2:	613b      	str	r3, [r7, #16]
	tmpccmr1 |= (TIM_ICFilter << 4U);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]

	/* Select the Polarity and set the CC1E Bit */
	tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f023 030a 	bic.w	r3, r3, #10
 80020b4:	617b      	str	r3, [r7, #20]
	tmpccer |= TIM_ICPolarity;
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	621a      	str	r2, [r3, #32]
}
 80020ca:	bf00      	nop
 80020cc:	371c      	adds	r7, #28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <TIM_TI2_ConfigInputStage>:
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI2_ConfigInputStage (TIM_TypeDef *TIMx,
	uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
	uint32_t tmpccmr1;
	uint32_t tmpccer;

	/* Disable the Channel 2: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC2E;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	f023 0210 	bic.w	r2, r3, #16
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	621a      	str	r2, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	617b      	str	r3, [r7, #20]
	tmpccer = TIMx->CCER;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	613b      	str	r3, [r7, #16]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020fe:	617b      	str	r3, [r7, #20]
	tmpccmr1 |= (TIM_ICFilter << 12U);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	031b      	lsls	r3, r3, #12
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	4313      	orrs	r3, r2
 8002108:	617b      	str	r3, [r7, #20]

	/* Select the Polarity and set the CC2E Bit */
	tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002110:	613b      	str	r3, [r7, #16]
	tmpccer |= (TIM_ICPolarity << 4U);
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	621a      	str	r2, [r3, #32]
}
 8002128:	bf00      	nop
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <TIM_ITRx_SetConfig>:
 *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
 *            @arg TIM_TS_ETRF: External Trigger input
 * @retval None
 */
static void TIM_ITRx_SetConfig (TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002132:	b480      	push	{r7}
 8002134:	b085      	sub	sp, #20
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
	uint32_t tmpsmcr;

	/* Get the TIMx SMCR register value */
	tmpsmcr = TIMx->SMCR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	60fb      	str	r3, [r7, #12]
	/* Reset the TS Bits */
	tmpsmcr &= ~TIM_SMCR_TS;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002148:	60fb      	str	r3, [r7, #12]
	/* Set the Input Trigger source and the slave mode*/
	tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	f043 0307 	orr.w	r3, r3, #7
 8002154:	60fb      	str	r3, [r7, #12]
	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	609a      	str	r2, [r3, #8]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <TIM_ETR_SetConfig>:
 *          This parameter must be a value between 0x00 and 0x0F
 * @retval None
 */
void TIM_ETR_SetConfig (TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
	uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002166:	b480      	push	{r7}
 8002168:	b087      	sub	sp, #28
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	603b      	str	r3, [r7, #0]
	uint32_t tmpsmcr;

	tmpsmcr = TIMx->SMCR;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	617b      	str	r3, [r7, #20]

	/* Reset the ETR Bits */
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002180:	617b      	str	r3, [r7, #20]

	/* Set the Prescaler, the Filter value and the Polarity */
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
			| (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	021a      	lsls	r2, r3, #8
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	431a      	orrs	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	4313      	orrs	r3, r2
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	4313      	orrs	r3, r2
 8002192:	617b      	str	r3, [r7, #20]

	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	609a      	str	r2, [r3, #8]
}
 800219a:	bf00      	nop
 800219c:	371c      	adds	r7, #28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e046      	b.n	800224a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a16      	ldr	r2, [pc, #88]	; (8002254 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d00e      	beq.n	800221e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002208:	d009      	beq.n	800221e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d004      	beq.n	800221e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a10      	ldr	r2, [pc, #64]	; (800225c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d10c      	bne.n	8002238 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002224:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	4313      	orrs	r3, r2
 800222e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	40012c00 	.word	0x40012c00
 8002258:	40000400 	.word	0x40000400
 800225c:	40000800 	.word	0x40000800

08002260 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr

08002272 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <adder_init>:
static uint8_t num_values[] = { 1, 2, 3, 0, 4, 5, 6, 0, 7, 8, 9, 0 };

/* Intialize the adder by assign the keypad button values and pressing values*/
void adder_init (const uint8_t *key_state_arr,
	const button_value_map_t *button_values_ext)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
	key_state_adder = key_state_arr;
 800228e:	4a05      	ldr	r2, [pc, #20]	; (80022a4 <adder_init+0x20>)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6013      	str	r3, [r2, #0]
	button_values = button_values_ext;
 8002294:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <adder_init+0x24>)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6013      	str	r3, [r2, #0]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr
 80022a4:	200000c0 	.word	0x200000c0
 80022a8:	200000bc 	.word	0x200000bc

080022ac <adder>:

/* Deal with user to getting arguments while performing the addition.*/
void adder ()
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af02      	add	r7, sp, #8

	static uint8_t stage = 1;
	if (stage == 1)
 80022b2:	4b4c      	ldr	r3, [pc, #304]	; (80023e4 <adder+0x138>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d109      	bne.n	80022ce <adder+0x22>
	{
		/* Enter to the Adder mode.
		 * Requesting to enter the first input from user.
		 */
		stage = request_number_ui(2, 1, &num1);
 80022ba:	4a4b      	ldr	r2, [pc, #300]	; (80023e8 <adder+0x13c>)
 80022bc:	2101      	movs	r1, #1
 80022be:	2002      	movs	r0, #2
 80022c0:	f000 f8a4 	bl	800240c <request_number_ui>
 80022c4:	4603      	mov	r3, r0
 80022c6:	461a      	mov	r2, r3
 80022c8:	4b46      	ldr	r3, [pc, #280]	; (80023e4 <adder+0x138>)
 80022ca:	701a      	strb	r2, [r3, #0]
			current_mode = MAIN_MENU;
			stage = 1;
		}
	}

}
 80022cc:	e085      	b.n	80023da <adder+0x12e>
	else if (stage == 2)
 80022ce:	4b45      	ldr	r3, [pc, #276]	; (80023e4 <adder+0x138>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d10a      	bne.n	80022ec <adder+0x40>
		stage = checking_number_keypad(2, 3, 1, &num1);
 80022d6:	4b44      	ldr	r3, [pc, #272]	; (80023e8 <adder+0x13c>)
 80022d8:	2201      	movs	r2, #1
 80022da:	2103      	movs	r1, #3
 80022dc:	2002      	movs	r0, #2
 80022de:	f000 f8df 	bl	80024a0 <checking_number_keypad>
 80022e2:	4603      	mov	r3, r0
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b3f      	ldr	r3, [pc, #252]	; (80023e4 <adder+0x138>)
 80022e8:	701a      	strb	r2, [r3, #0]
}
 80022ea:	e076      	b.n	80023da <adder+0x12e>
	else if (stage == 3)
 80022ec:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <adder+0x138>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d109      	bne.n	8002308 <adder+0x5c>
		stage = request_number_ui(4, 2, &num2);
 80022f4:	4a3d      	ldr	r2, [pc, #244]	; (80023ec <adder+0x140>)
 80022f6:	2102      	movs	r1, #2
 80022f8:	2004      	movs	r0, #4
 80022fa:	f000 f887 	bl	800240c <request_number_ui>
 80022fe:	4603      	mov	r3, r0
 8002300:	461a      	mov	r2, r3
 8002302:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <adder+0x138>)
 8002304:	701a      	strb	r2, [r3, #0]
}
 8002306:	e068      	b.n	80023da <adder+0x12e>
	else if (stage == 4)
 8002308:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <adder+0x138>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b04      	cmp	r3, #4
 800230e:	d10a      	bne.n	8002326 <adder+0x7a>
		stage = checking_number_keypad(4, 5, 3, &num2);
 8002310:	4b36      	ldr	r3, [pc, #216]	; (80023ec <adder+0x140>)
 8002312:	2203      	movs	r2, #3
 8002314:	2105      	movs	r1, #5
 8002316:	2004      	movs	r0, #4
 8002318:	f000 f8c2 	bl	80024a0 <checking_number_keypad>
 800231c:	4603      	mov	r3, r0
 800231e:	461a      	mov	r2, r3
 8002320:	4b30      	ldr	r3, [pc, #192]	; (80023e4 <adder+0x138>)
 8002322:	701a      	strb	r2, [r3, #0]
}
 8002324:	e059      	b.n	80023da <adder+0x12e>
	else if (stage == 5)
 8002326:	4b2f      	ldr	r3, [pc, #188]	; (80023e4 <adder+0x138>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b05      	cmp	r3, #5
 800232c:	d131      	bne.n	8002392 <adder+0xe6>
		sprintf(summation, "Ans = %d", (num1 + num2));
 800232e:	4b2e      	ldr	r3, [pc, #184]	; (80023e8 <adder+0x13c>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	4b2d      	ldr	r3, [pc, #180]	; (80023ec <adder+0x140>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	441a      	add	r2, r3
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	492c      	ldr	r1, [pc, #176]	; (80023f0 <adder+0x144>)
 800233e:	4618      	mov	r0, r3
 8002340:	f001 fd8a 	bl	8003e58 <siprintf>
		SSD1306_Clear();
 8002344:	f001 f8e7 	bl	8003516 <SSD1306_Clear>
		print_inline(10, 10, summation, &Font_7x10, 1);
 8002348:	1d3a      	adds	r2, r7, #4
 800234a:	2301      	movs	r3, #1
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <adder+0x148>)
 8002350:	210a      	movs	r1, #10
 8002352:	200a      	movs	r0, #10
 8002354:	f001 f962 	bl	800361c <print_inline>
		print_inline(10, 30, "A - Adder", &Font_7x10, 1);
 8002358:	2301      	movs	r3, #1
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <adder+0x148>)
 800235e:	4a26      	ldr	r2, [pc, #152]	; (80023f8 <adder+0x14c>)
 8002360:	211e      	movs	r1, #30
 8002362:	200a      	movs	r0, #10
 8002364:	f001 f95a 	bl	800361c <print_inline>
		print_inline(10, 50, "D - Main menu", &Font_7x10, 1);
 8002368:	2301      	movs	r3, #1
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <adder+0x148>)
 800236e:	4a23      	ldr	r2, [pc, #140]	; (80023fc <adder+0x150>)
 8002370:	2132      	movs	r1, #50	; 0x32
 8002372:	200a      	movs	r0, #10
 8002374:	f001 f952 	bl	800361c <print_inline>
		SSD1306_UpdateScreen();
 8002378:	f000 ff6e 	bl	8003258 <SSD1306_UpdateScreen>
		num1 = num2 = 0;
 800237c:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <adder+0x140>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <adder+0x140>)
 8002384:	781a      	ldrb	r2, [r3, #0]
 8002386:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <adder+0x13c>)
 8002388:	701a      	strb	r2, [r3, #0]
		stage = 6;
 800238a:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <adder+0x138>)
 800238c:	2206      	movs	r2, #6
 800238e:	701a      	strb	r2, [r3, #0]
}
 8002390:	e023      	b.n	80023da <adder+0x12e>
	else if (stage == 6)
 8002392:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <adder+0x138>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b06      	cmp	r3, #6
 8002398:	d11f      	bne.n	80023da <adder+0x12e>
		if (key_state_adder[button_values->A] == KEY_PRESSED)
 800239a:	4b19      	ldr	r3, [pc, #100]	; (8002400 <adder+0x154>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a19      	ldr	r2, [pc, #100]	; (8002404 <adder+0x158>)
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	7b12      	ldrb	r2, [r2, #12]
 80023a4:	4413      	add	r3, r2
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d105      	bne.n	80023b8 <adder+0x10c>
			keypad_clear();
 80023ac:	f000 fdee 	bl	8002f8c <keypad_clear>
			stage = 1; // Direct to adder mode
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <adder+0x138>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	701a      	strb	r2, [r3, #0]
}
 80023b6:	e010      	b.n	80023da <adder+0x12e>
		else if (key_state_adder[button_values->D] == KEY_PRESSED)
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <adder+0x154>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a11      	ldr	r2, [pc, #68]	; (8002404 <adder+0x158>)
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	7bd2      	ldrb	r2, [r2, #15]
 80023c2:	4413      	add	r3, r2
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d107      	bne.n	80023da <adder+0x12e>
			keypad_clear();
 80023ca:	f000 fddf 	bl	8002f8c <keypad_clear>
			current_mode = MAIN_MENU;
 80023ce:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <adder+0x15c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]
			stage = 1;
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <adder+0x138>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	701a      	strb	r2, [r3, #0]
}
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000014 	.word	0x20000014
 80023e8:	2000053e 	.word	0x2000053e
 80023ec:	2000053d 	.word	0x2000053d
 80023f0:	080046f4 	.word	0x080046f4
 80023f4:	2000002c 	.word	0x2000002c
 80023f8:	08004700 	.word	0x08004700
 80023fc:	0800470c 	.word	0x0800470c
 8002400:	200000c0 	.word	0x200000c0
 8002404:	200000bc 	.word	0x200000bc
 8002408:	2000053c 	.word	0x2000053c

0800240c <request_number_ui>:

/* Request and showing the inputs of addition.*/
static uint8_t request_number_ui (const uint8_t next_stage,
	const uint8_t arg_no, const uint8_t *num)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af02      	add	r7, sp, #8
 8002412:	4603      	mov	r3, r0
 8002414:	603a      	str	r2, [r7, #0]
 8002416:	71fb      	strb	r3, [r7, #7]
 8002418:	460b      	mov	r3, r1
 800241a:	71bb      	strb	r3, [r7, #6]
	uint8_t str[15];

	if (*num > 0 && *num < 10)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00c      	beq.n	800243e <request_number_ui+0x32>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b09      	cmp	r3, #9
 800242a:	d808      	bhi.n	800243e <request_number_ui+0x32>
	{
		sprintf(str, "NUM%d = %d", arg_no, *num);
 800242c:	79ba      	ldrb	r2, [r7, #6]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	f107 0008 	add.w	r0, r7, #8
 8002436:	4915      	ldr	r1, [pc, #84]	; (800248c <request_number_ui+0x80>)
 8002438:	f001 fd0e 	bl	8003e58 <siprintf>
	{
 800243c:	e006      	b.n	800244c <request_number_ui+0x40>
	}
	else
	{
		sprintf(str, "NUM%d = ", arg_no);
 800243e:	79ba      	ldrb	r2, [r7, #6]
 8002440:	f107 0308 	add.w	r3, r7, #8
 8002444:	4912      	ldr	r1, [pc, #72]	; (8002490 <request_number_ui+0x84>)
 8002446:	4618      	mov	r0, r3
 8002448:	f001 fd06 	bl	8003e58 <siprintf>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800244c:	2200      	movs	r2, #0
 800244e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002452:	4810      	ldr	r0, [pc, #64]	; (8002494 <request_number_ui+0x88>)
 8002454:	f7fe f985 	bl	8000762 <HAL_GPIO_WritePin>
	SSD1306_Clear();
 8002458:	f001 f85d 	bl	8003516 <SSD1306_Clear>
	print_inline(10, 10, str, &Font_7x10, 1);
 800245c:	f107 0208 	add.w	r2, r7, #8
 8002460:	2301      	movs	r3, #1
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <request_number_ui+0x8c>)
 8002466:	210a      	movs	r1, #10
 8002468:	200a      	movs	r0, #10
 800246a:	f001 f8d7 	bl	800361c <print_inline>
	print_inline(10, 30, "D: Ok", &Font_7x10, 1);
 800246e:	2301      	movs	r3, #1
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <request_number_ui+0x8c>)
 8002474:	4a09      	ldr	r2, [pc, #36]	; (800249c <request_number_ui+0x90>)
 8002476:	211e      	movs	r1, #30
 8002478:	200a      	movs	r0, #10
 800247a:	f001 f8cf 	bl	800361c <print_inline>
	SSD1306_UpdateScreen();
 800247e:	f000 feeb 	bl	8003258 <SSD1306_UpdateScreen>
	return next_stage;
 8002482:	79fb      	ldrb	r3, [r7, #7]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	0800471c 	.word	0x0800471c
 8002490:	08004728 	.word	0x08004728
 8002494:	40010800 	.word	0x40010800
 8002498:	2000002c 	.word	0x2000002c
 800249c:	08004734 	.word	0x08004734

080024a0 <checking_number_keypad>:

/* Checking the number pad for getting adding inputs.*/
static uint8_t checking_number_keypad (const uint8_t current_stage,
	const uint8_t next_stage, const uint8_t previous_stage, uint8_t *num)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	4603      	mov	r3, r0
 80024aa:	71fb      	strb	r3, [r7, #7]
 80024ac:	460b      	mov	r3, r1
 80024ae:	71bb      	strb	r3, [r7, #6]
 80024b0:	4613      	mov	r3, r2
 80024b2:	717b      	strb	r3, [r7, #5]
	for (uint8_t i = 0; i < (KEYS - 4); i++)
 80024b4:	2300      	movs	r3, #0
 80024b6:	73fb      	strb	r3, [r7, #15]
 80024b8:	e01f      	b.n	80024fa <checking_number_keypad+0x5a>
	{
		/* Filterout english characters and symbols*/

		if ((i + 1) % 4 == 0)
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	3301      	adds	r3, #1
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d015      	beq.n	80024f2 <checking_number_keypad+0x52>
			continue;
		}

		/* Getting integer from buttom index*/

		if (key_state_adder[i] == KEY_PRESSED)
 80024c6:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <checking_number_keypad+0x90>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	4413      	add	r3, r2
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d10f      	bne.n	80024f4 <checking_number_keypad+0x54>
		{
			keypad_clear();
 80024d4:	f000 fd5a 	bl	8002f8c <keypad_clear>
			*num = num_values[i];
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	4a16      	ldr	r2, [pc, #88]	; (8002534 <checking_number_keypad+0x94>)
 80024dc:	5cd2      	ldrb	r2, [r2, r3]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1); //turn on LED
 80024e2:	2201      	movs	r2, #1
 80024e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024e8:	4813      	ldr	r0, [pc, #76]	; (8002538 <checking_number_keypad+0x98>)
 80024ea:	f7fe f93a 	bl	8000762 <HAL_GPIO_WritePin>
			return previous_stage;
 80024ee:	797b      	ldrb	r3, [r7, #5]
 80024f0:	e01a      	b.n	8002528 <checking_number_keypad+0x88>
			continue;
 80024f2:	bf00      	nop
	for (uint8_t i = 0; i < (KEYS - 4); i++)
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	3301      	adds	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	2b0b      	cmp	r3, #11
 80024fe:	d9dc      	bls.n	80024ba <checking_number_keypad+0x1a>
		}
	}

	/* Exit from num1 enter to second number request(num2)*/

	if (key_state_adder[button_values->D] == KEY_PRESSED)
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <checking_number_keypad+0x90>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a0d      	ldr	r2, [pc, #52]	; (800253c <checking_number_keypad+0x9c>)
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	7bd2      	ldrb	r2, [r2, #15]
 800250a:	4413      	add	r3, r2
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d109      	bne.n	8002526 <checking_number_keypad+0x86>
	{
		keypad_clear();
 8002512:	f000 fd3b 	bl	8002f8c <keypad_clear>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0); //turn off LED
 8002516:	2200      	movs	r2, #0
 8002518:	f44f 7180 	mov.w	r1, #256	; 0x100
 800251c:	4806      	ldr	r0, [pc, #24]	; (8002538 <checking_number_keypad+0x98>)
 800251e:	f7fe f920 	bl	8000762 <HAL_GPIO_WritePin>

		return next_stage;
 8002522:	79bb      	ldrb	r3, [r7, #6]
 8002524:	e000      	b.n	8002528 <checking_number_keypad+0x88>
	}

	return current_stage;
 8002526:	79fb      	ldrb	r3, [r7, #7]

}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	200000c0 	.word	0x200000c0
 8002534:	20000008 	.word	0x20000008
 8002538:	40010800 	.word	0x40010800
 800253c:	200000bc 	.word	0x200000bc

08002540 <counter_init>:


/* Intialize the counter by assign the keypad button values and pressing values*/
void counter_init (const uint8_t *key_state_arr,
	const button_value_map_t *button_values_ext)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
	key_state_counter = key_state_arr;
 800254a:	4a05      	ldr	r2, [pc, #20]	; (8002560 <counter_init+0x20>)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6013      	str	r3, [r2, #0]
	button_values = button_values_ext;
 8002550:	4a04      	ldr	r2, [pc, #16]	; (8002564 <counter_init+0x24>)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	6013      	str	r3, [r2, #0]
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	200000c8 	.word	0x200000c8
 8002564:	200000c4 	.word	0x200000c4

08002568 <counter>:

/* Deal with user to getting arguments while performing the counting.*/
void counter ()
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b088      	sub	sp, #32
 800256c:	af02      	add	r7, sp, #8
	static uint8_t stage = 1;
	if (stage == 1)
 800256e:	4b43      	ldr	r3, [pc, #268]	; (800267c <counter+0x114>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d129      	bne.n	80025ca <counter+0x62>
	{
		/* Enter to the counter mode.
		 * update screen according to no. of counts of button presses.
		 */
		SSD1306_Clear();
 8002576:	f000 ffce 	bl	8003516 <SSD1306_Clear>
		char button_presses[20];
		sprintf(button_presses, "No. presses = %d", button_presses_count);
 800257a:	4b41      	ldr	r3, [pc, #260]	; (8002680 <counter+0x118>)
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	463b      	mov	r3, r7
 8002582:	4940      	ldr	r1, [pc, #256]	; (8002684 <counter+0x11c>)
 8002584:	4618      	mov	r0, r3
 8002586:	f001 fc67 	bl	8003e58 <siprintf>
		print_inline(10, 10, button_presses, &Font_7x10, 1);
 800258a:	463a      	mov	r2, r7
 800258c:	2301      	movs	r3, #1
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	4b3d      	ldr	r3, [pc, #244]	; (8002688 <counter+0x120>)
 8002592:	210a      	movs	r1, #10
 8002594:	200a      	movs	r0, #10
 8002596:	f001 f841 	bl	800361c <print_inline>
		print_inline(10, 30, "B - Reset", &Font_7x10, 1);
 800259a:	2301      	movs	r3, #1
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	4b3a      	ldr	r3, [pc, #232]	; (8002688 <counter+0x120>)
 80025a0:	4a3a      	ldr	r2, [pc, #232]	; (800268c <counter+0x124>)
 80025a2:	211e      	movs	r1, #30
 80025a4:	200a      	movs	r0, #10
 80025a6:	f001 f839 	bl	800361c <print_inline>
		print_inline(10, 50, "D - Main menu", &Font_7x10, 1);
 80025aa:	2301      	movs	r3, #1
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	4b36      	ldr	r3, [pc, #216]	; (8002688 <counter+0x120>)
 80025b0:	4a37      	ldr	r2, [pc, #220]	; (8002690 <counter+0x128>)
 80025b2:	2132      	movs	r1, #50	; 0x32
 80025b4:	200a      	movs	r0, #10
 80025b6:	f001 f831 	bl	800361c <print_inline>
		SSD1306_UpdateScreen();
 80025ba:	f000 fe4d 	bl	8003258 <SSD1306_UpdateScreen>
		keypad_clear();
 80025be:	f000 fce5 	bl	8002f8c <keypad_clear>
		stage = 2;
 80025c2:	4b2e      	ldr	r3, [pc, #184]	; (800267c <counter+0x114>)
 80025c4:	2202      	movs	r2, #2
 80025c6:	701a      	strb	r2, [r3, #0]
					break;
				}
			}
		}
	}
}
 80025c8:	e054      	b.n	8002674 <counter+0x10c>
	else if (stage == 2)
 80025ca:	4b2c      	ldr	r3, [pc, #176]	; (800267c <counter+0x114>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d150      	bne.n	8002674 <counter+0x10c>
		if (key_state_counter[button_values->B] == 1)
 80025d2:	4b30      	ldr	r3, [pc, #192]	; (8002694 <counter+0x12c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a30      	ldr	r2, [pc, #192]	; (8002698 <counter+0x130>)
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	7b52      	ldrb	r2, [r2, #13]
 80025dc:	4413      	add	r3, r2
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d106      	bne.n	80025f2 <counter+0x8a>
			button_presses_count = 0;
 80025e4:	4b26      	ldr	r3, [pc, #152]	; (8002680 <counter+0x118>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	801a      	strh	r2, [r3, #0]
			stage = 1;
 80025ea:	4b24      	ldr	r3, [pc, #144]	; (800267c <counter+0x114>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
}
 80025f0:	e040      	b.n	8002674 <counter+0x10c>
		else if (key_state_counter[button_values->D] == 1)
 80025f2:	4b28      	ldr	r3, [pc, #160]	; (8002694 <counter+0x12c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a28      	ldr	r2, [pc, #160]	; (8002698 <counter+0x130>)
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	7bd2      	ldrb	r2, [r2, #15]
 80025fc:	4413      	add	r3, r2
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d109      	bne.n	8002618 <counter+0xb0>
			button_presses_count = 0;
 8002604:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <counter+0x118>)
 8002606:	2200      	movs	r2, #0
 8002608:	801a      	strh	r2, [r3, #0]
			current_mode = MAIN_MENU;
 800260a:	4b24      	ldr	r3, [pc, #144]	; (800269c <counter+0x134>)
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
			stage = 1;
 8002610:	4b1a      	ldr	r3, [pc, #104]	; (800267c <counter+0x114>)
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]
}
 8002616:	e02d      	b.n	8002674 <counter+0x10c>
			for (uint8_t i = 0; i < 16; i++)
 8002618:	2300      	movs	r3, #0
 800261a:	75fb      	strb	r3, [r7, #23]
 800261c:	e027      	b.n	800266e <counter+0x106>
				if ((key_state_counter[button_values->B] == 1)
 800261e:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <counter+0x12c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <counter+0x130>)
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	7b52      	ldrb	r2, [r2, #13]
 8002628:	4413      	add	r3, r2
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d01a      	beq.n	8002666 <counter+0xfe>
						|| (key_state_counter[button_values->D] == 1)) // Neglect B,D
 8002630:	4b18      	ldr	r3, [pc, #96]	; (8002694 <counter+0x12c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a18      	ldr	r2, [pc, #96]	; (8002698 <counter+0x130>)
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	7bd2      	ldrb	r2, [r2, #15]
 800263a:	4413      	add	r3, r2
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d011      	beq.n	8002666 <counter+0xfe>
				if (key_state_counter[i] == 1)
 8002642:	4b14      	ldr	r3, [pc, #80]	; (8002694 <counter+0x12c>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	7dfb      	ldrb	r3, [r7, #23]
 8002648:	4413      	add	r3, r2
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d10b      	bne.n	8002668 <counter+0x100>
					button_presses_count++;
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <counter+0x118>)
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	3301      	adds	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	4b09      	ldr	r3, [pc, #36]	; (8002680 <counter+0x118>)
 800265a:	801a      	strh	r2, [r3, #0]
					stage = 1;
 800265c:	4b07      	ldr	r3, [pc, #28]	; (800267c <counter+0x114>)
 800265e:	2201      	movs	r2, #1
 8002660:	701a      	strb	r2, [r3, #0]
					break;
 8002662:	bf00      	nop
}
 8002664:	e006      	b.n	8002674 <counter+0x10c>
					continue;
 8002666:	bf00      	nop
			for (uint8_t i = 0; i < 16; i++)
 8002668:	7dfb      	ldrb	r3, [r7, #23]
 800266a:	3301      	adds	r3, #1
 800266c:	75fb      	strb	r3, [r7, #23]
 800266e:	7dfb      	ldrb	r3, [r7, #23]
 8002670:	2b0f      	cmp	r3, #15
 8002672:	d9d4      	bls.n	800261e <counter+0xb6>
}
 8002674:	bf00      	nop
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000015 	.word	0x20000015
 8002680:	20000540 	.word	0x20000540
 8002684:	0800473c 	.word	0x0800473c
 8002688:	2000002c 	.word	0x2000002c
 800268c:	08004750 	.word	0x08004750
 8002690:	0800475c 	.word	0x0800475c
 8002694:	200000c8 	.word	0x200000c8
 8002698:	200000c4 	.word	0x200000c4
 800269c:	2000053c 	.word	0x2000053c

080026a0 <keypad_init>:
				7, .C = 11, .D = 15 };

void keypad_init (const uint8_t *au8_KeyStates,
	const keypad_cfgtype_t keypad_cfgparam_ext,
	button_value_map_t *button_values_ext)
{
 80026a0:	b084      	sub	sp, #16
 80026a2:	b4b0      	push	{r4, r5, r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	f107 001c 	add.w	r0, r7, #28
 80026ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
     /* If there is no global variable use to hold then arrise an error, else
      * continue procedure by assigning the variables.
      */
	if (au8_KeyStates != NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d018      	beq.n	80026ea <keypad_init+0x4a>
	{
		keypad_info.key_states = au8_KeyStates;
 80026b8:	4a0f      	ldr	r2, [pc, #60]	; (80026f8 <keypad_init+0x58>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6013      	str	r3, [r2, #0]
		keypad_cfgparam = keypad_cfgparam_ext;
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <keypad_init+0x5c>)
 80026c0:	461d      	mov	r5, r3
 80026c2:	f107 041c 	add.w	r4, r7, #28
 80026c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026d2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		*button_values_ext = button_values;
 80026d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d8:	4a09      	ldr	r2, [pc, #36]	; (8002700 <keypad_init+0x60>)
 80026da:	461c      	mov	r4, r3
 80026dc:	4615      	mov	r5, r2
 80026de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026e0:	6020      	str	r0, [r4, #0]
 80026e2:	6061      	str	r1, [r4, #4]
 80026e4:	60a2      	str	r2, [r4, #8]
 80026e6:	60e3      	str	r3, [r4, #12]
 80026e8:	e000      	b.n	80026ec <keypad_init+0x4c>
	}
	else
	{
		/* Potentially Should Return An Error */
		return;
 80026ea:	bf00      	nop
	}

}
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bcb0      	pop	{r4, r5, r7}
 80026f2:	b004      	add	sp, #16
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	200000cc 	.word	0x200000cc
 80026fc:	200000d0 	.word	0x200000d0
 8002700:	20000018 	.word	0x20000018

08002704 <keypad_scan>:

void keypad_scan ()
{
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
	uint8_t au8_ReadState[ROWS] =
 800270a:	2300      	movs	r3, #0
 800270c:	603b      	str	r3, [r7, #0]
	{ 0 };
	uint8_t au8_ReadSt;
	uint8_t i = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	71fb      	strb	r3, [r7, #7]

	/* Steady State: Output The Pattern [1 1 1 1] To The COL Pins */

	for (i = 0; i < COLS; i++)
 8002712:	2300      	movs	r3, #0
 8002714:	71fb      	strb	r3, [r7, #7]
 8002716:	e010      	b.n	800273a <keypad_scan+0x36>
	{
		HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[i],
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	4a8d      	ldr	r2, [pc, #564]	; (8002950 <keypad_scan+0x24c>)
 800271c:	3306      	adds	r3, #6
 800271e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	4a8a      	ldr	r2, [pc, #552]	; (8002950 <keypad_scan+0x24c>)
 8002726:	3314      	adds	r3, #20
 8002728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800272c:	2201      	movs	r2, #1
 800272e:	4619      	mov	r1, r3
 8002730:	f7fe f817 	bl	8000762 <HAL_GPIO_WritePin>
	for (i = 0; i < COLS; i++)
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	3301      	adds	r3, #1
 8002738:	71fb      	strb	r3, [r7, #7]
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d9eb      	bls.n	8002718 <keypad_scan+0x14>
				keypad_cfgparam.COL_PIN[i], 1);
	}

	/* Steady State: Read The ROW Pins To Know If Any Key Is Pressed At All or Not */

	for (i = 0; i < ROWS; i++)
 8002740:	2300      	movs	r3, #0
 8002742:	71fb      	strb	r3, [r7, #7]
 8002744:	e017      	b.n	8002776 <keypad_scan+0x72>
	{
		au8_ReadState[i] = HAL_GPIO_ReadPin(keypad_cfgparam.ROW_GPIO[i],
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	4a81      	ldr	r2, [pc, #516]	; (8002950 <keypad_scan+0x24c>)
 800274a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	497f      	ldr	r1, [pc, #508]	; (8002950 <keypad_scan+0x24c>)
 8002752:	3308      	adds	r3, #8
 8002754:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002758:	79fc      	ldrb	r4, [r7, #7]
 800275a:	4619      	mov	r1, r3
 800275c:	4610      	mov	r0, r2
 800275e:	f7fd ffe9 	bl	8000734 <HAL_GPIO_ReadPin>
 8002762:	4603      	mov	r3, r0
 8002764:	461a      	mov	r2, r3
 8002766:	f107 0308 	add.w	r3, r7, #8
 800276a:	4423      	add	r3, r4
 800276c:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (i = 0; i < ROWS; i++)
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	3301      	adds	r3, #1
 8002774:	71fb      	strb	r3, [r7, #7]
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	2b03      	cmp	r3, #3
 800277a:	d9e4      	bls.n	8002746 <keypad_scan+0x42>

	/* If Any member in array au8_ReadState is 1, we know that a key is pressed */
	/* And we'll keep changing the COL pins output pattern until we find the pressed key or keys */
	/* Else: We'll end the scan procedure at this point */

	if ((au8_ReadState[0]) | (au8_ReadState[1]) | (au8_ReadState[2])
 800277c:	783a      	ldrb	r2, [r7, #0]
 800277e:	787b      	ldrb	r3, [r7, #1]
 8002780:	4313      	orrs	r3, r2
 8002782:	b2da      	uxtb	r2, r3
 8002784:	78bb      	ldrb	r3, [r7, #2]
 8002786:	4313      	orrs	r3, r2
 8002788:	b2da      	uxtb	r2, r3
			| (au8_ReadState[3]))
 800278a:	78fb      	ldrb	r3, [r7, #3]
	if ((au8_ReadState[0]) | (au8_ReadState[1]) | (au8_ReadState[2])
 800278c:	4313      	orrs	r3, r2
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 83d8 	beq.w	8002f46 <keypad_scan+0x842>
	{
		/*--[ First Row Check ]--*/

		if (au8_ReadState[0])
 8002796:	783b      	ldrb	r3, [r7, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80dd 	beq.w	8002958 <keypad_scan+0x254>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[0],
 800279e:	4b6c      	ldr	r3, [pc, #432]	; (8002950 <keypad_scan+0x24c>)
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	4a6b      	ldr	r2, [pc, #428]	; (8002950 <keypad_scan+0x24c>)
 80027a4:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 80027a6:	2201      	movs	r2, #1
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fd ffda 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[0], 1);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[1],
 80027ae:	4b68      	ldr	r3, [pc, #416]	; (8002950 <keypad_scan+0x24c>)
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	4a67      	ldr	r2, [pc, #412]	; (8002950 <keypad_scan+0x24c>)
 80027b4:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 80027b6:	2200      	movs	r2, #0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fd ffd2 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[1], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[2],
 80027be:	4b64      	ldr	r3, [pc, #400]	; (8002950 <keypad_scan+0x24c>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	4a63      	ldr	r2, [pc, #396]	; (8002950 <keypad_scan+0x24c>)
 80027c4:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80027c6:	2200      	movs	r2, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fd ffca 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[2], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[3],
 80027ce:	4b60      	ldr	r3, [pc, #384]	; (8002950 <keypad_scan+0x24c>)
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	4a5f      	ldr	r2, [pc, #380]	; (8002950 <keypad_scan+0x24c>)
 80027d4:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 80027d6:	2200      	movs	r2, #0
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fd ffc2 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[3], 0);
			/* Read ROW0-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(keypad_cfgparam.ROW_GPIO[0],
 80027de:	4b5c      	ldr	r3, [pc, #368]	; (8002950 <keypad_scan+0x24c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a5b      	ldr	r2, [pc, #364]	; (8002950 <keypad_scan+0x24c>)
 80027e4:	8a12      	ldrh	r2, [r2, #16]
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd ffa3 	bl	8000734 <HAL_GPIO_ReadPin>
 80027ee:	4603      	mov	r3, r0
 80027f0:	71bb      	strb	r3, [r7, #6]
					keypad_cfgparam.ROW_PIN[0]);

			if (au8_ReadSt)
 80027f2:	79bb      	ldrb	r3, [r7, #6]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d004      	beq.n	8002802 <keypad_scan+0xfe>
			{
				keypad_info.key_states[0] = 1;
 80027f8:	4b56      	ldr	r3, [pc, #344]	; (8002954 <keypad_scan+0x250>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2201      	movs	r2, #1
 80027fe:	701a      	strb	r2, [r3, #0]
 8002800:	e003      	b.n	800280a <keypad_scan+0x106>
			}
			else
			{
				keypad_info.key_states[0] = 0;
 8002802:	4b54      	ldr	r3, [pc, #336]	; (8002954 <keypad_scan+0x250>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2200      	movs	r2, #0
 8002808:	701a      	strb	r2, [r3, #0]
			}

			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[0],
 800280a:	4b51      	ldr	r3, [pc, #324]	; (8002950 <keypad_scan+0x24c>)
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	4a50      	ldr	r2, [pc, #320]	; (8002950 <keypad_scan+0x24c>)
 8002810:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 8002812:	2200      	movs	r2, #0
 8002814:	4618      	mov	r0, r3
 8002816:	f7fd ffa4 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[0], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[1],
 800281a:	4b4d      	ldr	r3, [pc, #308]	; (8002950 <keypad_scan+0x24c>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	4a4c      	ldr	r2, [pc, #304]	; (8002950 <keypad_scan+0x24c>)
 8002820:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8002822:	2201      	movs	r2, #1
 8002824:	4618      	mov	r0, r3
 8002826:	f7fd ff9c 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[1], 1);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[2],
 800282a:	4b49      	ldr	r3, [pc, #292]	; (8002950 <keypad_scan+0x24c>)
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	4a48      	ldr	r2, [pc, #288]	; (8002950 <keypad_scan+0x24c>)
 8002830:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8002832:	2200      	movs	r2, #0
 8002834:	4618      	mov	r0, r3
 8002836:	f7fd ff94 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[2], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[3],
 800283a:	4b45      	ldr	r3, [pc, #276]	; (8002950 <keypad_scan+0x24c>)
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	4a44      	ldr	r2, [pc, #272]	; (8002950 <keypad_scan+0x24c>)
 8002840:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8002842:	2200      	movs	r2, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f7fd ff8c 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[3], 0);
			/* Read ROW0-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(keypad_cfgparam.ROW_GPIO[0],
 800284a:	4b41      	ldr	r3, [pc, #260]	; (8002950 <keypad_scan+0x24c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a40      	ldr	r2, [pc, #256]	; (8002950 <keypad_scan+0x24c>)
 8002850:	8a12      	ldrh	r2, [r2, #16]
 8002852:	4611      	mov	r1, r2
 8002854:	4618      	mov	r0, r3
 8002856:	f7fd ff6d 	bl	8000734 <HAL_GPIO_ReadPin>
 800285a:	4603      	mov	r3, r0
 800285c:	71bb      	strb	r3, [r7, #6]
					keypad_cfgparam.ROW_PIN[0]);

			if (au8_ReadSt)
 800285e:	79bb      	ldrb	r3, [r7, #6]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <keypad_scan+0x16c>
			{
				keypad_info.key_states[1] = 1;
 8002864:	4b3b      	ldr	r3, [pc, #236]	; (8002954 <keypad_scan+0x250>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	3301      	adds	r3, #1
 800286a:	2201      	movs	r2, #1
 800286c:	701a      	strb	r2, [r3, #0]
 800286e:	e004      	b.n	800287a <keypad_scan+0x176>
			}
			else
			{
				keypad_info.key_states[1] = 0;
 8002870:	4b38      	ldr	r3, [pc, #224]	; (8002954 <keypad_scan+0x250>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	3301      	adds	r3, #1
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]
			}

			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[0],
 800287a:	4b35      	ldr	r3, [pc, #212]	; (8002950 <keypad_scan+0x24c>)
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	4a34      	ldr	r2, [pc, #208]	; (8002950 <keypad_scan+0x24c>)
 8002880:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 8002882:	2200      	movs	r2, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f7fd ff6c 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[0], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[1],
 800288a:	4b31      	ldr	r3, [pc, #196]	; (8002950 <keypad_scan+0x24c>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	4a30      	ldr	r2, [pc, #192]	; (8002950 <keypad_scan+0x24c>)
 8002890:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8002892:	2200      	movs	r2, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f7fd ff64 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[1], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[2],
 800289a:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <keypad_scan+0x24c>)
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	4a2c      	ldr	r2, [pc, #176]	; (8002950 <keypad_scan+0x24c>)
 80028a0:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80028a2:	2201      	movs	r2, #1
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fd ff5c 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[2], 1);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[3],
 80028aa:	4b29      	ldr	r3, [pc, #164]	; (8002950 <keypad_scan+0x24c>)
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	4a28      	ldr	r2, [pc, #160]	; (8002950 <keypad_scan+0x24c>)
 80028b0:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 80028b2:	2200      	movs	r2, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fd ff54 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[3], 0);
			/* Read ROW0-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(keypad_cfgparam.ROW_GPIO[0],
 80028ba:	4b25      	ldr	r3, [pc, #148]	; (8002950 <keypad_scan+0x24c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a24      	ldr	r2, [pc, #144]	; (8002950 <keypad_scan+0x24c>)
 80028c0:	8a12      	ldrh	r2, [r2, #16]
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fd ff35 	bl	8000734 <HAL_GPIO_ReadPin>
 80028ca:	4603      	mov	r3, r0
 80028cc:	71bb      	strb	r3, [r7, #6]
					keypad_cfgparam.ROW_PIN[0]);

			if (au8_ReadSt)
 80028ce:	79bb      	ldrb	r3, [r7, #6]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <keypad_scan+0x1dc>
			{
				keypad_info.key_states[2] = 1;
 80028d4:	4b1f      	ldr	r3, [pc, #124]	; (8002954 <keypad_scan+0x250>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3302      	adds	r3, #2
 80028da:	2201      	movs	r2, #1
 80028dc:	701a      	strb	r2, [r3, #0]
 80028de:	e004      	b.n	80028ea <keypad_scan+0x1e6>
			}
			else
			{
				keypad_info.key_states[2] = 0;
 80028e0:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <keypad_scan+0x250>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	3302      	adds	r3, #2
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
			}

			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[0],
 80028ea:	4b19      	ldr	r3, [pc, #100]	; (8002950 <keypad_scan+0x24c>)
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	4a18      	ldr	r2, [pc, #96]	; (8002950 <keypad_scan+0x24c>)
 80028f0:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 80028f2:	2200      	movs	r2, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fd ff34 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[0], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[1],
 80028fa:	4b15      	ldr	r3, [pc, #84]	; (8002950 <keypad_scan+0x24c>)
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	4a14      	ldr	r2, [pc, #80]	; (8002950 <keypad_scan+0x24c>)
 8002900:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8002902:	2200      	movs	r2, #0
 8002904:	4618      	mov	r0, r3
 8002906:	f7fd ff2c 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[1], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[2],
 800290a:	4b11      	ldr	r3, [pc, #68]	; (8002950 <keypad_scan+0x24c>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	4a10      	ldr	r2, [pc, #64]	; (8002950 <keypad_scan+0x24c>)
 8002910:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8002912:	2200      	movs	r2, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f7fd ff24 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[2], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[3],
 800291a:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <keypad_scan+0x24c>)
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	4a0c      	ldr	r2, [pc, #48]	; (8002950 <keypad_scan+0x24c>)
 8002920:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8002922:	2201      	movs	r2, #1
 8002924:	4618      	mov	r0, r3
 8002926:	f7fd ff1c 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[3], 1);
			/* Read ROW0-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(keypad_cfgparam.ROW_GPIO[0],
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <keypad_scan+0x24c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a08      	ldr	r2, [pc, #32]	; (8002950 <keypad_scan+0x24c>)
 8002930:	8a12      	ldrh	r2, [r2, #16]
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f7fd fefd 	bl	8000734 <HAL_GPIO_ReadPin>
 800293a:	4603      	mov	r3, r0
 800293c:	71bb      	strb	r3, [r7, #6]
					keypad_cfgparam.ROW_PIN[0]);

			if (au8_ReadSt)
 800293e:	79bb      	ldrb	r3, [r7, #6]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d01c      	beq.n	800297e <keypad_scan+0x27a>
			{
				keypad_info.key_states[3] = 1;
 8002944:	4b03      	ldr	r3, [pc, #12]	; (8002954 <keypad_scan+0x250>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3303      	adds	r3, #3
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]
 800294e:	e016      	b.n	800297e <keypad_scan+0x27a>
 8002950:	200000d0 	.word	0x200000d0
 8002954:	200000cc 	.word	0x200000cc
			}

		}
		else
		{
			keypad_info.key_states[0] = 0;
 8002958:	4b9e      	ldr	r3, [pc, #632]	; (8002bd4 <keypad_scan+0x4d0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
			keypad_info.key_states[1] = 0;
 8002960:	4b9c      	ldr	r3, [pc, #624]	; (8002bd4 <keypad_scan+0x4d0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3301      	adds	r3, #1
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
			keypad_info.key_states[2] = 0;
 800296a:	4b9a      	ldr	r3, [pc, #616]	; (8002bd4 <keypad_scan+0x4d0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	3302      	adds	r3, #2
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
			keypad_info.key_states[3] = 0;
 8002974:	4b97      	ldr	r3, [pc, #604]	; (8002bd4 <keypad_scan+0x4d0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3303      	adds	r3, #3
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
		}

		/*---------------------[END OF 1st ROW Check ]--------------------*/
		/*--[ Second Row Check ]--*/

		if (au8_ReadState[1])
 800297e:	787b      	ldrb	r3, [r7, #1]
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80db 	beq.w	8002b3c <keypad_scan+0x438>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[0],
 8002986:	4b94      	ldr	r3, [pc, #592]	; (8002bd8 <keypad_scan+0x4d4>)
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	4a93      	ldr	r2, [pc, #588]	; (8002bd8 <keypad_scan+0x4d4>)
 800298c:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 800298e:	2201      	movs	r2, #1
 8002990:	4618      	mov	r0, r3
 8002992:	f7fd fee6 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[0], 1);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[1],
 8002996:	4b90      	ldr	r3, [pc, #576]	; (8002bd8 <keypad_scan+0x4d4>)
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	4a8f      	ldr	r2, [pc, #572]	; (8002bd8 <keypad_scan+0x4d4>)
 800299c:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 800299e:	2200      	movs	r2, #0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fd fede 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[1], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[2],
 80029a6:	4b8c      	ldr	r3, [pc, #560]	; (8002bd8 <keypad_scan+0x4d4>)
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	4a8b      	ldr	r2, [pc, #556]	; (8002bd8 <keypad_scan+0x4d4>)
 80029ac:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80029ae:	2200      	movs	r2, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fd fed6 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[2], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[3],
 80029b6:	4b88      	ldr	r3, [pc, #544]	; (8002bd8 <keypad_scan+0x4d4>)
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	4a87      	ldr	r2, [pc, #540]	; (8002bd8 <keypad_scan+0x4d4>)
 80029bc:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 80029be:	2200      	movs	r2, #0
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fd fece 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[3], 0);
			/* Read ROW1-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(keypad_cfgparam.ROW_GPIO[1],
 80029c6:	4b84      	ldr	r3, [pc, #528]	; (8002bd8 <keypad_scan+0x4d4>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4a83      	ldr	r2, [pc, #524]	; (8002bd8 <keypad_scan+0x4d4>)
 80029cc:	8a52      	ldrh	r2, [r2, #18]
 80029ce:	4611      	mov	r1, r2
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fd feaf 	bl	8000734 <HAL_GPIO_ReadPin>
 80029d6:	4603      	mov	r3, r0
 80029d8:	71bb      	strb	r3, [r7, #6]
					keypad_cfgparam.ROW_PIN[1]);

			if (au8_ReadSt)
 80029da:	79bb      	ldrb	r3, [r7, #6]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <keypad_scan+0x2e8>
			{
				keypad_info.key_states[4] = 1;
 80029e0:	4b7c      	ldr	r3, [pc, #496]	; (8002bd4 <keypad_scan+0x4d0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3304      	adds	r3, #4
 80029e6:	2201      	movs	r2, #1
 80029e8:	701a      	strb	r2, [r3, #0]
 80029ea:	e004      	b.n	80029f6 <keypad_scan+0x2f2>
			}
			else
			{
				keypad_info.key_states[4] = 0;
 80029ec:	4b79      	ldr	r3, [pc, #484]	; (8002bd4 <keypad_scan+0x4d0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3304      	adds	r3, #4
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
			}

			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[0],
 80029f6:	4b78      	ldr	r3, [pc, #480]	; (8002bd8 <keypad_scan+0x4d4>)
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	4a77      	ldr	r2, [pc, #476]	; (8002bd8 <keypad_scan+0x4d4>)
 80029fc:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 80029fe:	2200      	movs	r2, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd feae 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[0], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[1],
 8002a06:	4b74      	ldr	r3, [pc, #464]	; (8002bd8 <keypad_scan+0x4d4>)
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	4a73      	ldr	r2, [pc, #460]	; (8002bd8 <keypad_scan+0x4d4>)
 8002a0c:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8002a0e:	2201      	movs	r2, #1
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fd fea6 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[1], 1);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[2],
 8002a16:	4b70      	ldr	r3, [pc, #448]	; (8002bd8 <keypad_scan+0x4d4>)
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	4a6f      	ldr	r2, [pc, #444]	; (8002bd8 <keypad_scan+0x4d4>)
 8002a1c:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8002a1e:	2200      	movs	r2, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fd fe9e 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[2], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[3],
 8002a26:	4b6c      	ldr	r3, [pc, #432]	; (8002bd8 <keypad_scan+0x4d4>)
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	4a6b      	ldr	r2, [pc, #428]	; (8002bd8 <keypad_scan+0x4d4>)
 8002a2c:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8002a2e:	2200      	movs	r2, #0
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fd fe96 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[3], 0);
			/* Read ROW1-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(keypad_cfgparam.ROW_GPIO[1],
 8002a36:	4b68      	ldr	r3, [pc, #416]	; (8002bd8 <keypad_scan+0x4d4>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4a67      	ldr	r2, [pc, #412]	; (8002bd8 <keypad_scan+0x4d4>)
 8002a3c:	8a52      	ldrh	r2, [r2, #18]
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fd fe77 	bl	8000734 <HAL_GPIO_ReadPin>
 8002a46:	4603      	mov	r3, r0
 8002a48:	71bb      	strb	r3, [r7, #6]
					keypad_cfgparam.ROW_PIN[1]);

			if (au8_ReadSt)
 8002a4a:	79bb      	ldrb	r3, [r7, #6]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <keypad_scan+0x358>
			{
				keypad_info.key_states[5] = 1;
 8002a50:	4b60      	ldr	r3, [pc, #384]	; (8002bd4 <keypad_scan+0x4d0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3305      	adds	r3, #5
 8002a56:	2201      	movs	r2, #1
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	e004      	b.n	8002a66 <keypad_scan+0x362>
			}
			else
			{
				keypad_info.key_states[5] = 0;
 8002a5c:	4b5d      	ldr	r3, [pc, #372]	; (8002bd4 <keypad_scan+0x4d0>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	3305      	adds	r3, #5
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
			}

			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[0],
 8002a66:	4b5c      	ldr	r3, [pc, #368]	; (8002bd8 <keypad_scan+0x4d4>)
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	4a5b      	ldr	r2, [pc, #364]	; (8002bd8 <keypad_scan+0x4d4>)
 8002a6c:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 8002a6e:	2200      	movs	r2, #0
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fd fe76 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[0], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[1],
 8002a76:	4b58      	ldr	r3, [pc, #352]	; (8002bd8 <keypad_scan+0x4d4>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	4a57      	ldr	r2, [pc, #348]	; (8002bd8 <keypad_scan+0x4d4>)
 8002a7c:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8002a7e:	2200      	movs	r2, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fd fe6e 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[1], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[2],
 8002a86:	4b54      	ldr	r3, [pc, #336]	; (8002bd8 <keypad_scan+0x4d4>)
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	4a53      	ldr	r2, [pc, #332]	; (8002bd8 <keypad_scan+0x4d4>)
 8002a8c:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fd fe66 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[2], 1);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[3],
 8002a96:	4b50      	ldr	r3, [pc, #320]	; (8002bd8 <keypad_scan+0x4d4>)
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	4a4f      	ldr	r2, [pc, #316]	; (8002bd8 <keypad_scan+0x4d4>)
 8002a9c:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fd fe5e 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[3], 0);
			/* Read ROW1-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(keypad_cfgparam.ROW_GPIO[1],
 8002aa6:	4b4c      	ldr	r3, [pc, #304]	; (8002bd8 <keypad_scan+0x4d4>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4a4b      	ldr	r2, [pc, #300]	; (8002bd8 <keypad_scan+0x4d4>)
 8002aac:	8a52      	ldrh	r2, [r2, #18]
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fd fe3f 	bl	8000734 <HAL_GPIO_ReadPin>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71bb      	strb	r3, [r7, #6]
					keypad_cfgparam.ROW_PIN[1]);

			if (au8_ReadSt)
 8002aba:	79bb      	ldrb	r3, [r7, #6]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <keypad_scan+0x3c8>
			{
				keypad_info.key_states[6] = 1;
 8002ac0:	4b44      	ldr	r3, [pc, #272]	; (8002bd4 <keypad_scan+0x4d0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	3306      	adds	r3, #6
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	e004      	b.n	8002ad6 <keypad_scan+0x3d2>
			}
			else
			{
				keypad_info.key_states[6] = 0;
 8002acc:	4b41      	ldr	r3, [pc, #260]	; (8002bd4 <keypad_scan+0x4d0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	3306      	adds	r3, #6
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]
			}

			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[0],
 8002ad6:	4b40      	ldr	r3, [pc, #256]	; (8002bd8 <keypad_scan+0x4d4>)
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	4a3f      	ldr	r2, [pc, #252]	; (8002bd8 <keypad_scan+0x4d4>)
 8002adc:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 8002ade:	2200      	movs	r2, #0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fd fe3e 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[0], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[1],
 8002ae6:	4b3c      	ldr	r3, [pc, #240]	; (8002bd8 <keypad_scan+0x4d4>)
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	4a3b      	ldr	r2, [pc, #236]	; (8002bd8 <keypad_scan+0x4d4>)
 8002aec:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8002aee:	2200      	movs	r2, #0
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fd fe36 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[1], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[2],
 8002af6:	4b38      	ldr	r3, [pc, #224]	; (8002bd8 <keypad_scan+0x4d4>)
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	4a37      	ldr	r2, [pc, #220]	; (8002bd8 <keypad_scan+0x4d4>)
 8002afc:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8002afe:	2200      	movs	r2, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fd fe2e 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[2], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[3],
 8002b06:	4b34      	ldr	r3, [pc, #208]	; (8002bd8 <keypad_scan+0x4d4>)
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	4a33      	ldr	r2, [pc, #204]	; (8002bd8 <keypad_scan+0x4d4>)
 8002b0c:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8002b0e:	2201      	movs	r2, #1
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fd fe26 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[3], 1);
			/* Read ROW1-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(keypad_cfgparam.ROW_GPIO[1],
 8002b16:	4b30      	ldr	r3, [pc, #192]	; (8002bd8 <keypad_scan+0x4d4>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4a2f      	ldr	r2, [pc, #188]	; (8002bd8 <keypad_scan+0x4d4>)
 8002b1c:	8a52      	ldrh	r2, [r2, #18]
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fd fe07 	bl	8000734 <HAL_GPIO_ReadPin>
 8002b26:	4603      	mov	r3, r0
 8002b28:	71bb      	strb	r3, [r7, #6]
					keypad_cfgparam.ROW_PIN[1]);

			if (au8_ReadSt)
 8002b2a:	79bb      	ldrb	r3, [r7, #6]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d019      	beq.n	8002b64 <keypad_scan+0x460>
			{
				keypad_info.key_states[7] = 1;
 8002b30:	4b28      	ldr	r3, [pc, #160]	; (8002bd4 <keypad_scan+0x4d0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	3307      	adds	r3, #7
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	e013      	b.n	8002b64 <keypad_scan+0x460>
			}

		}
		else
		{
			keypad_info.key_states[4] = 0;
 8002b3c:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <keypad_scan+0x4d0>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3304      	adds	r3, #4
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]
			keypad_info.key_states[5] = 0;
 8002b46:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <keypad_scan+0x4d0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	3305      	adds	r3, #5
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
			keypad_info.key_states[6] = 0;
 8002b50:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <keypad_scan+0x4d0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	3306      	adds	r3, #6
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
			keypad_info.key_states[7] = 0;
 8002b5a:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <keypad_scan+0x4d0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	3307      	adds	r3, #7
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
		}

		/*---------------------[END OF 2nd ROW Check ]--------------------*/
		/*--[ Third Row Check ]--*/

		if (au8_ReadState[2])
 8002b64:	78bb      	ldrb	r3, [r7, #2]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80e0 	beq.w	8002d2c <keypad_scan+0x628>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[0],
 8002b6c:	4b1a      	ldr	r3, [pc, #104]	; (8002bd8 <keypad_scan+0x4d4>)
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	4a19      	ldr	r2, [pc, #100]	; (8002bd8 <keypad_scan+0x4d4>)
 8002b72:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 8002b74:	2201      	movs	r2, #1
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd fdf3 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[0], 1);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[1],
 8002b7c:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <keypad_scan+0x4d4>)
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	4a15      	ldr	r2, [pc, #84]	; (8002bd8 <keypad_scan+0x4d4>)
 8002b82:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8002b84:	2200      	movs	r2, #0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fd fdeb 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[1], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[2],
 8002b8c:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <keypad_scan+0x4d4>)
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	4a11      	ldr	r2, [pc, #68]	; (8002bd8 <keypad_scan+0x4d4>)
 8002b92:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8002b94:	2200      	movs	r2, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fd fde3 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[2], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[3],
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <keypad_scan+0x4d4>)
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	4a0d      	ldr	r2, [pc, #52]	; (8002bd8 <keypad_scan+0x4d4>)
 8002ba2:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fd fddb 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[3], 0);
			/* Read ROW2-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(keypad_cfgparam.ROW_GPIO[2],
 8002bac:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <keypad_scan+0x4d4>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <keypad_scan+0x4d4>)
 8002bb2:	8a92      	ldrh	r2, [r2, #20]
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fd fdbc 	bl	8000734 <HAL_GPIO_ReadPin>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	71bb      	strb	r3, [r7, #6]
					keypad_cfgparam.ROW_PIN[2]);

			if (au8_ReadSt)
 8002bc0:	79bb      	ldrb	r3, [r7, #6]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <keypad_scan+0x4d8>
			{
				keypad_info.key_states[8] = 1;
 8002bc6:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <keypad_scan+0x4d0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3308      	adds	r3, #8
 8002bcc:	2201      	movs	r2, #1
 8002bce:	701a      	strb	r2, [r3, #0]
 8002bd0:	e009      	b.n	8002be6 <keypad_scan+0x4e2>
 8002bd2:	bf00      	nop
 8002bd4:	200000cc 	.word	0x200000cc
 8002bd8:	200000d0 	.word	0x200000d0
			}
			else
			{
				keypad_info.key_states[8] = 0;
 8002bdc:	4b95      	ldr	r3, [pc, #596]	; (8002e34 <keypad_scan+0x730>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	3308      	adds	r3, #8
 8002be2:	2200      	movs	r2, #0
 8002be4:	701a      	strb	r2, [r3, #0]
			}

			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[0],
 8002be6:	4b94      	ldr	r3, [pc, #592]	; (8002e38 <keypad_scan+0x734>)
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	4a93      	ldr	r2, [pc, #588]	; (8002e38 <keypad_scan+0x734>)
 8002bec:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 8002bee:	2200      	movs	r2, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fd fdb6 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[0], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[1],
 8002bf6:	4b90      	ldr	r3, [pc, #576]	; (8002e38 <keypad_scan+0x734>)
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	4a8f      	ldr	r2, [pc, #572]	; (8002e38 <keypad_scan+0x734>)
 8002bfc:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8002bfe:	2201      	movs	r2, #1
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fd fdae 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[1], 1);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[2],
 8002c06:	4b8c      	ldr	r3, [pc, #560]	; (8002e38 <keypad_scan+0x734>)
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	4a8b      	ldr	r2, [pc, #556]	; (8002e38 <keypad_scan+0x734>)
 8002c0c:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8002c0e:	2200      	movs	r2, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fd fda6 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[2], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[3],
 8002c16:	4b88      	ldr	r3, [pc, #544]	; (8002e38 <keypad_scan+0x734>)
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	4a87      	ldr	r2, [pc, #540]	; (8002e38 <keypad_scan+0x734>)
 8002c1c:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8002c1e:	2200      	movs	r2, #0
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fd fd9e 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[3], 0);
			/* Read ROW2-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(keypad_cfgparam.ROW_GPIO[2],
 8002c26:	4b84      	ldr	r3, [pc, #528]	; (8002e38 <keypad_scan+0x734>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	4a83      	ldr	r2, [pc, #524]	; (8002e38 <keypad_scan+0x734>)
 8002c2c:	8a92      	ldrh	r2, [r2, #20]
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fd fd7f 	bl	8000734 <HAL_GPIO_ReadPin>
 8002c36:	4603      	mov	r3, r0
 8002c38:	71bb      	strb	r3, [r7, #6]
					keypad_cfgparam.ROW_PIN[2]);

			if (au8_ReadSt)
 8002c3a:	79bb      	ldrb	r3, [r7, #6]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <keypad_scan+0x548>
			{
				keypad_info.key_states[9] = 1;
 8002c40:	4b7c      	ldr	r3, [pc, #496]	; (8002e34 <keypad_scan+0x730>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	3309      	adds	r3, #9
 8002c46:	2201      	movs	r2, #1
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	e004      	b.n	8002c56 <keypad_scan+0x552>
			}
			else
			{
				keypad_info.key_states[9] = 0;
 8002c4c:	4b79      	ldr	r3, [pc, #484]	; (8002e34 <keypad_scan+0x730>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	3309      	adds	r3, #9
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
			}

			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[0],
 8002c56:	4b78      	ldr	r3, [pc, #480]	; (8002e38 <keypad_scan+0x734>)
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	4a77      	ldr	r2, [pc, #476]	; (8002e38 <keypad_scan+0x734>)
 8002c5c:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 8002c5e:	2200      	movs	r2, #0
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fd fd7e 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[0], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[1],
 8002c66:	4b74      	ldr	r3, [pc, #464]	; (8002e38 <keypad_scan+0x734>)
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	4a73      	ldr	r2, [pc, #460]	; (8002e38 <keypad_scan+0x734>)
 8002c6c:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8002c6e:	2200      	movs	r2, #0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fd fd76 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[1], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[2],
 8002c76:	4b70      	ldr	r3, [pc, #448]	; (8002e38 <keypad_scan+0x734>)
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	4a6f      	ldr	r2, [pc, #444]	; (8002e38 <keypad_scan+0x734>)
 8002c7c:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8002c7e:	2201      	movs	r2, #1
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fd fd6e 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[2], 1);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[3],
 8002c86:	4b6c      	ldr	r3, [pc, #432]	; (8002e38 <keypad_scan+0x734>)
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	4a6b      	ldr	r2, [pc, #428]	; (8002e38 <keypad_scan+0x734>)
 8002c8c:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8002c8e:	2200      	movs	r2, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fd fd66 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[3], 0);
			/* Read ROW2-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(keypad_cfgparam.ROW_GPIO[2],
 8002c96:	4b68      	ldr	r3, [pc, #416]	; (8002e38 <keypad_scan+0x734>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	4a67      	ldr	r2, [pc, #412]	; (8002e38 <keypad_scan+0x734>)
 8002c9c:	8a92      	ldrh	r2, [r2, #20]
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fd fd47 	bl	8000734 <HAL_GPIO_ReadPin>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71bb      	strb	r3, [r7, #6]
					keypad_cfgparam.ROW_PIN[2]);

			if (au8_ReadSt)
 8002caa:	79bb      	ldrb	r3, [r7, #6]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <keypad_scan+0x5b8>
			{
				keypad_info.key_states[10] = 1;
 8002cb0:	4b60      	ldr	r3, [pc, #384]	; (8002e34 <keypad_scan+0x730>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	330a      	adds	r3, #10
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
 8002cba:	e004      	b.n	8002cc6 <keypad_scan+0x5c2>
			}
			else
			{
				keypad_info.key_states[10] = 0;
 8002cbc:	4b5d      	ldr	r3, [pc, #372]	; (8002e34 <keypad_scan+0x730>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	330a      	adds	r3, #10
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
			}

			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[0],
 8002cc6:	4b5c      	ldr	r3, [pc, #368]	; (8002e38 <keypad_scan+0x734>)
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	4a5b      	ldr	r2, [pc, #364]	; (8002e38 <keypad_scan+0x734>)
 8002ccc:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 8002cce:	2200      	movs	r2, #0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fd46 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[0], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[1],
 8002cd6:	4b58      	ldr	r3, [pc, #352]	; (8002e38 <keypad_scan+0x734>)
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	4a57      	ldr	r2, [pc, #348]	; (8002e38 <keypad_scan+0x734>)
 8002cdc:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8002cde:	2200      	movs	r2, #0
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fd fd3e 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[1], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[2],
 8002ce6:	4b54      	ldr	r3, [pc, #336]	; (8002e38 <keypad_scan+0x734>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	4a53      	ldr	r2, [pc, #332]	; (8002e38 <keypad_scan+0x734>)
 8002cec:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8002cee:	2200      	movs	r2, #0
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fd fd36 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[2], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[3],
 8002cf6:	4b50      	ldr	r3, [pc, #320]	; (8002e38 <keypad_scan+0x734>)
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	4a4f      	ldr	r2, [pc, #316]	; (8002e38 <keypad_scan+0x734>)
 8002cfc:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8002cfe:	2201      	movs	r2, #1
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fd fd2e 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[3], 1);
			/* Read ROW2-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(keypad_cfgparam.ROW_GPIO[2],
 8002d06:	4b4c      	ldr	r3, [pc, #304]	; (8002e38 <keypad_scan+0x734>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	4a4b      	ldr	r2, [pc, #300]	; (8002e38 <keypad_scan+0x734>)
 8002d0c:	8a92      	ldrh	r2, [r2, #20]
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fd fd0f 	bl	8000734 <HAL_GPIO_ReadPin>
 8002d16:	4603      	mov	r3, r0
 8002d18:	71bb      	strb	r3, [r7, #6]
					keypad_cfgparam.ROW_PIN[2]);

			if (au8_ReadSt)
 8002d1a:	79bb      	ldrb	r3, [r7, #6]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d019      	beq.n	8002d54 <keypad_scan+0x650>
			{
				keypad_info.key_states[11] = 1;
 8002d20:	4b44      	ldr	r3, [pc, #272]	; (8002e34 <keypad_scan+0x730>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	330b      	adds	r3, #11
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
 8002d2a:	e013      	b.n	8002d54 <keypad_scan+0x650>
			}

		}
		else
		{
			keypad_info.key_states[8] = 0;
 8002d2c:	4b41      	ldr	r3, [pc, #260]	; (8002e34 <keypad_scan+0x730>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3308      	adds	r3, #8
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]
			keypad_info.key_states[9] = 0;
 8002d36:	4b3f      	ldr	r3, [pc, #252]	; (8002e34 <keypad_scan+0x730>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3309      	adds	r3, #9
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
			keypad_info.key_states[10] = 0;
 8002d40:	4b3c      	ldr	r3, [pc, #240]	; (8002e34 <keypad_scan+0x730>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	330a      	adds	r3, #10
 8002d46:	2200      	movs	r2, #0
 8002d48:	701a      	strb	r2, [r3, #0]
			keypad_info.key_states[11] = 0;
 8002d4a:	4b3a      	ldr	r3, [pc, #232]	; (8002e34 <keypad_scan+0x730>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	330b      	adds	r3, #11
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
		}

		/*---------------------[END OF 3rd ROW Check ]--------------------*/
		/*--[ Fourth Row Check ]--*/

		if (au8_ReadState[3])
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 80e0 	beq.w	8002f1c <keypad_scan+0x818>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[0],
 8002d5c:	4b36      	ldr	r3, [pc, #216]	; (8002e38 <keypad_scan+0x734>)
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	4a35      	ldr	r2, [pc, #212]	; (8002e38 <keypad_scan+0x734>)
 8002d62:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 8002d64:	2201      	movs	r2, #1
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fd fcfb 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[0], 1);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[1],
 8002d6c:	4b32      	ldr	r3, [pc, #200]	; (8002e38 <keypad_scan+0x734>)
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	4a31      	ldr	r2, [pc, #196]	; (8002e38 <keypad_scan+0x734>)
 8002d72:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8002d74:	2200      	movs	r2, #0
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fd fcf3 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[1], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[2],
 8002d7c:	4b2e      	ldr	r3, [pc, #184]	; (8002e38 <keypad_scan+0x734>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	4a2d      	ldr	r2, [pc, #180]	; (8002e38 <keypad_scan+0x734>)
 8002d82:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8002d84:	2200      	movs	r2, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fd fceb 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[2], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[3],
 8002d8c:	4b2a      	ldr	r3, [pc, #168]	; (8002e38 <keypad_scan+0x734>)
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	4a29      	ldr	r2, [pc, #164]	; (8002e38 <keypad_scan+0x734>)
 8002d92:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8002d94:	2200      	movs	r2, #0
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd fce3 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[3], 0);
			/* Read ROW3-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(keypad_cfgparam.ROW_GPIO[3],
 8002d9c:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <keypad_scan+0x734>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4a25      	ldr	r2, [pc, #148]	; (8002e38 <keypad_scan+0x734>)
 8002da2:	8ad2      	ldrh	r2, [r2, #22]
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fd fcc4 	bl	8000734 <HAL_GPIO_ReadPin>
 8002dac:	4603      	mov	r3, r0
 8002dae:	71bb      	strb	r3, [r7, #6]
					keypad_cfgparam.ROW_PIN[3]);

			if (au8_ReadSt)
 8002db0:	79bb      	ldrb	r3, [r7, #6]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d005      	beq.n	8002dc2 <keypad_scan+0x6be>
			{
				keypad_info.key_states[12] = 1;
 8002db6:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <keypad_scan+0x730>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	330c      	adds	r3, #12
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	701a      	strb	r2, [r3, #0]
 8002dc0:	e004      	b.n	8002dcc <keypad_scan+0x6c8>
			}
			else
			{
				keypad_info.key_states[12] = 0;
 8002dc2:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <keypad_scan+0x730>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	330c      	adds	r3, #12
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
			}

			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[0],
 8002dcc:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <keypad_scan+0x734>)
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	4a19      	ldr	r2, [pc, #100]	; (8002e38 <keypad_scan+0x734>)
 8002dd2:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fd fcc3 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[0], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[1],
 8002ddc:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <keypad_scan+0x734>)
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	4a15      	ldr	r2, [pc, #84]	; (8002e38 <keypad_scan+0x734>)
 8002de2:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8002de4:	2201      	movs	r2, #1
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fd fcbb 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[1], 1);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[2],
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <keypad_scan+0x734>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4a11      	ldr	r2, [pc, #68]	; (8002e38 <keypad_scan+0x734>)
 8002df2:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8002df4:	2200      	movs	r2, #0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fd fcb3 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[2], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[3],
 8002dfc:	4b0e      	ldr	r3, [pc, #56]	; (8002e38 <keypad_scan+0x734>)
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	4a0d      	ldr	r2, [pc, #52]	; (8002e38 <keypad_scan+0x734>)
 8002e02:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8002e04:	2200      	movs	r2, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fd fcab 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[3], 0);
			/* Read ROW3-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(keypad_cfgparam.ROW_GPIO[3],
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <keypad_scan+0x734>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4a09      	ldr	r2, [pc, #36]	; (8002e38 <keypad_scan+0x734>)
 8002e12:	8ad2      	ldrh	r2, [r2, #22]
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fd fc8c 	bl	8000734 <HAL_GPIO_ReadPin>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	71bb      	strb	r3, [r7, #6]
					keypad_cfgparam.ROW_PIN[3]);

			if (au8_ReadSt)
 8002e20:	79bb      	ldrb	r3, [r7, #6]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <keypad_scan+0x738>
			{
				keypad_info.key_states[13] = 1;
 8002e26:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <keypad_scan+0x730>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	330d      	adds	r3, #13
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	701a      	strb	r2, [r3, #0]
 8002e30:	e009      	b.n	8002e46 <keypad_scan+0x742>
 8002e32:	bf00      	nop
 8002e34:	200000cc 	.word	0x200000cc
 8002e38:	200000d0 	.word	0x200000d0
			}
			else
			{
				keypad_info.key_states[13] = 0;
 8002e3c:	4b51      	ldr	r3, [pc, #324]	; (8002f84 <keypad_scan+0x880>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	330d      	adds	r3, #13
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]
			}

			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[0],
 8002e46:	4b50      	ldr	r3, [pc, #320]	; (8002f88 <keypad_scan+0x884>)
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	4a4f      	ldr	r2, [pc, #316]	; (8002f88 <keypad_scan+0x884>)
 8002e4c:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 8002e4e:	2200      	movs	r2, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fd fc86 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[0], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[1],
 8002e56:	4b4c      	ldr	r3, [pc, #304]	; (8002f88 <keypad_scan+0x884>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	4a4b      	ldr	r2, [pc, #300]	; (8002f88 <keypad_scan+0x884>)
 8002e5c:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8002e5e:	2200      	movs	r2, #0
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fd fc7e 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[1], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[2],
 8002e66:	4b48      	ldr	r3, [pc, #288]	; (8002f88 <keypad_scan+0x884>)
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	4a47      	ldr	r2, [pc, #284]	; (8002f88 <keypad_scan+0x884>)
 8002e6c:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8002e6e:	2201      	movs	r2, #1
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd fc76 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[2], 1);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[3],
 8002e76:	4b44      	ldr	r3, [pc, #272]	; (8002f88 <keypad_scan+0x884>)
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	4a43      	ldr	r2, [pc, #268]	; (8002f88 <keypad_scan+0x884>)
 8002e7c:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8002e7e:	2200      	movs	r2, #0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fd fc6e 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[3], 0);
			/* Read ROW3-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(keypad_cfgparam.ROW_GPIO[3],
 8002e86:	4b40      	ldr	r3, [pc, #256]	; (8002f88 <keypad_scan+0x884>)
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	4a3f      	ldr	r2, [pc, #252]	; (8002f88 <keypad_scan+0x884>)
 8002e8c:	8ad2      	ldrh	r2, [r2, #22]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fd fc4f 	bl	8000734 <HAL_GPIO_ReadPin>
 8002e96:	4603      	mov	r3, r0
 8002e98:	71bb      	strb	r3, [r7, #6]
					keypad_cfgparam.ROW_PIN[3]);

			if (au8_ReadSt)
 8002e9a:	79bb      	ldrb	r3, [r7, #6]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <keypad_scan+0x7a8>
			{
				keypad_info.key_states[14] = 1;
 8002ea0:	4b38      	ldr	r3, [pc, #224]	; (8002f84 <keypad_scan+0x880>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	330e      	adds	r3, #14
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	701a      	strb	r2, [r3, #0]
 8002eaa:	e004      	b.n	8002eb6 <keypad_scan+0x7b2>
			}
			else
			{
				keypad_info.key_states[14] = 0;
 8002eac:	4b35      	ldr	r3, [pc, #212]	; (8002f84 <keypad_scan+0x880>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	330e      	adds	r3, #14
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
			}

			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[0],
 8002eb6:	4b34      	ldr	r3, [pc, #208]	; (8002f88 <keypad_scan+0x884>)
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	4a33      	ldr	r2, [pc, #204]	; (8002f88 <keypad_scan+0x884>)
 8002ebc:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fd fc4e 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[0], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[1],
 8002ec6:	4b30      	ldr	r3, [pc, #192]	; (8002f88 <keypad_scan+0x884>)
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	4a2f      	ldr	r2, [pc, #188]	; (8002f88 <keypad_scan+0x884>)
 8002ecc:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8002ece:	2200      	movs	r2, #0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fd fc46 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[1], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[2],
 8002ed6:	4b2c      	ldr	r3, [pc, #176]	; (8002f88 <keypad_scan+0x884>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	4a2b      	ldr	r2, [pc, #172]	; (8002f88 <keypad_scan+0x884>)
 8002edc:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8002ede:	2200      	movs	r2, #0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fd fc3e 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[2], 0);
			HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[3],
 8002ee6:	4b28      	ldr	r3, [pc, #160]	; (8002f88 <keypad_scan+0x884>)
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	4a27      	ldr	r2, [pc, #156]	; (8002f88 <keypad_scan+0x884>)
 8002eec:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8002eee:	2201      	movs	r2, #1
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fd fc36 	bl	8000762 <HAL_GPIO_WritePin>
					keypad_cfgparam.COL_PIN[3], 1);
			/* Read ROW3-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(keypad_cfgparam.ROW_GPIO[3],
 8002ef6:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <keypad_scan+0x884>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	4a23      	ldr	r2, [pc, #140]	; (8002f88 <keypad_scan+0x884>)
 8002efc:	8ad2      	ldrh	r2, [r2, #22]
 8002efe:	4611      	mov	r1, r2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fd fc17 	bl	8000734 <HAL_GPIO_ReadPin>
 8002f06:	4603      	mov	r3, r0
 8002f08:	71bb      	strb	r3, [r7, #6]
					keypad_cfgparam.ROW_PIN[3]);

			if (au8_ReadSt)
 8002f0a:	79bb      	ldrb	r3, [r7, #6]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d01c      	beq.n	8002f4a <keypad_scan+0x846>
			{
				keypad_info.key_states[15] = 1;
 8002f10:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <keypad_scan+0x880>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	330f      	adds	r3, #15
 8002f16:	2201      	movs	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	e016      	b.n	8002f4a <keypad_scan+0x846>
			}

		}
		else
		{
			keypad_info.key_states[12] = 0;
 8002f1c:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <keypad_scan+0x880>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	330c      	adds	r3, #12
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
			keypad_info.key_states[13] = 0;
 8002f26:	4b17      	ldr	r3, [pc, #92]	; (8002f84 <keypad_scan+0x880>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	330d      	adds	r3, #13
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]
			keypad_info.key_states[14] = 0;
 8002f30:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <keypad_scan+0x880>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	330e      	adds	r3, #14
 8002f36:	2200      	movs	r2, #0
 8002f38:	701a      	strb	r2, [r3, #0]
			keypad_info.key_states[15] = 0;
 8002f3a:	4b12      	ldr	r3, [pc, #72]	; (8002f84 <keypad_scan+0x880>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	330f      	adds	r3, #15
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
 8002f44:	e001      	b.n	8002f4a <keypad_scan+0x846>
	}
	/* Else If No Key Is Pressed */
	else
	{
		/* Fill The Keys States With 0s */
		keypad_clear();
 8002f46:	f000 f821 	bl	8002f8c <keypad_clear>
	}
	/* Back To Steady State: Output The Pattern [1 1 1 1] To The COL Pins */

	for (i = 0; i < COLS; i++)
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	71fb      	strb	r3, [r7, #7]
 8002f4e:	e010      	b.n	8002f72 <keypad_scan+0x86e>
	{
		HAL_GPIO_WritePin(keypad_cfgparam.COL_GPIO[i],
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	4a0d      	ldr	r2, [pc, #52]	; (8002f88 <keypad_scan+0x884>)
 8002f54:	3306      	adds	r3, #6
 8002f56:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	4a0a      	ldr	r2, [pc, #40]	; (8002f88 <keypad_scan+0x884>)
 8002f5e:	3314      	adds	r3, #20
 8002f60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f64:	2201      	movs	r2, #1
 8002f66:	4619      	mov	r1, r3
 8002f68:	f7fd fbfb 	bl	8000762 <HAL_GPIO_WritePin>
	for (i = 0; i < COLS; i++)
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	71fb      	strb	r3, [r7, #7]
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d9eb      	bls.n	8002f50 <keypad_scan+0x84c>
				keypad_cfgparam.COL_PIN[i], 1);
	}

}
 8002f78:	bf00      	nop
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd90      	pop	{r4, r7, pc}
 8002f82:	bf00      	nop
 8002f84:	200000cc 	.word	0x200000cc
 8002f88:	200000d0 	.word	0x200000d0

08002f8c <keypad_clear>:

/* clear The Keys States With 0s */
void keypad_clear ()
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < KEYS; i++)
 8002f92:	2300      	movs	r3, #0
 8002f94:	71fb      	strb	r3, [r7, #7]
 8002f96:	e008      	b.n	8002faa <keypad_clear+0x1e>
	{
		keypad_info.key_states[i] = 0;
 8002f98:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <keypad_clear+0x30>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	79fb      	ldrb	r3, [r7, #7]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < KEYS; i++)
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	71fb      	strb	r3, [r7, #7]
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	2b0f      	cmp	r3, #15
 8002fae:	d9f3      	bls.n	8002f98 <keypad_clear+0xc>
	}

}
 8002fb0:	bf00      	nop
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr
 8002fbc:	200000cc 	.word	0x200000cc

08002fc0 <menu_init>:
#include "crdcs_pq_main_menu.h"

/*intialize the main menu by assign the keypad button values and pressing values*/
void menu_init (const uint8_t *key_states_arr,
	const button_value_map_t *button_values_ext)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
	key_state = key_states_arr;
 8002fca:	4a05      	ldr	r2, [pc, #20]	; (8002fe0 <menu_init+0x20>)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6013      	str	r3, [r2, #0]
	button_values = button_values_ext;
 8002fd0:	4a04      	ldr	r2, [pc, #16]	; (8002fe4 <menu_init+0x24>)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6013      	str	r3, [r2, #0]
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr
 8002fe0:	20000100 	.word	0x20000100
 8002fe4:	20000104 	.word	0x20000104

08002fe8 <menu_select>:

/* Deal with user to getting arguments for select an option in menu.*/
void menu_select ()
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af02      	add	r7, sp, #8
	static uint8_t stage = 1;

	if (stage == 1)
 8002fee:	4b30      	ldr	r3, [pc, #192]	; (80030b0 <menu_select+0xc8>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d11f      	bne.n	8003036 <menu_select+0x4e>
	{
		/* Main Menu (display once).*/
		SSD1306_Clear();
 8002ff6:	f000 fa8e 	bl	8003516 <SSD1306_Clear>
		print_inline(10, 10, "A. Adder", &Font_7x10, 1);
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	4b2d      	ldr	r3, [pc, #180]	; (80030b4 <menu_select+0xcc>)
 8003000:	4a2d      	ldr	r2, [pc, #180]	; (80030b8 <menu_select+0xd0>)
 8003002:	210a      	movs	r1, #10
 8003004:	200a      	movs	r0, #10
 8003006:	f000 fb09 	bl	800361c <print_inline>
		print_inline(10, 30, "B. Counter", &Font_7x10, 1);
 800300a:	2301      	movs	r3, #1
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	4b29      	ldr	r3, [pc, #164]	; (80030b4 <menu_select+0xcc>)
 8003010:	4a2a      	ldr	r2, [pc, #168]	; (80030bc <menu_select+0xd4>)
 8003012:	211e      	movs	r1, #30
 8003014:	200a      	movs	r0, #10
 8003016:	f000 fb01 	bl	800361c <print_inline>
		print_inline(10, 50, "C. Stop watch", &Font_7x10, 1);
 800301a:	2301      	movs	r3, #1
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	4b25      	ldr	r3, [pc, #148]	; (80030b4 <menu_select+0xcc>)
 8003020:	4a27      	ldr	r2, [pc, #156]	; (80030c0 <menu_select+0xd8>)
 8003022:	2132      	movs	r1, #50	; 0x32
 8003024:	200a      	movs	r0, #10
 8003026:	f000 faf9 	bl	800361c <print_inline>
		SSD1306_UpdateScreen(); // update screen
 800302a:	f000 f915 	bl	8003258 <SSD1306_UpdateScreen>
		stage = 2;
 800302e:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <menu_select+0xc8>)
 8003030:	2202      	movs	r2, #2
 8003032:	701a      	strb	r2, [r3, #0]
			stage = 1;
			current_mode = TIMER;
		}
	}

}
 8003034:	e038      	b.n	80030a8 <menu_select+0xc0>
	else if (stage == 2)
 8003036:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <menu_select+0xc8>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d134      	bne.n	80030a8 <menu_select+0xc0>
		if (key_state[button_values->A] == KEY_PRESSED)
 800303e:	4b21      	ldr	r3, [pc, #132]	; (80030c4 <menu_select+0xdc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a21      	ldr	r2, [pc, #132]	; (80030c8 <menu_select+0xe0>)
 8003044:	6812      	ldr	r2, [r2, #0]
 8003046:	7b12      	ldrb	r2, [r2, #12]
 8003048:	4413      	add	r3, r2
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d108      	bne.n	8003062 <menu_select+0x7a>
			keypad_clear();
 8003050:	f7ff ff9c 	bl	8002f8c <keypad_clear>
			stage = 1;
 8003054:	4b16      	ldr	r3, [pc, #88]	; (80030b0 <menu_select+0xc8>)
 8003056:	2201      	movs	r2, #1
 8003058:	701a      	strb	r2, [r3, #0]
			current_mode = ADDER;
 800305a:	4b1c      	ldr	r3, [pc, #112]	; (80030cc <menu_select+0xe4>)
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
}
 8003060:	e022      	b.n	80030a8 <menu_select+0xc0>
		else if (key_state[button_values->B] == KEY_PRESSED)
 8003062:	4b18      	ldr	r3, [pc, #96]	; (80030c4 <menu_select+0xdc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a18      	ldr	r2, [pc, #96]	; (80030c8 <menu_select+0xe0>)
 8003068:	6812      	ldr	r2, [r2, #0]
 800306a:	7b52      	ldrb	r2, [r2, #13]
 800306c:	4413      	add	r3, r2
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d108      	bne.n	8003086 <menu_select+0x9e>
			keypad_clear();
 8003074:	f7ff ff8a 	bl	8002f8c <keypad_clear>
			stage = 1;
 8003078:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <menu_select+0xc8>)
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]
			current_mode = COUNTER;
 800307e:	4b13      	ldr	r3, [pc, #76]	; (80030cc <menu_select+0xe4>)
 8003080:	2202      	movs	r2, #2
 8003082:	701a      	strb	r2, [r3, #0]
}
 8003084:	e010      	b.n	80030a8 <menu_select+0xc0>
		else if (key_state[button_values->C] == KEY_PRESSED)
 8003086:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <menu_select+0xdc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a0f      	ldr	r2, [pc, #60]	; (80030c8 <menu_select+0xe0>)
 800308c:	6812      	ldr	r2, [r2, #0]
 800308e:	7b92      	ldrb	r2, [r2, #14]
 8003090:	4413      	add	r3, r2
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d107      	bne.n	80030a8 <menu_select+0xc0>
			keypad_clear();
 8003098:	f7ff ff78 	bl	8002f8c <keypad_clear>
			stage = 1;
 800309c:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <menu_select+0xc8>)
 800309e:	2201      	movs	r2, #1
 80030a0:	701a      	strb	r2, [r3, #0]
			current_mode = TIMER;
 80030a2:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <menu_select+0xe4>)
 80030a4:	2203      	movs	r2, #3
 80030a6:	701a      	strb	r2, [r3, #0]
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000028 	.word	0x20000028
 80030b4:	2000002c 	.word	0x2000002c
 80030b8:	0800476c 	.word	0x0800476c
 80030bc:	08004778 	.word	0x08004778
 80030c0:	08004784 	.word	0x08004784
 80030c4:	20000100 	.word	0x20000100
 80030c8:	20000104 	.word	0x20000104
 80030cc:	2000053c 	.word	0x2000053c

080030d0 <SSD1306_Init>:
		}
	}
}

uint8_t SSD1306_Init (void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80030d6:	f000 fa27 	bl	8003528 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK)
 80030da:	f644 6320 	movw	r3, #20000	; 0x4e20
 80030de:	2201      	movs	r2, #1
 80030e0:	2178      	movs	r1, #120	; 0x78
 80030e2:	485b      	ldr	r0, [pc, #364]	; (8003250 <SSD1306_Init+0x180>)
 80030e4:	f7fd fd98 	bl	8000c18 <HAL_I2C_IsDeviceReady>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <SSD1306_Init+0x22>
	{
		/* Return false */
		return 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e0a9      	b.n	8003246 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80030f2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80030f6:	607b      	str	r3, [r7, #4]
	while (p > 0)
 80030f8:	e002      	b.n	8003100 <SSD1306_Init+0x30>
		p--;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	607b      	str	r3, [r7, #4]
	while (p > 0)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f9      	bne.n	80030fa <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003106:	22ae      	movs	r2, #174	; 0xae
 8003108:	2100      	movs	r1, #0
 800310a:	2078      	movs	r0, #120	; 0x78
 800310c:	f000 fa68 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8003110:	2220      	movs	r2, #32
 8003112:	2100      	movs	r1, #0
 8003114:	2078      	movs	r0, #120	; 0x78
 8003116:	f000 fa63 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800311a:	2210      	movs	r2, #16
 800311c:	2100      	movs	r1, #0
 800311e:	2078      	movs	r0, #120	; 0x78
 8003120:	f000 fa5e 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003124:	22b0      	movs	r2, #176	; 0xb0
 8003126:	2100      	movs	r1, #0
 8003128:	2078      	movs	r0, #120	; 0x78
 800312a:	f000 fa59 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800312e:	22c8      	movs	r2, #200	; 0xc8
 8003130:	2100      	movs	r1, #0
 8003132:	2078      	movs	r0, #120	; 0x78
 8003134:	f000 fa54 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003138:	2200      	movs	r2, #0
 800313a:	2100      	movs	r1, #0
 800313c:	2078      	movs	r0, #120	; 0x78
 800313e:	f000 fa4f 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8003142:	2210      	movs	r2, #16
 8003144:	2100      	movs	r1, #0
 8003146:	2078      	movs	r0, #120	; 0x78
 8003148:	f000 fa4a 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800314c:	2240      	movs	r2, #64	; 0x40
 800314e:	2100      	movs	r1, #0
 8003150:	2078      	movs	r0, #120	; 0x78
 8003152:	f000 fa45 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003156:	2281      	movs	r2, #129	; 0x81
 8003158:	2100      	movs	r1, #0
 800315a:	2078      	movs	r0, #120	; 0x78
 800315c:	f000 fa40 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003160:	22ff      	movs	r2, #255	; 0xff
 8003162:	2100      	movs	r1, #0
 8003164:	2078      	movs	r0, #120	; 0x78
 8003166:	f000 fa3b 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800316a:	22a1      	movs	r2, #161	; 0xa1
 800316c:	2100      	movs	r1, #0
 800316e:	2078      	movs	r0, #120	; 0x78
 8003170:	f000 fa36 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003174:	22a6      	movs	r2, #166	; 0xa6
 8003176:	2100      	movs	r1, #0
 8003178:	2078      	movs	r0, #120	; 0x78
 800317a:	f000 fa31 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800317e:	22a8      	movs	r2, #168	; 0xa8
 8003180:	2100      	movs	r1, #0
 8003182:	2078      	movs	r0, #120	; 0x78
 8003184:	f000 fa2c 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003188:	223f      	movs	r2, #63	; 0x3f
 800318a:	2100      	movs	r1, #0
 800318c:	2078      	movs	r0, #120	; 0x78
 800318e:	f000 fa27 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003192:	22a4      	movs	r2, #164	; 0xa4
 8003194:	2100      	movs	r1, #0
 8003196:	2078      	movs	r0, #120	; 0x78
 8003198:	f000 fa22 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800319c:	22d3      	movs	r2, #211	; 0xd3
 800319e:	2100      	movs	r1, #0
 80031a0:	2078      	movs	r0, #120	; 0x78
 80031a2:	f000 fa1d 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80031a6:	2200      	movs	r2, #0
 80031a8:	2100      	movs	r1, #0
 80031aa:	2078      	movs	r0, #120	; 0x78
 80031ac:	f000 fa18 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80031b0:	22d5      	movs	r2, #213	; 0xd5
 80031b2:	2100      	movs	r1, #0
 80031b4:	2078      	movs	r0, #120	; 0x78
 80031b6:	f000 fa13 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80031ba:	22f0      	movs	r2, #240	; 0xf0
 80031bc:	2100      	movs	r1, #0
 80031be:	2078      	movs	r0, #120	; 0x78
 80031c0:	f000 fa0e 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80031c4:	22d9      	movs	r2, #217	; 0xd9
 80031c6:	2100      	movs	r1, #0
 80031c8:	2078      	movs	r0, #120	; 0x78
 80031ca:	f000 fa09 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80031ce:	2222      	movs	r2, #34	; 0x22
 80031d0:	2100      	movs	r1, #0
 80031d2:	2078      	movs	r0, #120	; 0x78
 80031d4:	f000 fa04 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80031d8:	22da      	movs	r2, #218	; 0xda
 80031da:	2100      	movs	r1, #0
 80031dc:	2078      	movs	r0, #120	; 0x78
 80031de:	f000 f9ff 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80031e2:	2212      	movs	r2, #18
 80031e4:	2100      	movs	r1, #0
 80031e6:	2078      	movs	r0, #120	; 0x78
 80031e8:	f000 f9fa 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80031ec:	22db      	movs	r2, #219	; 0xdb
 80031ee:	2100      	movs	r1, #0
 80031f0:	2078      	movs	r0, #120	; 0x78
 80031f2:	f000 f9f5 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80031f6:	2220      	movs	r2, #32
 80031f8:	2100      	movs	r1, #0
 80031fa:	2078      	movs	r0, #120	; 0x78
 80031fc:	f000 f9f0 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003200:	228d      	movs	r2, #141	; 0x8d
 8003202:	2100      	movs	r1, #0
 8003204:	2078      	movs	r0, #120	; 0x78
 8003206:	f000 f9eb 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800320a:	2214      	movs	r2, #20
 800320c:	2100      	movs	r1, #0
 800320e:	2078      	movs	r0, #120	; 0x78
 8003210:	f000 f9e6 	bl	80035e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003214:	22af      	movs	r2, #175	; 0xaf
 8003216:	2100      	movs	r1, #0
 8003218:	2078      	movs	r0, #120	; 0x78
 800321a:	f000 f9e1 	bl	80035e0 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800321e:	222e      	movs	r2, #46	; 0x2e
 8003220:	2100      	movs	r1, #0
 8003222:	2078      	movs	r0, #120	; 0x78
 8003224:	f000 f9dc 	bl	80035e0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003228:	2000      	movs	r0, #0
 800322a:	f000 f843 	bl	80032b4 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800322e:	f000 f813 	bl	8003258 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8003232:	4b08      	ldr	r3, [pc, #32]	; (8003254 <SSD1306_Init+0x184>)
 8003234:	2200      	movs	r2, #0
 8003236:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <SSD1306_Init+0x184>)
 800323a:	2200      	movs	r2, #0
 800323c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800323e:	4b05      	ldr	r3, [pc, #20]	; (8003254 <SSD1306_Init+0x184>)
 8003240:	2201      	movs	r2, #1
 8003242:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8003244:	2301      	movs	r3, #1
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	2000054c 	.word	0x2000054c
 8003254:	20000508 	.word	0x20000508

08003258 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen (void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++)
 800325e:	2300      	movs	r3, #0
 8003260:	71fb      	strb	r3, [r7, #7]
 8003262:	e01d      	b.n	80032a0 <SSD1306_UpdateScreen+0x48>
	{
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	3b50      	subs	r3, #80	; 0x50
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	2100      	movs	r1, #0
 800326e:	2078      	movs	r0, #120	; 0x78
 8003270:	f000 f9b6 	bl	80035e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003274:	2200      	movs	r2, #0
 8003276:	2100      	movs	r1, #0
 8003278:	2078      	movs	r0, #120	; 0x78
 800327a:	f000 f9b1 	bl	80035e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800327e:	2210      	movs	r2, #16
 8003280:	2100      	movs	r1, #0
 8003282:	2078      	movs	r0, #120	; 0x78
 8003284:	f000 f9ac 	bl	80035e0 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40,
				&SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	01db      	lsls	r3, r3, #7
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40,
 800328c:	4a08      	ldr	r2, [pc, #32]	; (80032b0 <SSD1306_UpdateScreen+0x58>)
 800328e:	441a      	add	r2, r3
 8003290:	2380      	movs	r3, #128	; 0x80
 8003292:	2140      	movs	r1, #64	; 0x40
 8003294:	2078      	movs	r0, #120	; 0x78
 8003296:	f000 f95b 	bl	8003550 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++)
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	3301      	adds	r3, #1
 800329e:	71fb      	strb	r3, [r7, #7]
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	2b07      	cmp	r3, #7
 80032a4:	d9de      	bls.n	8003264 <SSD1306_UpdateScreen+0xc>
	}
}
 80032a6:	bf00      	nop
 80032a8:	bf00      	nop
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20000108 	.word	0x20000108

080032b4 <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill (SSD1306_COLOR_t color)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF,
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <SSD1306_Fill+0x14>
 80032c4:	2300      	movs	r3, #0
 80032c6:	e000      	b.n	80032ca <SSD1306_Fill+0x16>
 80032c8:	23ff      	movs	r3, #255	; 0xff
 80032ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032ce:	4619      	mov	r1, r3
 80032d0:	4803      	ldr	r0, [pc, #12]	; (80032e0 <SSD1306_Fill+0x2c>)
 80032d2:	f000 fdb9 	bl	8003e48 <memset>
			sizeof(SSD1306_Buffer));
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000108 	.word	0x20000108

080032e4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel (uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	80fb      	strh	r3, [r7, #6]
 80032ee:	460b      	mov	r3, r1
 80032f0:	80bb      	strh	r3, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	70fb      	strb	r3, [r7, #3]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	2b7f      	cmp	r3, #127	; 0x7f
 80032fa:	d848      	bhi.n	800338e <SSD1306_DrawPixel+0xaa>
 80032fc:	88bb      	ldrh	r3, [r7, #4]
 80032fe:	2b3f      	cmp	r3, #63	; 0x3f
 8003300:	d845      	bhi.n	800338e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted)
 8003302:	4b25      	ldr	r3, [pc, #148]	; (8003398 <SSD1306_DrawPixel+0xb4>)
 8003304:	791b      	ldrb	r3, [r3, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d006      	beq.n	8003318 <SSD1306_DrawPixel+0x34>
	{
		color = (SSD1306_COLOR_t) !color;
 800330a:	78fb      	ldrb	r3, [r7, #3]
 800330c:	2b00      	cmp	r3, #0
 800330e:	bf0c      	ite	eq
 8003310:	2301      	moveq	r3, #1
 8003312:	2300      	movne	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE)
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d11a      	bne.n	8003354 <SSD1306_DrawPixel+0x70>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800331e:	88fa      	ldrh	r2, [r7, #6]
 8003320:	88bb      	ldrh	r3, [r7, #4]
 8003322:	08db      	lsrs	r3, r3, #3
 8003324:	b298      	uxth	r0, r3
 8003326:	4603      	mov	r3, r0
 8003328:	01db      	lsls	r3, r3, #7
 800332a:	4413      	add	r3, r2
 800332c:	4a1b      	ldr	r2, [pc, #108]	; (800339c <SSD1306_DrawPixel+0xb8>)
 800332e:	5cd3      	ldrb	r3, [r2, r3]
 8003330:	b25a      	sxtb	r2, r3
 8003332:	88bb      	ldrh	r3, [r7, #4]
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	2101      	movs	r1, #1
 800333a:	fa01 f303 	lsl.w	r3, r1, r3
 800333e:	b25b      	sxtb	r3, r3
 8003340:	4313      	orrs	r3, r2
 8003342:	b259      	sxtb	r1, r3
 8003344:	88fa      	ldrh	r2, [r7, #6]
 8003346:	4603      	mov	r3, r0
 8003348:	01db      	lsls	r3, r3, #7
 800334a:	4413      	add	r3, r2
 800334c:	b2c9      	uxtb	r1, r1
 800334e:	4a13      	ldr	r2, [pc, #76]	; (800339c <SSD1306_DrawPixel+0xb8>)
 8003350:	54d1      	strb	r1, [r2, r3]
 8003352:	e01d      	b.n	8003390 <SSD1306_DrawPixel+0xac>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003354:	88fa      	ldrh	r2, [r7, #6]
 8003356:	88bb      	ldrh	r3, [r7, #4]
 8003358:	08db      	lsrs	r3, r3, #3
 800335a:	b298      	uxth	r0, r3
 800335c:	4603      	mov	r3, r0
 800335e:	01db      	lsls	r3, r3, #7
 8003360:	4413      	add	r3, r2
 8003362:	4a0e      	ldr	r2, [pc, #56]	; (800339c <SSD1306_DrawPixel+0xb8>)
 8003364:	5cd3      	ldrb	r3, [r2, r3]
 8003366:	b25a      	sxtb	r2, r3
 8003368:	88bb      	ldrh	r3, [r7, #4]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	2101      	movs	r1, #1
 8003370:	fa01 f303 	lsl.w	r3, r1, r3
 8003374:	b25b      	sxtb	r3, r3
 8003376:	43db      	mvns	r3, r3
 8003378:	b25b      	sxtb	r3, r3
 800337a:	4013      	ands	r3, r2
 800337c:	b259      	sxtb	r1, r3
 800337e:	88fa      	ldrh	r2, [r7, #6]
 8003380:	4603      	mov	r3, r0
 8003382:	01db      	lsls	r3, r3, #7
 8003384:	4413      	add	r3, r2
 8003386:	b2c9      	uxtb	r1, r1
 8003388:	4a04      	ldr	r2, [pc, #16]	; (800339c <SSD1306_DrawPixel+0xb8>)
 800338a:	54d1      	strb	r1, [r2, r3]
 800338c:	e000      	b.n	8003390 <SSD1306_DrawPixel+0xac>
		return;
 800338e:	bf00      	nop
	}
}
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr
 8003398:	20000508 	.word	0x20000508
 800339c:	20000108 	.word	0x20000108

080033a0 <SSD1306_GotoXY>:

void SSD1306_GotoXY (uint16_t x, uint16_t y)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	460a      	mov	r2, r1
 80033aa:	80fb      	strh	r3, [r7, #6]
 80033ac:	4613      	mov	r3, r2
 80033ae:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80033b0:	4a05      	ldr	r2, [pc, #20]	; (80033c8 <SSD1306_GotoXY+0x28>)
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80033b6:	4a04      	ldr	r2, [pc, #16]	; (80033c8 <SSD1306_GotoXY+0x28>)
 80033b8:	88bb      	ldrh	r3, [r7, #4]
 80033ba:	8053      	strh	r3, [r2, #2]
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	20000508 	.word	0x20000508

080033cc <SSD1306_Putc>:

char SSD1306_Putc (char ch, FontDef_t *Font, SSD1306_COLOR_t color)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	6039      	str	r1, [r7, #0]
 80033d6:	71fb      	strb	r3, [r7, #7]
 80033d8:	4613      	mov	r3, r2
 80033da:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
	SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80033dc:	4b3a      	ldr	r3, [pc, #232]	; (80034c8 <SSD1306_Putc+0xfc>)
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	461a      	mov	r2, r3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	4413      	add	r3, r2
	if (
 80033e8:	2b7f      	cmp	r3, #127	; 0x7f
 80033ea:	dc07      	bgt.n	80033fc <SSD1306_Putc+0x30>
	SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight))
 80033ec:	4b36      	ldr	r3, [pc, #216]	; (80034c8 <SSD1306_Putc+0xfc>)
 80033ee:	885b      	ldrh	r3, [r3, #2]
 80033f0:	461a      	mov	r2, r3
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	785b      	ldrb	r3, [r3, #1]
 80033f6:	4413      	add	r3, r2
	SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80033f8:	2b3f      	cmp	r3, #63	; 0x3f
 80033fa:	dd01      	ble.n	8003400 <SSD1306_Putc+0x34>
	{
		/* Error */
		return 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	e05e      	b.n	80034be <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++)
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	e04b      	b.n	800349e <SSD1306_Putc+0xd2>
	{
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	3b20      	subs	r3, #32
 800340e:	6839      	ldr	r1, [r7, #0]
 8003410:	7849      	ldrb	r1, [r1, #1]
 8003412:	fb01 f303 	mul.w	r3, r1, r3
 8003416:	4619      	mov	r1, r3
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	440b      	add	r3, r1
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4413      	add	r3, r2
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++)
 8003424:	2300      	movs	r3, #0
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	e030      	b.n	800348c <SSD1306_Putc+0xc0>
		{
			if ((b << j) & 0x8000)
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d010      	beq.n	800345c <SSD1306_Putc+0x90>
			{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 800343a:	4b23      	ldr	r3, [pc, #140]	; (80034c8 <SSD1306_Putc+0xfc>)
 800343c:	881a      	ldrh	r2, [r3, #0]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	b29b      	uxth	r3, r3
 8003442:	4413      	add	r3, r2
 8003444:	b298      	uxth	r0, r3
 8003446:	4b20      	ldr	r3, [pc, #128]	; (80034c8 <SSD1306_Putc+0xfc>)
 8003448:	885a      	ldrh	r2, [r3, #2]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	b29b      	uxth	r3, r3
 800344e:	4413      	add	r3, r2
 8003450:	b29b      	uxth	r3, r3
 8003452:	79ba      	ldrb	r2, [r7, #6]
 8003454:	4619      	mov	r1, r3
 8003456:	f7ff ff45 	bl	80032e4 <SSD1306_DrawPixel>
 800345a:	e014      	b.n	8003486 <SSD1306_Putc+0xba>
						(SSD1306_COLOR_t) color);
			}
			else
			{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 800345c:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <SSD1306_Putc+0xfc>)
 800345e:	881a      	ldrh	r2, [r3, #0]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	b29b      	uxth	r3, r3
 8003464:	4413      	add	r3, r2
 8003466:	b298      	uxth	r0, r3
 8003468:	4b17      	ldr	r3, [pc, #92]	; (80034c8 <SSD1306_Putc+0xfc>)
 800346a:	885a      	ldrh	r2, [r3, #2]
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	b29b      	uxth	r3, r3
 8003470:	4413      	add	r3, r2
 8003472:	b299      	uxth	r1, r3
 8003474:	79bb      	ldrb	r3, [r7, #6]
 8003476:	2b00      	cmp	r3, #0
 8003478:	bf0c      	ite	eq
 800347a:	2301      	moveq	r3, #1
 800347c:	2300      	movne	r3, #0
 800347e:	b2db      	uxtb	r3, r3
 8003480:	461a      	mov	r2, r3
 8003482:	f7ff ff2f 	bl	80032e4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	3301      	adds	r3, #1
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	461a      	mov	r2, r3
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4293      	cmp	r3, r2
 8003496:	d3c8      	bcc.n	800342a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	3301      	adds	r3, #1
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	785b      	ldrb	r3, [r3, #1]
 80034a2:	461a      	mov	r2, r3
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d3ad      	bcc.n	8003406 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80034aa:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <SSD1306_Putc+0xfc>)
 80034ac:	881a      	ldrh	r2, [r3, #0]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	4413      	add	r3, r2
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <SSD1306_Putc+0xfc>)
 80034ba:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80034bc:	79fb      	ldrb	r3, [r7, #7]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000508 	.word	0x20000508

080034cc <SSD1306_Puts>:

char SSD1306_Puts (char *str, FontDef_t *Font, SSD1306_COLOR_t color)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	4613      	mov	r3, r2
 80034d8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str)
 80034da:	e012      	b.n	8003502 <SSD1306_Puts+0x36>
	{
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	79fa      	ldrb	r2, [r7, #7]
 80034e2:	68b9      	ldr	r1, [r7, #8]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff ff71 	bl	80033cc <SSD1306_Putc>
 80034ea:	4603      	mov	r3, r0
 80034ec:	461a      	mov	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d002      	beq.n	80034fc <SSD1306_Puts+0x30>
		{
			/* Return error */
			return *str;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	e008      	b.n	800350e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	3301      	adds	r3, #1
 8003500:	60fb      	str	r3, [r7, #12]
	while (*str)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1e8      	bne.n	80034dc <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	781b      	ldrb	r3, [r3, #0]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <SSD1306_Clear>:
		SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
	}
}

void SSD1306_Clear (void)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 800351a:	2000      	movs	r0, #0
 800351c:	f7ff feca 	bl	80032b4 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8003520:	f7ff fe9a 	bl	8003258 <SSD1306_UpdateScreen>
}
 8003524:	bf00      	nop
 8003526:	bd80      	pop	{r7, pc}

08003528 <ssd1306_I2C_Init>:
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init ()
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800352e:	4b07      	ldr	r3, [pc, #28]	; (800354c <ssd1306_I2C_Init+0x24>)
 8003530:	607b      	str	r3, [r7, #4]
	while (p > 0)
 8003532:	e002      	b.n	800353a <ssd1306_I2C_Init+0x12>
		p--;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3b01      	subs	r3, #1
 8003538:	607b      	str	r3, [r7, #4]
	while (p > 0)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1f9      	bne.n	8003534 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003540:	bf00      	nop
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr
 800354c:	0003d090 	.word	0x0003d090

08003550 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti (uint8_t address, uint8_t reg, uint8_t *data,
	uint16_t count)
{
 8003550:	b590      	push	{r4, r7, lr}
 8003552:	b0c7      	sub	sp, #284	; 0x11c
 8003554:	af02      	add	r7, sp, #8
 8003556:	4604      	mov	r4, r0
 8003558:	4608      	mov	r0, r1
 800355a:	4639      	mov	r1, r7
 800355c:	600a      	str	r2, [r1, #0]
 800355e:	4619      	mov	r1, r3
 8003560:	1dfb      	adds	r3, r7, #7
 8003562:	4622      	mov	r2, r4
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	1dbb      	adds	r3, r7, #6
 8003568:	4602      	mov	r2, r0
 800356a:	701a      	strb	r2, [r3, #0]
 800356c:	1d3b      	adds	r3, r7, #4
 800356e:	460a      	mov	r2, r1
 8003570:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8003572:	f107 030c 	add.w	r3, r7, #12
 8003576:	1dba      	adds	r2, r7, #6
 8003578:	7812      	ldrb	r2, [r2, #0]
 800357a:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < count; i++)
 800357c:	2300      	movs	r3, #0
 800357e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003582:	e010      	b.n	80035a6 <ssd1306_I2C_WriteMulti+0x56>
		dt[i + 1] = data[i];
 8003584:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003588:	463a      	mov	r2, r7
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	441a      	add	r2, r3
 800358e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003592:	3301      	adds	r3, #1
 8003594:	7811      	ldrb	r1, [r2, #0]
 8003596:	f107 020c 	add.w	r2, r7, #12
 800359a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < count; i++)
 800359c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80035a0:	3301      	adds	r3, #1
 80035a2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80035a6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	1d3a      	adds	r2, r7, #4
 80035ae:	8812      	ldrh	r2, [r2, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d8e7      	bhi.n	8003584 <ssd1306_I2C_WriteMulti+0x34>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count + 1, 10);
 80035b4:	1dfb      	adds	r3, r7, #7
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	b299      	uxth	r1, r3
 80035ba:	1d3b      	adds	r3, r7, #4
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	3301      	adds	r3, #1
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	f107 020c 	add.w	r2, r7, #12
 80035c6:	200a      	movs	r0, #10
 80035c8:	9000      	str	r0, [sp, #0]
 80035ca:	4804      	ldr	r0, [pc, #16]	; (80035dc <ssd1306_I2C_WriteMulti+0x8c>)
 80035cc:	f7fd fa26 	bl	8000a1c <HAL_I2C_Master_Transmit>
}
 80035d0:	bf00      	nop
 80035d2:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd90      	pop	{r4, r7, pc}
 80035da:	bf00      	nop
 80035dc:	2000054c 	.word	0x2000054c

080035e0 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write (uint8_t address, uint8_t reg, uint8_t data)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
 80035ea:	460b      	mov	r3, r1
 80035ec:	71bb      	strb	r3, [r7, #6]
 80035ee:	4613      	mov	r3, r2
 80035f0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80035f2:	79bb      	ldrb	r3, [r7, #6]
 80035f4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80035f6:	797b      	ldrb	r3, [r7, #5]
 80035f8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	b299      	uxth	r1, r3
 80035fe:	f107 020c 	add.w	r2, r7, #12
 8003602:	230a      	movs	r3, #10
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	2302      	movs	r3, #2
 8003608:	4803      	ldr	r0, [pc, #12]	; (8003618 <ssd1306_I2C_Write+0x38>)
 800360a:	f7fd fa07 	bl	8000a1c <HAL_I2C_Master_Transmit>
}
 800360e:	bf00      	nop
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	2000054c 	.word	0x2000054c

0800361c <print_inline>:
void print_inline (const uint8_t x, const uint8_t y, const char *str,
	const FontDef_t *Font, const SSD1306_COLOR_t color)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	60ba      	str	r2, [r7, #8]
 8003624:	607b      	str	r3, [r7, #4]
 8003626:	4603      	mov	r3, r0
 8003628:	73fb      	strb	r3, [r7, #15]
 800362a:	460b      	mov	r3, r1
 800362c:	73bb      	strb	r3, [r7, #14]
	SSD1306_GotoXY(x, y);
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	b29b      	uxth	r3, r3
 8003632:	7bba      	ldrb	r2, [r7, #14]
 8003634:	b292      	uxth	r2, r2
 8003636:	4611      	mov	r1, r2
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff feb1 	bl	80033a0 <SSD1306_GotoXY>
	SSD1306_Puts(str, Font, color);
 800363e:	7e3b      	ldrb	r3, [r7, #24]
 8003640:	461a      	mov	r2, r3
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	68b8      	ldr	r0, [r7, #8]
 8003646:	f7ff ff41 	bl	80034cc <SSD1306_Puts>
}
 800364a:	bf00      	nop
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <timer_init>:


/* Intialize the timer by assign the keypad button values and pressing values*/
void timer_init (const uint8_t *key_state_arr,
	const button_value_map_t *button_values_ext)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
	key_state_timer = key_state_arr;
 800365e:	4a05      	ldr	r2, [pc, #20]	; (8003674 <timer_init+0x20>)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6013      	str	r3, [r2, #0]
	button_values = button_values_ext;
 8003664:	4a04      	ldr	r2, [pc, #16]	; (8003678 <timer_init+0x24>)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	6013      	str	r3, [r2, #0]
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr
 8003674:	20000514 	.word	0x20000514
 8003678:	20000510 	.word	0x20000510

0800367c <timer>:

/* Deal with user to getting arguments while performing the time count.*/
void timer ()
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af02      	add	r7, sp, #8
	static uint8_t stage = 1;
	if (stage == 1)
 8003682:	4b52      	ldr	r3, [pc, #328]	; (80037cc <timer+0x150>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d129      	bne.n	80036de <timer+0x62>
	{
		/* Enter to stop watch mode.
		 * Update screen while working the timer. */
		SSD1306_Clear();
 800368a:	f7ff ff44 	bl	8003516 <SSD1306_Clear>
		char ticks[20];
		sprintf(ticks, "%d", timer_time);
 800368e:	4b50      	ldr	r3, [pc, #320]	; (80037d0 <timer+0x154>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	1d3b      	adds	r3, r7, #4
 8003696:	494f      	ldr	r1, [pc, #316]	; (80037d4 <timer+0x158>)
 8003698:	4618      	mov	r0, r3
 800369a:	f000 fbdd 	bl	8003e58 <siprintf>
		print_inline(50, 10, ticks, &Font_7x10, 1);
 800369e:	1d3a      	adds	r2, r7, #4
 80036a0:	2301      	movs	r3, #1
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	4b4c      	ldr	r3, [pc, #304]	; (80037d8 <timer+0x15c>)
 80036a6:	210a      	movs	r1, #10
 80036a8:	2032      	movs	r0, #50	; 0x32
 80036aa:	f7ff ffb7 	bl	800361c <print_inline>
		print_inline(10, 30, "A:Start B:Stop", &Font_7x10, 1);
 80036ae:	2301      	movs	r3, #1
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	4b49      	ldr	r3, [pc, #292]	; (80037d8 <timer+0x15c>)
 80036b4:	4a49      	ldr	r2, [pc, #292]	; (80037dc <timer+0x160>)
 80036b6:	211e      	movs	r1, #30
 80036b8:	200a      	movs	r0, #10
 80036ba:	f7ff ffaf 	bl	800361c <print_inline>
		print_inline(10, 50, "C:Reset D:M.menu", &Font_7x10, 1);
 80036be:	2301      	movs	r3, #1
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	4b45      	ldr	r3, [pc, #276]	; (80037d8 <timer+0x15c>)
 80036c4:	4a46      	ldr	r2, [pc, #280]	; (80037e0 <timer+0x164>)
 80036c6:	2132      	movs	r1, #50	; 0x32
 80036c8:	200a      	movs	r0, #10
 80036ca:	f7ff ffa7 	bl	800361c <print_inline>
		SSD1306_UpdateScreen();
 80036ce:	f7ff fdc3 	bl	8003258 <SSD1306_UpdateScreen>
		keypad_clear();
 80036d2:	f7ff fc5b 	bl	8002f8c <keypad_clear>
		stage = 2;
 80036d6:	4b3d      	ldr	r3, [pc, #244]	; (80037cc <timer+0x150>)
 80036d8:	2202      	movs	r2, #2
 80036da:	701a      	strb	r2, [r3, #0]
			stage = 1;
		}

	}

}
 80036dc:	e072      	b.n	80037c4 <timer+0x148>
	else if (stage == 2)
 80036de:	4b3b      	ldr	r3, [pc, #236]	; (80037cc <timer+0x150>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d16e      	bne.n	80037c4 <timer+0x148>
		if (key_state_timer[button_values->A] == 1)
 80036e6:	4b3f      	ldr	r3, [pc, #252]	; (80037e4 <timer+0x168>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a3f      	ldr	r2, [pc, #252]	; (80037e8 <timer+0x16c>)
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	7b12      	ldrb	r2, [r2, #12]
 80036f0:	4413      	add	r3, r2
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d108      	bne.n	800370a <timer+0x8e>
			timer_ticks = 0;
 80036f8:	4b3c      	ldr	r3, [pc, #240]	; (80037ec <timer+0x170>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
			timer_state = 1;
 80036fe:	4b3c      	ldr	r3, [pc, #240]	; (80037f0 <timer+0x174>)
 8003700:	2201      	movs	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]
			keypad_clear();
 8003704:	f7ff fc42 	bl	8002f8c <keypad_clear>
 8003708:	e037      	b.n	800377a <timer+0xfe>
		else if (key_state_timer[button_values->B] == 1)
 800370a:	4b36      	ldr	r3, [pc, #216]	; (80037e4 <timer+0x168>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a36      	ldr	r2, [pc, #216]	; (80037e8 <timer+0x16c>)
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	7b52      	ldrb	r2, [r2, #13]
 8003714:	4413      	add	r3, r2
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d105      	bne.n	8003728 <timer+0xac>
			timer_state = 0;
 800371c:	4b34      	ldr	r3, [pc, #208]	; (80037f0 <timer+0x174>)
 800371e:	2200      	movs	r2, #0
 8003720:	701a      	strb	r2, [r3, #0]
			keypad_clear();
 8003722:	f7ff fc33 	bl	8002f8c <keypad_clear>
 8003726:	e028      	b.n	800377a <timer+0xfe>
		else if (key_state_timer[button_values->C] == 1)
 8003728:	4b2e      	ldr	r3, [pc, #184]	; (80037e4 <timer+0x168>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a2e      	ldr	r2, [pc, #184]	; (80037e8 <timer+0x16c>)
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	7b92      	ldrb	r2, [r2, #14]
 8003732:	4413      	add	r3, r2
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d105      	bne.n	8003746 <timer+0xca>
			timer_state = 2;
 800373a:	4b2d      	ldr	r3, [pc, #180]	; (80037f0 <timer+0x174>)
 800373c:	2202      	movs	r2, #2
 800373e:	701a      	strb	r2, [r3, #0]
			keypad_clear();
 8003740:	f7ff fc24 	bl	8002f8c <keypad_clear>
 8003744:	e019      	b.n	800377a <timer+0xfe>
		else if (key_state_timer[button_values->D] == 1)
 8003746:	4b27      	ldr	r3, [pc, #156]	; (80037e4 <timer+0x168>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a27      	ldr	r2, [pc, #156]	; (80037e8 <timer+0x16c>)
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	7bd2      	ldrb	r2, [r2, #15]
 8003750:	4413      	add	r3, r2
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d110      	bne.n	800377a <timer+0xfe>
			current_mode = MAIN_MENU;
 8003758:	4b26      	ldr	r3, [pc, #152]	; (80037f4 <timer+0x178>)
 800375a:	2200      	movs	r2, #0
 800375c:	701a      	strb	r2, [r3, #0]
			stage = 1;
 800375e:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <timer+0x150>)
 8003760:	2201      	movs	r2, #1
 8003762:	701a      	strb	r2, [r3, #0]
			timer_time = 0;
 8003764:	4b1a      	ldr	r3, [pc, #104]	; (80037d0 <timer+0x154>)
 8003766:	2200      	movs	r2, #0
 8003768:	701a      	strb	r2, [r3, #0]
			timer_ticks = 0;
 800376a:	4b20      	ldr	r3, [pc, #128]	; (80037ec <timer+0x170>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
			timer_state = 0;
 8003770:	4b1f      	ldr	r3, [pc, #124]	; (80037f0 <timer+0x174>)
 8003772:	2200      	movs	r2, #0
 8003774:	701a      	strb	r2, [r3, #0]
			keypad_clear();
 8003776:	f7ff fc09 	bl	8002f8c <keypad_clear>
		if (timer_state == 1)
 800377a:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <timer+0x174>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d110      	bne.n	80037a4 <timer+0x128>
			if (timer_ticks >= 200)
 8003782:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <timer+0x170>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2bc7      	cmp	r3, #199	; 0xc7
 8003788:	d91c      	bls.n	80037c4 <timer+0x148>
				timer_time++;
 800378a:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <timer+0x154>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	3301      	adds	r3, #1
 8003790:	b2da      	uxtb	r2, r3
 8003792:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <timer+0x154>)
 8003794:	701a      	strb	r2, [r3, #0]
				timer_ticks = 0;
 8003796:	4b15      	ldr	r3, [pc, #84]	; (80037ec <timer+0x170>)
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
				stage = 1;
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <timer+0x150>)
 800379e:	2201      	movs	r2, #1
 80037a0:	701a      	strb	r2, [r3, #0]
}
 80037a2:	e00f      	b.n	80037c4 <timer+0x148>
		else if (timer_state == 2)
 80037a4:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <timer+0x174>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d10b      	bne.n	80037c4 <timer+0x148>
			timer_time = 0;
 80037ac:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <timer+0x154>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	701a      	strb	r2, [r3, #0]
			timer_ticks = 0;
 80037b2:	4b0e      	ldr	r3, [pc, #56]	; (80037ec <timer+0x170>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
			timer_state = 0;
 80037b8:	4b0d      	ldr	r3, [pc, #52]	; (80037f0 <timer+0x174>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]
			stage = 1;
 80037be:	4b03      	ldr	r3, [pc, #12]	; (80037cc <timer+0x150>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	701a      	strb	r2, [r3, #0]
}
 80037c4:	bf00      	nop
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000034 	.word	0x20000034
 80037d0:	20000544 	.word	0x20000544
 80037d4:	08004794 	.word	0x08004794
 80037d8:	2000002c 	.word	0x2000002c
 80037dc:	08004798 	.word	0x08004798
 80037e0:	080047a8 	.word	0x080047a8
 80037e4:	20000514 	.word	0x20000514
 80037e8:	20000510 	.word	0x20000510
 80037ec:	20000548 	.word	0x20000548
 80037f0:	20000545 	.word	0x20000545
 80037f4:	2000053c 	.word	0x2000053c

080037f8 <timer_ticks_increment>:

/* Increment at every 5 milisecond in timer mode. */
void timer_ticks_increment ()
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
	if (timer_state == 1)
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <timer_ticks_increment+0x20>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d104      	bne.n	800380e <timer_ticks_increment+0x16>
	{
		timer_ticks++;
 8003804:	4b05      	ldr	r3, [pc, #20]	; (800381c <timer_ticks_increment+0x24>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3301      	adds	r3, #1
 800380a:	4a04      	ldr	r2, [pc, #16]	; (800381c <timer_ticks_increment+0x24>)
 800380c:	6013      	str	r3, [r2, #0]
	}
}
 800380e:	bf00      	nop
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	20000545 	.word	0x20000545
 800381c:	20000548 	.word	0x20000548

08003820 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main (void)
{
 8003820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003822:	b08b      	sub	sp, #44	; 0x2c
 8003824:	af0a      	add	r7, sp, #40	; 0x28
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003826:	f7fc fc91 	bl	800014c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800382a:	f000 f853 	bl	80038d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800382e:	f000 f913 	bl	8003a58 <MX_GPIO_Init>
	MX_I2C1_Init();
 8003832:	f000 f895 	bl	8003960 <MX_I2C1_Init>
	MX_TIM2_Init();
 8003836:	f000 f8c1 	bl	80039bc <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	SSD1306_Init();
 800383a:	f7ff fc49 	bl	80030d0 <SSD1306_Init>
	keypad_init(g_key_states_arr, g_keypad_cfgparam_ext, &g_keypad_val);
 800383e:	4e20      	ldr	r6, [pc, #128]	; (80038c0 <main+0xa0>)
 8003840:	4b20      	ldr	r3, [pc, #128]	; (80038c4 <main+0xa4>)
 8003842:	9309      	str	r3, [sp, #36]	; 0x24
 8003844:	466d      	mov	r5, sp
 8003846:	f106 040c 	add.w	r4, r6, #12
 800384a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800384c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800384e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003850:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	602b      	str	r3, [r5, #0]
 8003856:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800385a:	481b      	ldr	r0, [pc, #108]	; (80038c8 <main+0xa8>)
 800385c:	f7fe ff20 	bl	80026a0 <keypad_init>
	HAL_TIM_Base_Start_IT(&htim2);
 8003860:	481a      	ldr	r0, [pc, #104]	; (80038cc <main+0xac>)
 8003862:	f7fe f965 	bl	8001b30 <HAL_TIM_Base_Start_IT>
	menu_init(g_key_states_arr, &g_keypad_val);
 8003866:	4917      	ldr	r1, [pc, #92]	; (80038c4 <main+0xa4>)
 8003868:	4817      	ldr	r0, [pc, #92]	; (80038c8 <main+0xa8>)
 800386a:	f7ff fba9 	bl	8002fc0 <menu_init>
	adder_init(g_key_states_arr, &g_keypad_val);
 800386e:	4915      	ldr	r1, [pc, #84]	; (80038c4 <main+0xa4>)
 8003870:	4815      	ldr	r0, [pc, #84]	; (80038c8 <main+0xa8>)
 8003872:	f7fe fd07 	bl	8002284 <adder_init>
	counter_init(g_key_states_arr, &g_keypad_val);
 8003876:	4913      	ldr	r1, [pc, #76]	; (80038c4 <main+0xa4>)
 8003878:	4813      	ldr	r0, [pc, #76]	; (80038c8 <main+0xa8>)
 800387a:	f7fe fe61 	bl	8002540 <counter_init>
	timer_init(g_key_states_arr, &g_keypad_val);
 800387e:	4911      	ldr	r1, [pc, #68]	; (80038c4 <main+0xa4>)
 8003880:	4811      	ldr	r0, [pc, #68]	; (80038c8 <main+0xa8>)
 8003882:	f7ff fee7 	bl	8003654 <timer_init>
	while (1)
	{
		/* This switch block handeling the ui interface by swithcing between modes of
		 * operations. We can run this block using timer interrupt for more efficent.
		 */
		switch (current_mode)
 8003886:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <main+0xb0>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b03      	cmp	r3, #3
 800388c:	d816      	bhi.n	80038bc <main+0x9c>
 800388e:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <main+0x74>)
 8003890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003894:	080038a5 	.word	0x080038a5
 8003898:	080038ab 	.word	0x080038ab
 800389c:	080038b1 	.word	0x080038b1
 80038a0:	080038b7 	.word	0x080038b7
		{
			case (MAIN_MENU):
				menu_select();
 80038a4:	f7ff fba0 	bl	8002fe8 <menu_select>
				break;
 80038a8:	e009      	b.n	80038be <main+0x9e>
			case (ADDER):
				adder();
 80038aa:	f7fe fcff 	bl	80022ac <adder>
				break;
 80038ae:	e006      	b.n	80038be <main+0x9e>
			case (COUNTER):
				counter();
 80038b0:	f7fe fe5a 	bl	8002568 <counter>
				break;
 80038b4:	e003      	b.n	80038be <main+0x9e>
			case (TIMER):
				timer();
 80038b6:	f7ff fee1 	bl	800367c <timer>
				break;
 80038ba:	e000      	b.n	80038be <main+0x9e>
			default:
				break;
 80038bc:	bf00      	nop
		switch (current_mode)
 80038be:	e7e2      	b.n	8003886 <main+0x66>
 80038c0:	08004f28 	.word	0x08004f28
 80038c4:	200005a0 	.word	0x200005a0
 80038c8:	20000518 	.word	0x20000518
 80038cc:	200005b0 	.word	0x200005b0
 80038d0:	2000053c 	.word	0x2000053c

080038d4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config (void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b090      	sub	sp, #64	; 0x40
 80038d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80038da:	f107 0318 	add.w	r3, r7, #24
 80038de:	2228      	movs	r2, #40	; 0x28
 80038e0:	2100      	movs	r1, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fab0 	bl	8003e48 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80038e8:	1d3b      	adds	r3, r7, #4
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	605a      	str	r2, [r3, #4]
 80038f0:	609a      	str	r2, [r3, #8]
 80038f2:	60da      	str	r2, [r3, #12]
 80038f4:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80038f6:	2301      	movs	r3, #1
 80038f8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038fe:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003900:	2300      	movs	r3, #0
 8003902:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003904:	2301      	movs	r3, #1
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003908:	2302      	movs	r3, #2
 800390a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800390c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003910:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003912:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003916:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003918:	f107 0318 	add.w	r3, r7, #24
 800391c:	4618      	mov	r0, r3
 800391e:	f7fd fcb1 	bl	8001284 <HAL_RCC_OscConfig>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <SystemClock_Config+0x58>
	{
		Error_Handler();
 8003928:	f000 f936 	bl	8003b98 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800392c:	230f      	movs	r3, #15
 800392e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003930:	2302      	movs	r3, #2
 8003932:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800393c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003942:	1d3b      	adds	r3, r7, #4
 8003944:	2102      	movs	r1, #2
 8003946:	4618      	mov	r0, r3
 8003948:	f7fd ff1c 	bl	8001784 <HAL_RCC_ClockConfig>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <SystemClock_Config+0x82>
	{
		Error_Handler();
 8003952:	f000 f921 	bl	8003b98 <Error_Handler>
	}

}
 8003956:	bf00      	nop
 8003958:	3740      	adds	r7, #64	; 0x40
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init (void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003964:	4b12      	ldr	r3, [pc, #72]	; (80039b0 <MX_I2C1_Init+0x50>)
 8003966:	4a13      	ldr	r2, [pc, #76]	; (80039b4 <MX_I2C1_Init+0x54>)
 8003968:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800396a:	4b11      	ldr	r3, [pc, #68]	; (80039b0 <MX_I2C1_Init+0x50>)
 800396c:	4a12      	ldr	r2, [pc, #72]	; (80039b8 <MX_I2C1_Init+0x58>)
 800396e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003970:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <MX_I2C1_Init+0x50>)
 8003972:	2200      	movs	r2, #0
 8003974:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8003976:	4b0e      	ldr	r3, [pc, #56]	; (80039b0 <MX_I2C1_Init+0x50>)
 8003978:	2200      	movs	r2, #0
 800397a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800397c:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <MX_I2C1_Init+0x50>)
 800397e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003982:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003984:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <MX_I2C1_Init+0x50>)
 8003986:	2200      	movs	r2, #0
 8003988:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800398a:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <MX_I2C1_Init+0x50>)
 800398c:	2200      	movs	r2, #0
 800398e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003990:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <MX_I2C1_Init+0x50>)
 8003992:	2200      	movs	r2, #0
 8003994:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003996:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <MX_I2C1_Init+0x50>)
 8003998:	2200      	movs	r2, #0
 800399a:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800399c:	4804      	ldr	r0, [pc, #16]	; (80039b0 <MX_I2C1_Init+0x50>)
 800399e:	f7fc fef9 	bl	8000794 <HAL_I2C_Init>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80039a8:	f000 f8f6 	bl	8003b98 <Error_Handler>

	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80039ac:	bf00      	nop
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	2000054c 	.word	0x2000054c
 80039b4:	40005400 	.word	0x40005400
 80039b8:	00061a80 	.word	0x00061a80

080039bc <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init (void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig =
 80039c2:	f107 0308 	add.w	r3, r7, #8
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	605a      	str	r2, [r3, #4]
 80039cc:	609a      	str	r2, [r3, #8]
 80039ce:	60da      	str	r2, [r3, #12]
	{ 0 };
	TIM_MasterConfigTypeDef sMasterConfig =
 80039d0:	463b      	mov	r3, r7
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	605a      	str	r2, [r3, #4]
	{ 0 };

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80039d8:	4b1e      	ldr	r3, [pc, #120]	; (8003a54 <MX_TIM2_Init+0x98>)
 80039da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039de:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1000;
 80039e0:	4b1c      	ldr	r3, [pc, #112]	; (8003a54 <MX_TIM2_Init+0x98>)
 80039e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039e6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039e8:	4b1a      	ldr	r3, [pc, #104]	; (8003a54 <MX_TIM2_Init+0x98>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 360;
 80039ee:	4b19      	ldr	r3, [pc, #100]	; (8003a54 <MX_TIM2_Init+0x98>)
 80039f0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80039f4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039f6:	4b17      	ldr	r3, [pc, #92]	; (8003a54 <MX_TIM2_Init+0x98>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039fc:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <MX_TIM2_Init+0x98>)
 80039fe:	2280      	movs	r2, #128	; 0x80
 8003a00:	619a      	str	r2, [r3, #24]

	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a02:	4814      	ldr	r0, [pc, #80]	; (8003a54 <MX_TIM2_Init+0x98>)
 8003a04:	f7fe f844 	bl	8001a90 <HAL_TIM_Base_Init>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 8003a0e:	f000 f8c3 	bl	8003b98 <Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a16:	60bb      	str	r3, [r7, #8]

	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a18:	f107 0308 	add.w	r3, r7, #8
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	480d      	ldr	r0, [pc, #52]	; (8003a54 <MX_TIM2_Init+0x98>)
 8003a20:	f7fe f9e0 	bl	8001de4 <HAL_TIM_ConfigClockSource>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 8003a2a:	f000 f8b5 	bl	8003b98 <Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a32:	2300      	movs	r3, #0
 8003a34:	607b      	str	r3, [r7, #4]

	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a36:	463b      	mov	r3, r7
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4806      	ldr	r0, [pc, #24]	; (8003a54 <MX_TIM2_Init+0x98>)
 8003a3c:	f7fe fbb2 	bl	80021a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8003a46:	f000 f8a7 	bl	8003b98 <Error_Handler>

	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8003a4a:	bf00      	nop
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	200005b0 	.word	0x200005b0

08003a58 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init (void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8003a5e:	f107 0310 	add.w	r3, r7, #16
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	605a      	str	r2, [r3, #4]
 8003a68:	609a      	str	r2, [r3, #8]
 8003a6a:	60da      	str	r2, [r3, #12]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003a6c:	4b2b      	ldr	r3, [pc, #172]	; (8003b1c <MX_GPIO_Init+0xc4>)
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	4a2a      	ldr	r2, [pc, #168]	; (8003b1c <MX_GPIO_Init+0xc4>)
 8003a72:	f043 0320 	orr.w	r3, r3, #32
 8003a76:	6193      	str	r3, [r2, #24]
 8003a78:	4b28      	ldr	r3, [pc, #160]	; (8003b1c <MX_GPIO_Init+0xc4>)
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003a84:	4b25      	ldr	r3, [pc, #148]	; (8003b1c <MX_GPIO_Init+0xc4>)
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	4a24      	ldr	r2, [pc, #144]	; (8003b1c <MX_GPIO_Init+0xc4>)
 8003a8a:	f043 0304 	orr.w	r3, r3, #4
 8003a8e:	6193      	str	r3, [r2, #24]
 8003a90:	4b22      	ldr	r3, [pc, #136]	; (8003b1c <MX_GPIO_Init+0xc4>)
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003a9c:	4b1f      	ldr	r3, [pc, #124]	; (8003b1c <MX_GPIO_Init+0xc4>)
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	4a1e      	ldr	r2, [pc, #120]	; (8003b1c <MX_GPIO_Init+0xc4>)
 8003aa2:	f043 0308 	orr.w	r3, r3, #8
 8003aa6:	6193      	str	r3, [r2, #24]
 8003aa8:	4b1c      	ldr	r3, [pc, #112]	; (8003b1c <MX_GPIO_Init+0xc4>)
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	607b      	str	r3, [r7, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8003aba:	4819      	ldr	r0, [pc, #100]	; (8003b20 <MX_GPIO_Init+0xc8>)
 8003abc:	f7fc fe51 	bl	8000762 <HAL_GPIO_WritePin>
	GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PA0 PA1 PA2 PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3;
 8003ac0:	230f      	movs	r3, #15
 8003ac2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003acc:	f107 0310 	add.w	r3, r7, #16
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4813      	ldr	r0, [pc, #76]	; (8003b20 <MX_GPIO_Init+0xc8>)
 8003ad4:	f7fc fcaa 	bl	800042c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA4 PA5 PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8003ad8:	23f0      	movs	r3, #240	; 0xf0
 8003ada:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003adc:	2301      	movs	r3, #1
 8003ade:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae8:	f107 0310 	add.w	r3, r7, #16
 8003aec:	4619      	mov	r1, r3
 8003aee:	480c      	ldr	r0, [pc, #48]	; (8003b20 <MX_GPIO_Init+0xc8>)
 8003af0:	f7fc fc9c 	bl	800042c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003af8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003afa:	2301      	movs	r3, #1
 8003afc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b02:	2302      	movs	r3, #2
 8003b04:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b06:	f107 0310 	add.w	r3, r7, #16
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4804      	ldr	r0, [pc, #16]	; (8003b20 <MX_GPIO_Init+0xc8>)
 8003b0e:	f7fc fc8d 	bl	800042c <HAL_GPIO_Init>

}
 8003b12:	bf00      	nop
 8003b14:	3720      	adds	r7, #32
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40010800 	.word	0x40010800

08003b24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
	g_sys_ticks++;
 8003b2c:	4b17      	ldr	r3, [pc, #92]	; (8003b8c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3301      	adds	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	4b15      	ldr	r3, [pc, #84]	; (8003b8c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003b38:	801a      	strh	r2, [r3, #0]

	if (g_sys_ticks == g_trigger_level) // Each 5msec checking button state
 8003b3a:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d119      	bne.n	8003b7e <HAL_TIM_PeriodElapsedCallback+0x5a>
	{
		keypad_scan();
 8003b4a:	f7fe fddb 	bl	8002704 <keypad_scan>
		/* When button pressed stop checking for some time(to avoid debouncing errors).
		 * WARNING:the trigger level values are set according to the human sensitivity,
		 * changing these values causing unpredectable results due to debounsing.
		 */

		for (uint8_t i = 0; i <= 15; i++)
 8003b4e:	2300      	movs	r3, #0
 8003b50:	73fb      	strb	r3, [r7, #15]
 8003b52:	e00e      	b.n	8003b72 <HAL_TIM_PeriodElapsedCallback+0x4e>
		{
			if (g_key_states_arr[i] == 1)
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	4a0f      	ldr	r2, [pc, #60]	; (8003b94 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003b58:	5cd3      	ldrb	r3, [r2, r3]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d103      	bne.n	8003b66 <HAL_TIM_PeriodElapsedCallback+0x42>
			{
				g_trigger_level = 50;
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003b60:	2232      	movs	r2, #50	; 0x32
 8003b62:	801a      	strh	r2, [r3, #0]
				break;
 8003b64:	e008      	b.n	8003b78 <HAL_TIM_PeriodElapsedCallback+0x54>
			}
			g_trigger_level = 5;
 8003b66:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003b68:	2205      	movs	r2, #5
 8003b6a:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i <= 15; i++)
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	2b0f      	cmp	r3, #15
 8003b76:	d9ed      	bls.n	8003b54 <HAL_TIM_PeriodElapsedCallback+0x30>
		}

		g_sys_ticks = 0;
 8003b78:	4b04      	ldr	r3, [pc, #16]	; (8003b8c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	801a      	strh	r2, [r3, #0]
	}

	/* This fucntion used for timer feature. */
	timer_ticks_increment();
 8003b7e:	f7ff fe3b 	bl	80037f8 <timer_ticks_increment>

}
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000528 	.word	0x20000528
 8003b90:	20000036 	.word	0x20000036
 8003b94:	20000518 	.word	0x20000518

08003b98 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler (void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
 \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq (void)
{
	__ASM volatile ("cpsid i" : : : "memory");
 8003b9c:	b672      	cpsid	i
}
 8003b9e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	while (1)
 8003ba0:	e7fe      	b.n	8003ba0 <Error_Handler+0x8>
	...

08003ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit (void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_AFIO_CLK_ENABLE();
 8003baa:	4b15      	ldr	r3, [pc, #84]	; (8003c00 <HAL_MspInit+0x5c>)
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	4a14      	ldr	r2, [pc, #80]	; (8003c00 <HAL_MspInit+0x5c>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	6193      	str	r3, [r2, #24]
 8003bb6:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <HAL_MspInit+0x5c>)
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_PWR_CLK_ENABLE();
 8003bc2:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <HAL_MspInit+0x5c>)
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	4a0e      	ldr	r2, [pc, #56]	; (8003c00 <HAL_MspInit+0x5c>)
 8003bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	61d3      	str	r3, [r2, #28]
 8003bce:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <HAL_MspInit+0x5c>)
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	607b      	str	r3, [r7, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]

	/* System interrupt init*/

	/** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
	 */
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003bda:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <HAL_MspInit+0x60>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <HAL_MspInit+0x60>)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6053      	str	r3, [r2, #4]

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8003bf6:	bf00      	nop
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40010000 	.word	0x40010000

08003c08 <HAL_I2C_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit (I2C_HandleTypeDef *hi2c)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8003c10:	f107 0310 	add.w	r3, r7, #16
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	605a      	str	r2, [r3, #4]
 8003c1a:	609a      	str	r2, [r3, #8]
 8003c1c:	60da      	str	r2, [r3, #12]
	{ 0 };
	if (hi2c->Instance == I2C1)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a15      	ldr	r2, [pc, #84]	; (8003c78 <HAL_I2C_MspInit+0x70>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d123      	bne.n	8003c70 <HAL_I2C_MspInit+0x68>
	{
		/* USER CODE BEGIN I2C1_MspInit 0 */

		/* USER CODE END I2C1_MspInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8003c28:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <HAL_I2C_MspInit+0x74>)
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	4a13      	ldr	r2, [pc, #76]	; (8003c7c <HAL_I2C_MspInit+0x74>)
 8003c2e:	f043 0308 	orr.w	r3, r3, #8
 8003c32:	6193      	str	r3, [r2, #24]
 8003c34:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <HAL_I2C_MspInit+0x74>)
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
		/**I2C1 GPIO Configuration
		 PB6     ------> I2C1_SCL
		 PB7     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8003c40:	23c0      	movs	r3, #192	; 0xc0
 8003c42:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c44:	2312      	movs	r3, #18
 8003c46:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c4c:	f107 0310 	add.w	r3, r7, #16
 8003c50:	4619      	mov	r1, r3
 8003c52:	480b      	ldr	r0, [pc, #44]	; (8003c80 <HAL_I2C_MspInit+0x78>)
 8003c54:	f7fc fbea 	bl	800042c <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8003c58:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <HAL_I2C_MspInit+0x74>)
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	4a07      	ldr	r2, [pc, #28]	; (8003c7c <HAL_I2C_MspInit+0x74>)
 8003c5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c62:	61d3      	str	r3, [r2, #28]
 8003c64:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <HAL_I2C_MspInit+0x74>)
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}

}
 8003c70:	bf00      	nop
 8003c72:	3720      	adds	r7, #32
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40005400 	.word	0x40005400
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	40010c00 	.word	0x40010c00

08003c84 <HAL_TIM_Base_MspInit>:
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit (TIM_HandleTypeDef *htim_base)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM2)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c94:	d113      	bne.n	8003cbe <HAL_TIM_Base_MspInit+0x3a>
	{
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <HAL_TIM_Base_MspInit+0x44>)
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	4a0b      	ldr	r2, [pc, #44]	; (8003cc8 <HAL_TIM_Base_MspInit+0x44>)
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	61d3      	str	r3, [r2, #28]
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_TIM_Base_MspInit+0x44>)
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	68fb      	ldr	r3, [r7, #12]
		/* TIM2 interrupt Init */
		HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003cae:	2200      	movs	r2, #0
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	201c      	movs	r0, #28
 8003cb4:	f7fc fb83 	bl	80003be <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003cb8:	201c      	movs	r0, #28
 8003cba:	f7fc fb9c 	bl	80003f6 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM2_MspInit 1 */

		/* USER CODE END TIM2_MspInit 1 */
	}

}
 8003cbe:	bf00      	nop
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40021000 	.word	0x40021000

08003ccc <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler (void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003cd0:	e7fe      	b.n	8003cd0 <NMI_Handler+0x4>

08003cd2 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler (void)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8003cd6:	e7fe      	b.n	8003cd6 <HardFault_Handler+0x4>

08003cd8 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler (void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8003cdc:	e7fe      	b.n	8003cdc <MemManage_Handler+0x4>

08003cde <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler (void)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8003ce2:	e7fe      	b.n	8003ce2 <BusFault_Handler+0x4>

08003ce4 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler (void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8003ce8:	e7fe      	b.n	8003ce8 <UsageFault_Handler+0x4>

08003cea <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler (void)
{
 8003cea:	b480      	push	{r7}
 8003cec:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8003cee:	bf00      	nop
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler (void)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cfa:	bf00      	nop
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr

08003d02 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler (void)
{
 8003d02:	b480      	push	{r7}
 8003d04:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8003d06:	bf00      	nop
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr

08003d0e <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler (void)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8003d12:	f7fc fa61 	bl	80001d8 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */
	//SysTick_CallBack();
	/* USER CODE END SysTick_IRQn 1 */
}
 8003d16:	bf00      	nop
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler (void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8003d20:	4802      	ldr	r0, [pc, #8]	; (8003d2c <TIM2_IRQHandler+0x10>)
 8003d22:	f7fd ff57 	bl	8001bd4 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 8003d26:	bf00      	nop
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	200005b0 	.word	0x200005b0

08003d30 <_sbrk>:
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void*
_sbrk (ptrdiff_t incr)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003d38:	4a14      	ldr	r2, [pc, #80]	; (8003d8c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8003d3a:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	617b      	str	r3, [r7, #20]
	const uint8_t * max_heap = (uint8_t*) stack_limit;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	613b      	str	r3, [r7, #16]
	uint8_t * prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end)
 8003d44:	4b13      	ldr	r3, [pc, #76]	; (8003d94 <_sbrk+0x64>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d102      	bne.n	8003d52 <_sbrk+0x22>
	{
		__sbrk_heap_end = &_end;
 8003d4c:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <_sbrk+0x64>)
 8003d4e:	4a12      	ldr	r2, [pc, #72]	; (8003d98 <_sbrk+0x68>)
 8003d50:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap)
 8003d52:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <_sbrk+0x64>)
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4413      	add	r3, r2
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d207      	bcs.n	8003d70 <_sbrk+0x40>
	{
		errno = ENOMEM;
 8003d60:	f000 f848 	bl	8003df4 <__errno>
 8003d64:	4603      	mov	r3, r0
 8003d66:	220c      	movs	r2, #12
 8003d68:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8003d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6e:	e009      	b.n	8003d84 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003d70:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <_sbrk+0x64>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003d76:	4b07      	ldr	r3, [pc, #28]	; (8003d94 <_sbrk+0x64>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	4a05      	ldr	r2, [pc, #20]	; (8003d94 <_sbrk+0x64>)
 8003d80:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003d82:	68fb      	ldr	r3, [r7, #12]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	20005000 	.word	0x20005000
 8003d90:	00000400 	.word	0x00000400
 8003d94:	2000052c 	.word	0x2000052c
 8003d98:	20000608 	.word	0x20000608

08003d9c <SystemInit>:
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit (void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003da0:	bf00      	nop
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr

08003da8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003da8:	480c      	ldr	r0, [pc, #48]	; (8003ddc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003daa:	490d      	ldr	r1, [pc, #52]	; (8003de0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003dac:	4a0d      	ldr	r2, [pc, #52]	; (8003de4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003db0:	e002      	b.n	8003db8 <LoopCopyDataInit>

08003db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003db6:	3304      	adds	r3, #4

08003db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003dbc:	d3f9      	bcc.n	8003db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dbe:	4a0a      	ldr	r2, [pc, #40]	; (8003de8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003dc0:	4c0a      	ldr	r4, [pc, #40]	; (8003dec <LoopFillZerobss+0x22>)
  movs r3, #0
 8003dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dc4:	e001      	b.n	8003dca <LoopFillZerobss>

08003dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003dc8:	3204      	adds	r2, #4

08003dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003dcc:	d3fb      	bcc.n	8003dc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003dce:	f7ff ffe5 	bl	8003d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dd2:	f000 f815 	bl	8003e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003dd6:	f7ff fd23 	bl	8003820 <main>
  bx lr
 8003dda:	4770      	bx	lr
  ldr r0, =_sdata
 8003ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003de0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8003de4:	08004fac 	.word	0x08004fac
  ldr r2, =_sbss
 8003de8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8003dec:	20000608 	.word	0x20000608

08003df0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003df0:	e7fe      	b.n	8003df0 <ADC1_2_IRQHandler>
	...

08003df4 <__errno>:
 8003df4:	4b01      	ldr	r3, [pc, #4]	; (8003dfc <__errno+0x8>)
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	2000003c 	.word	0x2000003c

08003e00 <__libc_init_array>:
 8003e00:	b570      	push	{r4, r5, r6, lr}
 8003e02:	2600      	movs	r6, #0
 8003e04:	4d0c      	ldr	r5, [pc, #48]	; (8003e38 <__libc_init_array+0x38>)
 8003e06:	4c0d      	ldr	r4, [pc, #52]	; (8003e3c <__libc_init_array+0x3c>)
 8003e08:	1b64      	subs	r4, r4, r5
 8003e0a:	10a4      	asrs	r4, r4, #2
 8003e0c:	42a6      	cmp	r6, r4
 8003e0e:	d109      	bne.n	8003e24 <__libc_init_array+0x24>
 8003e10:	f000 fc5c 	bl	80046cc <_init>
 8003e14:	2600      	movs	r6, #0
 8003e16:	4d0a      	ldr	r5, [pc, #40]	; (8003e40 <__libc_init_array+0x40>)
 8003e18:	4c0a      	ldr	r4, [pc, #40]	; (8003e44 <__libc_init_array+0x44>)
 8003e1a:	1b64      	subs	r4, r4, r5
 8003e1c:	10a4      	asrs	r4, r4, #2
 8003e1e:	42a6      	cmp	r6, r4
 8003e20:	d105      	bne.n	8003e2e <__libc_init_array+0x2e>
 8003e22:	bd70      	pop	{r4, r5, r6, pc}
 8003e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e28:	4798      	blx	r3
 8003e2a:	3601      	adds	r6, #1
 8003e2c:	e7ee      	b.n	8003e0c <__libc_init_array+0xc>
 8003e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e32:	4798      	blx	r3
 8003e34:	3601      	adds	r6, #1
 8003e36:	e7f2      	b.n	8003e1e <__libc_init_array+0x1e>
 8003e38:	08004fa4 	.word	0x08004fa4
 8003e3c:	08004fa4 	.word	0x08004fa4
 8003e40:	08004fa4 	.word	0x08004fa4
 8003e44:	08004fa8 	.word	0x08004fa8

08003e48 <memset>:
 8003e48:	4603      	mov	r3, r0
 8003e4a:	4402      	add	r2, r0
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d100      	bne.n	8003e52 <memset+0xa>
 8003e50:	4770      	bx	lr
 8003e52:	f803 1b01 	strb.w	r1, [r3], #1
 8003e56:	e7f9      	b.n	8003e4c <memset+0x4>

08003e58 <siprintf>:
 8003e58:	b40e      	push	{r1, r2, r3}
 8003e5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e5e:	b500      	push	{lr}
 8003e60:	b09c      	sub	sp, #112	; 0x70
 8003e62:	ab1d      	add	r3, sp, #116	; 0x74
 8003e64:	9002      	str	r0, [sp, #8]
 8003e66:	9006      	str	r0, [sp, #24]
 8003e68:	9107      	str	r1, [sp, #28]
 8003e6a:	9104      	str	r1, [sp, #16]
 8003e6c:	4808      	ldr	r0, [pc, #32]	; (8003e90 <siprintf+0x38>)
 8003e6e:	4909      	ldr	r1, [pc, #36]	; (8003e94 <siprintf+0x3c>)
 8003e70:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e74:	9105      	str	r1, [sp, #20]
 8003e76:	6800      	ldr	r0, [r0, #0]
 8003e78:	a902      	add	r1, sp, #8
 8003e7a:	9301      	str	r3, [sp, #4]
 8003e7c:	f000 f868 	bl	8003f50 <_svfiprintf_r>
 8003e80:	2200      	movs	r2, #0
 8003e82:	9b02      	ldr	r3, [sp, #8]
 8003e84:	701a      	strb	r2, [r3, #0]
 8003e86:	b01c      	add	sp, #112	; 0x70
 8003e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e8c:	b003      	add	sp, #12
 8003e8e:	4770      	bx	lr
 8003e90:	2000003c 	.word	0x2000003c
 8003e94:	ffff0208 	.word	0xffff0208

08003e98 <__ssputs_r>:
 8003e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e9c:	688e      	ldr	r6, [r1, #8]
 8003e9e:	4682      	mov	sl, r0
 8003ea0:	429e      	cmp	r6, r3
 8003ea2:	460c      	mov	r4, r1
 8003ea4:	4690      	mov	r8, r2
 8003ea6:	461f      	mov	r7, r3
 8003ea8:	d838      	bhi.n	8003f1c <__ssputs_r+0x84>
 8003eaa:	898a      	ldrh	r2, [r1, #12]
 8003eac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003eb0:	d032      	beq.n	8003f18 <__ssputs_r+0x80>
 8003eb2:	6825      	ldr	r5, [r4, #0]
 8003eb4:	6909      	ldr	r1, [r1, #16]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	eba5 0901 	sub.w	r9, r5, r1
 8003ebc:	6965      	ldr	r5, [r4, #20]
 8003ebe:	444b      	add	r3, r9
 8003ec0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ec4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ec8:	106d      	asrs	r5, r5, #1
 8003eca:	429d      	cmp	r5, r3
 8003ecc:	bf38      	it	cc
 8003ece:	461d      	movcc	r5, r3
 8003ed0:	0553      	lsls	r3, r2, #21
 8003ed2:	d531      	bpl.n	8003f38 <__ssputs_r+0xa0>
 8003ed4:	4629      	mov	r1, r5
 8003ed6:	f000 fb53 	bl	8004580 <_malloc_r>
 8003eda:	4606      	mov	r6, r0
 8003edc:	b950      	cbnz	r0, 8003ef4 <__ssputs_r+0x5c>
 8003ede:	230c      	movs	r3, #12
 8003ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee4:	f8ca 3000 	str.w	r3, [sl]
 8003ee8:	89a3      	ldrh	r3, [r4, #12]
 8003eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eee:	81a3      	strh	r3, [r4, #12]
 8003ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef4:	464a      	mov	r2, r9
 8003ef6:	6921      	ldr	r1, [r4, #16]
 8003ef8:	f000 face 	bl	8004498 <memcpy>
 8003efc:	89a3      	ldrh	r3, [r4, #12]
 8003efe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f06:	81a3      	strh	r3, [r4, #12]
 8003f08:	6126      	str	r6, [r4, #16]
 8003f0a:	444e      	add	r6, r9
 8003f0c:	6026      	str	r6, [r4, #0]
 8003f0e:	463e      	mov	r6, r7
 8003f10:	6165      	str	r5, [r4, #20]
 8003f12:	eba5 0509 	sub.w	r5, r5, r9
 8003f16:	60a5      	str	r5, [r4, #8]
 8003f18:	42be      	cmp	r6, r7
 8003f1a:	d900      	bls.n	8003f1e <__ssputs_r+0x86>
 8003f1c:	463e      	mov	r6, r7
 8003f1e:	4632      	mov	r2, r6
 8003f20:	4641      	mov	r1, r8
 8003f22:	6820      	ldr	r0, [r4, #0]
 8003f24:	f000 fac6 	bl	80044b4 <memmove>
 8003f28:	68a3      	ldr	r3, [r4, #8]
 8003f2a:	6822      	ldr	r2, [r4, #0]
 8003f2c:	1b9b      	subs	r3, r3, r6
 8003f2e:	4432      	add	r2, r6
 8003f30:	2000      	movs	r0, #0
 8003f32:	60a3      	str	r3, [r4, #8]
 8003f34:	6022      	str	r2, [r4, #0]
 8003f36:	e7db      	b.n	8003ef0 <__ssputs_r+0x58>
 8003f38:	462a      	mov	r2, r5
 8003f3a:	f000 fb7b 	bl	8004634 <_realloc_r>
 8003f3e:	4606      	mov	r6, r0
 8003f40:	2800      	cmp	r0, #0
 8003f42:	d1e1      	bne.n	8003f08 <__ssputs_r+0x70>
 8003f44:	4650      	mov	r0, sl
 8003f46:	6921      	ldr	r1, [r4, #16]
 8003f48:	f000 face 	bl	80044e8 <_free_r>
 8003f4c:	e7c7      	b.n	8003ede <__ssputs_r+0x46>
	...

08003f50 <_svfiprintf_r>:
 8003f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f54:	4698      	mov	r8, r3
 8003f56:	898b      	ldrh	r3, [r1, #12]
 8003f58:	4607      	mov	r7, r0
 8003f5a:	061b      	lsls	r3, r3, #24
 8003f5c:	460d      	mov	r5, r1
 8003f5e:	4614      	mov	r4, r2
 8003f60:	b09d      	sub	sp, #116	; 0x74
 8003f62:	d50e      	bpl.n	8003f82 <_svfiprintf_r+0x32>
 8003f64:	690b      	ldr	r3, [r1, #16]
 8003f66:	b963      	cbnz	r3, 8003f82 <_svfiprintf_r+0x32>
 8003f68:	2140      	movs	r1, #64	; 0x40
 8003f6a:	f000 fb09 	bl	8004580 <_malloc_r>
 8003f6e:	6028      	str	r0, [r5, #0]
 8003f70:	6128      	str	r0, [r5, #16]
 8003f72:	b920      	cbnz	r0, 8003f7e <_svfiprintf_r+0x2e>
 8003f74:	230c      	movs	r3, #12
 8003f76:	603b      	str	r3, [r7, #0]
 8003f78:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7c:	e0d1      	b.n	8004122 <_svfiprintf_r+0x1d2>
 8003f7e:	2340      	movs	r3, #64	; 0x40
 8003f80:	616b      	str	r3, [r5, #20]
 8003f82:	2300      	movs	r3, #0
 8003f84:	9309      	str	r3, [sp, #36]	; 0x24
 8003f86:	2320      	movs	r3, #32
 8003f88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f8c:	2330      	movs	r3, #48	; 0x30
 8003f8e:	f04f 0901 	mov.w	r9, #1
 8003f92:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f96:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800413c <_svfiprintf_r+0x1ec>
 8003f9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f9e:	4623      	mov	r3, r4
 8003fa0:	469a      	mov	sl, r3
 8003fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fa6:	b10a      	cbz	r2, 8003fac <_svfiprintf_r+0x5c>
 8003fa8:	2a25      	cmp	r2, #37	; 0x25
 8003faa:	d1f9      	bne.n	8003fa0 <_svfiprintf_r+0x50>
 8003fac:	ebba 0b04 	subs.w	fp, sl, r4
 8003fb0:	d00b      	beq.n	8003fca <_svfiprintf_r+0x7a>
 8003fb2:	465b      	mov	r3, fp
 8003fb4:	4622      	mov	r2, r4
 8003fb6:	4629      	mov	r1, r5
 8003fb8:	4638      	mov	r0, r7
 8003fba:	f7ff ff6d 	bl	8003e98 <__ssputs_r>
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	f000 80aa 	beq.w	8004118 <_svfiprintf_r+0x1c8>
 8003fc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fc6:	445a      	add	r2, fp
 8003fc8:	9209      	str	r2, [sp, #36]	; 0x24
 8003fca:	f89a 3000 	ldrb.w	r3, [sl]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 80a2 	beq.w	8004118 <_svfiprintf_r+0x1c8>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fde:	f10a 0a01 	add.w	sl, sl, #1
 8003fe2:	9304      	str	r3, [sp, #16]
 8003fe4:	9307      	str	r3, [sp, #28]
 8003fe6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fea:	931a      	str	r3, [sp, #104]	; 0x68
 8003fec:	4654      	mov	r4, sl
 8003fee:	2205      	movs	r2, #5
 8003ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ff4:	4851      	ldr	r0, [pc, #324]	; (800413c <_svfiprintf_r+0x1ec>)
 8003ff6:	f000 fa41 	bl	800447c <memchr>
 8003ffa:	9a04      	ldr	r2, [sp, #16]
 8003ffc:	b9d8      	cbnz	r0, 8004036 <_svfiprintf_r+0xe6>
 8003ffe:	06d0      	lsls	r0, r2, #27
 8004000:	bf44      	itt	mi
 8004002:	2320      	movmi	r3, #32
 8004004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004008:	0711      	lsls	r1, r2, #28
 800400a:	bf44      	itt	mi
 800400c:	232b      	movmi	r3, #43	; 0x2b
 800400e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004012:	f89a 3000 	ldrb.w	r3, [sl]
 8004016:	2b2a      	cmp	r3, #42	; 0x2a
 8004018:	d015      	beq.n	8004046 <_svfiprintf_r+0xf6>
 800401a:	4654      	mov	r4, sl
 800401c:	2000      	movs	r0, #0
 800401e:	f04f 0c0a 	mov.w	ip, #10
 8004022:	9a07      	ldr	r2, [sp, #28]
 8004024:	4621      	mov	r1, r4
 8004026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800402a:	3b30      	subs	r3, #48	; 0x30
 800402c:	2b09      	cmp	r3, #9
 800402e:	d94e      	bls.n	80040ce <_svfiprintf_r+0x17e>
 8004030:	b1b0      	cbz	r0, 8004060 <_svfiprintf_r+0x110>
 8004032:	9207      	str	r2, [sp, #28]
 8004034:	e014      	b.n	8004060 <_svfiprintf_r+0x110>
 8004036:	eba0 0308 	sub.w	r3, r0, r8
 800403a:	fa09 f303 	lsl.w	r3, r9, r3
 800403e:	4313      	orrs	r3, r2
 8004040:	46a2      	mov	sl, r4
 8004042:	9304      	str	r3, [sp, #16]
 8004044:	e7d2      	b.n	8003fec <_svfiprintf_r+0x9c>
 8004046:	9b03      	ldr	r3, [sp, #12]
 8004048:	1d19      	adds	r1, r3, #4
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	9103      	str	r1, [sp, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	bfbb      	ittet	lt
 8004052:	425b      	neglt	r3, r3
 8004054:	f042 0202 	orrlt.w	r2, r2, #2
 8004058:	9307      	strge	r3, [sp, #28]
 800405a:	9307      	strlt	r3, [sp, #28]
 800405c:	bfb8      	it	lt
 800405e:	9204      	strlt	r2, [sp, #16]
 8004060:	7823      	ldrb	r3, [r4, #0]
 8004062:	2b2e      	cmp	r3, #46	; 0x2e
 8004064:	d10c      	bne.n	8004080 <_svfiprintf_r+0x130>
 8004066:	7863      	ldrb	r3, [r4, #1]
 8004068:	2b2a      	cmp	r3, #42	; 0x2a
 800406a:	d135      	bne.n	80040d8 <_svfiprintf_r+0x188>
 800406c:	9b03      	ldr	r3, [sp, #12]
 800406e:	3402      	adds	r4, #2
 8004070:	1d1a      	adds	r2, r3, #4
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	9203      	str	r2, [sp, #12]
 8004076:	2b00      	cmp	r3, #0
 8004078:	bfb8      	it	lt
 800407a:	f04f 33ff 	movlt.w	r3, #4294967295
 800407e:	9305      	str	r3, [sp, #20]
 8004080:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800414c <_svfiprintf_r+0x1fc>
 8004084:	2203      	movs	r2, #3
 8004086:	4650      	mov	r0, sl
 8004088:	7821      	ldrb	r1, [r4, #0]
 800408a:	f000 f9f7 	bl	800447c <memchr>
 800408e:	b140      	cbz	r0, 80040a2 <_svfiprintf_r+0x152>
 8004090:	2340      	movs	r3, #64	; 0x40
 8004092:	eba0 000a 	sub.w	r0, r0, sl
 8004096:	fa03 f000 	lsl.w	r0, r3, r0
 800409a:	9b04      	ldr	r3, [sp, #16]
 800409c:	3401      	adds	r4, #1
 800409e:	4303      	orrs	r3, r0
 80040a0:	9304      	str	r3, [sp, #16]
 80040a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040a6:	2206      	movs	r2, #6
 80040a8:	4825      	ldr	r0, [pc, #148]	; (8004140 <_svfiprintf_r+0x1f0>)
 80040aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040ae:	f000 f9e5 	bl	800447c <memchr>
 80040b2:	2800      	cmp	r0, #0
 80040b4:	d038      	beq.n	8004128 <_svfiprintf_r+0x1d8>
 80040b6:	4b23      	ldr	r3, [pc, #140]	; (8004144 <_svfiprintf_r+0x1f4>)
 80040b8:	bb1b      	cbnz	r3, 8004102 <_svfiprintf_r+0x1b2>
 80040ba:	9b03      	ldr	r3, [sp, #12]
 80040bc:	3307      	adds	r3, #7
 80040be:	f023 0307 	bic.w	r3, r3, #7
 80040c2:	3308      	adds	r3, #8
 80040c4:	9303      	str	r3, [sp, #12]
 80040c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040c8:	4433      	add	r3, r6
 80040ca:	9309      	str	r3, [sp, #36]	; 0x24
 80040cc:	e767      	b.n	8003f9e <_svfiprintf_r+0x4e>
 80040ce:	460c      	mov	r4, r1
 80040d0:	2001      	movs	r0, #1
 80040d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80040d6:	e7a5      	b.n	8004024 <_svfiprintf_r+0xd4>
 80040d8:	2300      	movs	r3, #0
 80040da:	f04f 0c0a 	mov.w	ip, #10
 80040de:	4619      	mov	r1, r3
 80040e0:	3401      	adds	r4, #1
 80040e2:	9305      	str	r3, [sp, #20]
 80040e4:	4620      	mov	r0, r4
 80040e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040ea:	3a30      	subs	r2, #48	; 0x30
 80040ec:	2a09      	cmp	r2, #9
 80040ee:	d903      	bls.n	80040f8 <_svfiprintf_r+0x1a8>
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0c5      	beq.n	8004080 <_svfiprintf_r+0x130>
 80040f4:	9105      	str	r1, [sp, #20]
 80040f6:	e7c3      	b.n	8004080 <_svfiprintf_r+0x130>
 80040f8:	4604      	mov	r4, r0
 80040fa:	2301      	movs	r3, #1
 80040fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004100:	e7f0      	b.n	80040e4 <_svfiprintf_r+0x194>
 8004102:	ab03      	add	r3, sp, #12
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	462a      	mov	r2, r5
 8004108:	4638      	mov	r0, r7
 800410a:	4b0f      	ldr	r3, [pc, #60]	; (8004148 <_svfiprintf_r+0x1f8>)
 800410c:	a904      	add	r1, sp, #16
 800410e:	f3af 8000 	nop.w
 8004112:	1c42      	adds	r2, r0, #1
 8004114:	4606      	mov	r6, r0
 8004116:	d1d6      	bne.n	80040c6 <_svfiprintf_r+0x176>
 8004118:	89ab      	ldrh	r3, [r5, #12]
 800411a:	065b      	lsls	r3, r3, #25
 800411c:	f53f af2c 	bmi.w	8003f78 <_svfiprintf_r+0x28>
 8004120:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004122:	b01d      	add	sp, #116	; 0x74
 8004124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004128:	ab03      	add	r3, sp, #12
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	462a      	mov	r2, r5
 800412e:	4638      	mov	r0, r7
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <_svfiprintf_r+0x1f8>)
 8004132:	a904      	add	r1, sp, #16
 8004134:	f000 f87c 	bl	8004230 <_printf_i>
 8004138:	e7eb      	b.n	8004112 <_svfiprintf_r+0x1c2>
 800413a:	bf00      	nop
 800413c:	08004f70 	.word	0x08004f70
 8004140:	08004f7a 	.word	0x08004f7a
 8004144:	00000000 	.word	0x00000000
 8004148:	08003e99 	.word	0x08003e99
 800414c:	08004f76 	.word	0x08004f76

08004150 <_printf_common>:
 8004150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004154:	4616      	mov	r6, r2
 8004156:	4699      	mov	r9, r3
 8004158:	688a      	ldr	r2, [r1, #8]
 800415a:	690b      	ldr	r3, [r1, #16]
 800415c:	4607      	mov	r7, r0
 800415e:	4293      	cmp	r3, r2
 8004160:	bfb8      	it	lt
 8004162:	4613      	movlt	r3, r2
 8004164:	6033      	str	r3, [r6, #0]
 8004166:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800416a:	460c      	mov	r4, r1
 800416c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004170:	b10a      	cbz	r2, 8004176 <_printf_common+0x26>
 8004172:	3301      	adds	r3, #1
 8004174:	6033      	str	r3, [r6, #0]
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	0699      	lsls	r1, r3, #26
 800417a:	bf42      	ittt	mi
 800417c:	6833      	ldrmi	r3, [r6, #0]
 800417e:	3302      	addmi	r3, #2
 8004180:	6033      	strmi	r3, [r6, #0]
 8004182:	6825      	ldr	r5, [r4, #0]
 8004184:	f015 0506 	ands.w	r5, r5, #6
 8004188:	d106      	bne.n	8004198 <_printf_common+0x48>
 800418a:	f104 0a19 	add.w	sl, r4, #25
 800418e:	68e3      	ldr	r3, [r4, #12]
 8004190:	6832      	ldr	r2, [r6, #0]
 8004192:	1a9b      	subs	r3, r3, r2
 8004194:	42ab      	cmp	r3, r5
 8004196:	dc28      	bgt.n	80041ea <_printf_common+0x9a>
 8004198:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800419c:	1e13      	subs	r3, r2, #0
 800419e:	6822      	ldr	r2, [r4, #0]
 80041a0:	bf18      	it	ne
 80041a2:	2301      	movne	r3, #1
 80041a4:	0692      	lsls	r2, r2, #26
 80041a6:	d42d      	bmi.n	8004204 <_printf_common+0xb4>
 80041a8:	4649      	mov	r1, r9
 80041aa:	4638      	mov	r0, r7
 80041ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041b0:	47c0      	blx	r8
 80041b2:	3001      	adds	r0, #1
 80041b4:	d020      	beq.n	80041f8 <_printf_common+0xa8>
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	68e5      	ldr	r5, [r4, #12]
 80041ba:	f003 0306 	and.w	r3, r3, #6
 80041be:	2b04      	cmp	r3, #4
 80041c0:	bf18      	it	ne
 80041c2:	2500      	movne	r5, #0
 80041c4:	6832      	ldr	r2, [r6, #0]
 80041c6:	f04f 0600 	mov.w	r6, #0
 80041ca:	68a3      	ldr	r3, [r4, #8]
 80041cc:	bf08      	it	eq
 80041ce:	1aad      	subeq	r5, r5, r2
 80041d0:	6922      	ldr	r2, [r4, #16]
 80041d2:	bf08      	it	eq
 80041d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041d8:	4293      	cmp	r3, r2
 80041da:	bfc4      	itt	gt
 80041dc:	1a9b      	subgt	r3, r3, r2
 80041de:	18ed      	addgt	r5, r5, r3
 80041e0:	341a      	adds	r4, #26
 80041e2:	42b5      	cmp	r5, r6
 80041e4:	d11a      	bne.n	800421c <_printf_common+0xcc>
 80041e6:	2000      	movs	r0, #0
 80041e8:	e008      	b.n	80041fc <_printf_common+0xac>
 80041ea:	2301      	movs	r3, #1
 80041ec:	4652      	mov	r2, sl
 80041ee:	4649      	mov	r1, r9
 80041f0:	4638      	mov	r0, r7
 80041f2:	47c0      	blx	r8
 80041f4:	3001      	adds	r0, #1
 80041f6:	d103      	bne.n	8004200 <_printf_common+0xb0>
 80041f8:	f04f 30ff 	mov.w	r0, #4294967295
 80041fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004200:	3501      	adds	r5, #1
 8004202:	e7c4      	b.n	800418e <_printf_common+0x3e>
 8004204:	2030      	movs	r0, #48	; 0x30
 8004206:	18e1      	adds	r1, r4, r3
 8004208:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004212:	4422      	add	r2, r4
 8004214:	3302      	adds	r3, #2
 8004216:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800421a:	e7c5      	b.n	80041a8 <_printf_common+0x58>
 800421c:	2301      	movs	r3, #1
 800421e:	4622      	mov	r2, r4
 8004220:	4649      	mov	r1, r9
 8004222:	4638      	mov	r0, r7
 8004224:	47c0      	blx	r8
 8004226:	3001      	adds	r0, #1
 8004228:	d0e6      	beq.n	80041f8 <_printf_common+0xa8>
 800422a:	3601      	adds	r6, #1
 800422c:	e7d9      	b.n	80041e2 <_printf_common+0x92>
	...

08004230 <_printf_i>:
 8004230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004234:	460c      	mov	r4, r1
 8004236:	7e27      	ldrb	r7, [r4, #24]
 8004238:	4691      	mov	r9, r2
 800423a:	2f78      	cmp	r7, #120	; 0x78
 800423c:	4680      	mov	r8, r0
 800423e:	469a      	mov	sl, r3
 8004240:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004242:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004246:	d807      	bhi.n	8004258 <_printf_i+0x28>
 8004248:	2f62      	cmp	r7, #98	; 0x62
 800424a:	d80a      	bhi.n	8004262 <_printf_i+0x32>
 800424c:	2f00      	cmp	r7, #0
 800424e:	f000 80d9 	beq.w	8004404 <_printf_i+0x1d4>
 8004252:	2f58      	cmp	r7, #88	; 0x58
 8004254:	f000 80a4 	beq.w	80043a0 <_printf_i+0x170>
 8004258:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800425c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004260:	e03a      	b.n	80042d8 <_printf_i+0xa8>
 8004262:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004266:	2b15      	cmp	r3, #21
 8004268:	d8f6      	bhi.n	8004258 <_printf_i+0x28>
 800426a:	a001      	add	r0, pc, #4	; (adr r0, 8004270 <_printf_i+0x40>)
 800426c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004270:	080042c9 	.word	0x080042c9
 8004274:	080042dd 	.word	0x080042dd
 8004278:	08004259 	.word	0x08004259
 800427c:	08004259 	.word	0x08004259
 8004280:	08004259 	.word	0x08004259
 8004284:	08004259 	.word	0x08004259
 8004288:	080042dd 	.word	0x080042dd
 800428c:	08004259 	.word	0x08004259
 8004290:	08004259 	.word	0x08004259
 8004294:	08004259 	.word	0x08004259
 8004298:	08004259 	.word	0x08004259
 800429c:	080043eb 	.word	0x080043eb
 80042a0:	0800430d 	.word	0x0800430d
 80042a4:	080043cd 	.word	0x080043cd
 80042a8:	08004259 	.word	0x08004259
 80042ac:	08004259 	.word	0x08004259
 80042b0:	0800440d 	.word	0x0800440d
 80042b4:	08004259 	.word	0x08004259
 80042b8:	0800430d 	.word	0x0800430d
 80042bc:	08004259 	.word	0x08004259
 80042c0:	08004259 	.word	0x08004259
 80042c4:	080043d5 	.word	0x080043d5
 80042c8:	680b      	ldr	r3, [r1, #0]
 80042ca:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042ce:	1d1a      	adds	r2, r3, #4
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	600a      	str	r2, [r1, #0]
 80042d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042d8:	2301      	movs	r3, #1
 80042da:	e0a4      	b.n	8004426 <_printf_i+0x1f6>
 80042dc:	6825      	ldr	r5, [r4, #0]
 80042de:	6808      	ldr	r0, [r1, #0]
 80042e0:	062e      	lsls	r6, r5, #24
 80042e2:	f100 0304 	add.w	r3, r0, #4
 80042e6:	d50a      	bpl.n	80042fe <_printf_i+0xce>
 80042e8:	6805      	ldr	r5, [r0, #0]
 80042ea:	600b      	str	r3, [r1, #0]
 80042ec:	2d00      	cmp	r5, #0
 80042ee:	da03      	bge.n	80042f8 <_printf_i+0xc8>
 80042f0:	232d      	movs	r3, #45	; 0x2d
 80042f2:	426d      	negs	r5, r5
 80042f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042f8:	230a      	movs	r3, #10
 80042fa:	485e      	ldr	r0, [pc, #376]	; (8004474 <_printf_i+0x244>)
 80042fc:	e019      	b.n	8004332 <_printf_i+0x102>
 80042fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004302:	6805      	ldr	r5, [r0, #0]
 8004304:	600b      	str	r3, [r1, #0]
 8004306:	bf18      	it	ne
 8004308:	b22d      	sxthne	r5, r5
 800430a:	e7ef      	b.n	80042ec <_printf_i+0xbc>
 800430c:	680b      	ldr	r3, [r1, #0]
 800430e:	6825      	ldr	r5, [r4, #0]
 8004310:	1d18      	adds	r0, r3, #4
 8004312:	6008      	str	r0, [r1, #0]
 8004314:	0628      	lsls	r0, r5, #24
 8004316:	d501      	bpl.n	800431c <_printf_i+0xec>
 8004318:	681d      	ldr	r5, [r3, #0]
 800431a:	e002      	b.n	8004322 <_printf_i+0xf2>
 800431c:	0669      	lsls	r1, r5, #25
 800431e:	d5fb      	bpl.n	8004318 <_printf_i+0xe8>
 8004320:	881d      	ldrh	r5, [r3, #0]
 8004322:	2f6f      	cmp	r7, #111	; 0x6f
 8004324:	bf0c      	ite	eq
 8004326:	2308      	moveq	r3, #8
 8004328:	230a      	movne	r3, #10
 800432a:	4852      	ldr	r0, [pc, #328]	; (8004474 <_printf_i+0x244>)
 800432c:	2100      	movs	r1, #0
 800432e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004332:	6866      	ldr	r6, [r4, #4]
 8004334:	2e00      	cmp	r6, #0
 8004336:	bfa8      	it	ge
 8004338:	6821      	ldrge	r1, [r4, #0]
 800433a:	60a6      	str	r6, [r4, #8]
 800433c:	bfa4      	itt	ge
 800433e:	f021 0104 	bicge.w	r1, r1, #4
 8004342:	6021      	strge	r1, [r4, #0]
 8004344:	b90d      	cbnz	r5, 800434a <_printf_i+0x11a>
 8004346:	2e00      	cmp	r6, #0
 8004348:	d04d      	beq.n	80043e6 <_printf_i+0x1b6>
 800434a:	4616      	mov	r6, r2
 800434c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004350:	fb03 5711 	mls	r7, r3, r1, r5
 8004354:	5dc7      	ldrb	r7, [r0, r7]
 8004356:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800435a:	462f      	mov	r7, r5
 800435c:	42bb      	cmp	r3, r7
 800435e:	460d      	mov	r5, r1
 8004360:	d9f4      	bls.n	800434c <_printf_i+0x11c>
 8004362:	2b08      	cmp	r3, #8
 8004364:	d10b      	bne.n	800437e <_printf_i+0x14e>
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	07df      	lsls	r7, r3, #31
 800436a:	d508      	bpl.n	800437e <_printf_i+0x14e>
 800436c:	6923      	ldr	r3, [r4, #16]
 800436e:	6861      	ldr	r1, [r4, #4]
 8004370:	4299      	cmp	r1, r3
 8004372:	bfde      	ittt	le
 8004374:	2330      	movle	r3, #48	; 0x30
 8004376:	f806 3c01 	strble.w	r3, [r6, #-1]
 800437a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800437e:	1b92      	subs	r2, r2, r6
 8004380:	6122      	str	r2, [r4, #16]
 8004382:	464b      	mov	r3, r9
 8004384:	4621      	mov	r1, r4
 8004386:	4640      	mov	r0, r8
 8004388:	f8cd a000 	str.w	sl, [sp]
 800438c:	aa03      	add	r2, sp, #12
 800438e:	f7ff fedf 	bl	8004150 <_printf_common>
 8004392:	3001      	adds	r0, #1
 8004394:	d14c      	bne.n	8004430 <_printf_i+0x200>
 8004396:	f04f 30ff 	mov.w	r0, #4294967295
 800439a:	b004      	add	sp, #16
 800439c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043a0:	4834      	ldr	r0, [pc, #208]	; (8004474 <_printf_i+0x244>)
 80043a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80043a6:	680e      	ldr	r6, [r1, #0]
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80043ae:	061f      	lsls	r7, r3, #24
 80043b0:	600e      	str	r6, [r1, #0]
 80043b2:	d514      	bpl.n	80043de <_printf_i+0x1ae>
 80043b4:	07d9      	lsls	r1, r3, #31
 80043b6:	bf44      	itt	mi
 80043b8:	f043 0320 	orrmi.w	r3, r3, #32
 80043bc:	6023      	strmi	r3, [r4, #0]
 80043be:	b91d      	cbnz	r5, 80043c8 <_printf_i+0x198>
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	f023 0320 	bic.w	r3, r3, #32
 80043c6:	6023      	str	r3, [r4, #0]
 80043c8:	2310      	movs	r3, #16
 80043ca:	e7af      	b.n	800432c <_printf_i+0xfc>
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	f043 0320 	orr.w	r3, r3, #32
 80043d2:	6023      	str	r3, [r4, #0]
 80043d4:	2378      	movs	r3, #120	; 0x78
 80043d6:	4828      	ldr	r0, [pc, #160]	; (8004478 <_printf_i+0x248>)
 80043d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043dc:	e7e3      	b.n	80043a6 <_printf_i+0x176>
 80043de:	065e      	lsls	r6, r3, #25
 80043e0:	bf48      	it	mi
 80043e2:	b2ad      	uxthmi	r5, r5
 80043e4:	e7e6      	b.n	80043b4 <_printf_i+0x184>
 80043e6:	4616      	mov	r6, r2
 80043e8:	e7bb      	b.n	8004362 <_printf_i+0x132>
 80043ea:	680b      	ldr	r3, [r1, #0]
 80043ec:	6826      	ldr	r6, [r4, #0]
 80043ee:	1d1d      	adds	r5, r3, #4
 80043f0:	6960      	ldr	r0, [r4, #20]
 80043f2:	600d      	str	r5, [r1, #0]
 80043f4:	0635      	lsls	r5, r6, #24
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	d501      	bpl.n	80043fe <_printf_i+0x1ce>
 80043fa:	6018      	str	r0, [r3, #0]
 80043fc:	e002      	b.n	8004404 <_printf_i+0x1d4>
 80043fe:	0671      	lsls	r1, r6, #25
 8004400:	d5fb      	bpl.n	80043fa <_printf_i+0x1ca>
 8004402:	8018      	strh	r0, [r3, #0]
 8004404:	2300      	movs	r3, #0
 8004406:	4616      	mov	r6, r2
 8004408:	6123      	str	r3, [r4, #16]
 800440a:	e7ba      	b.n	8004382 <_printf_i+0x152>
 800440c:	680b      	ldr	r3, [r1, #0]
 800440e:	1d1a      	adds	r2, r3, #4
 8004410:	600a      	str	r2, [r1, #0]
 8004412:	681e      	ldr	r6, [r3, #0]
 8004414:	2100      	movs	r1, #0
 8004416:	4630      	mov	r0, r6
 8004418:	6862      	ldr	r2, [r4, #4]
 800441a:	f000 f82f 	bl	800447c <memchr>
 800441e:	b108      	cbz	r0, 8004424 <_printf_i+0x1f4>
 8004420:	1b80      	subs	r0, r0, r6
 8004422:	6060      	str	r0, [r4, #4]
 8004424:	6863      	ldr	r3, [r4, #4]
 8004426:	6123      	str	r3, [r4, #16]
 8004428:	2300      	movs	r3, #0
 800442a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800442e:	e7a8      	b.n	8004382 <_printf_i+0x152>
 8004430:	4632      	mov	r2, r6
 8004432:	4649      	mov	r1, r9
 8004434:	4640      	mov	r0, r8
 8004436:	6923      	ldr	r3, [r4, #16]
 8004438:	47d0      	blx	sl
 800443a:	3001      	adds	r0, #1
 800443c:	d0ab      	beq.n	8004396 <_printf_i+0x166>
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	079b      	lsls	r3, r3, #30
 8004442:	d413      	bmi.n	800446c <_printf_i+0x23c>
 8004444:	68e0      	ldr	r0, [r4, #12]
 8004446:	9b03      	ldr	r3, [sp, #12]
 8004448:	4298      	cmp	r0, r3
 800444a:	bfb8      	it	lt
 800444c:	4618      	movlt	r0, r3
 800444e:	e7a4      	b.n	800439a <_printf_i+0x16a>
 8004450:	2301      	movs	r3, #1
 8004452:	4632      	mov	r2, r6
 8004454:	4649      	mov	r1, r9
 8004456:	4640      	mov	r0, r8
 8004458:	47d0      	blx	sl
 800445a:	3001      	adds	r0, #1
 800445c:	d09b      	beq.n	8004396 <_printf_i+0x166>
 800445e:	3501      	adds	r5, #1
 8004460:	68e3      	ldr	r3, [r4, #12]
 8004462:	9903      	ldr	r1, [sp, #12]
 8004464:	1a5b      	subs	r3, r3, r1
 8004466:	42ab      	cmp	r3, r5
 8004468:	dcf2      	bgt.n	8004450 <_printf_i+0x220>
 800446a:	e7eb      	b.n	8004444 <_printf_i+0x214>
 800446c:	2500      	movs	r5, #0
 800446e:	f104 0619 	add.w	r6, r4, #25
 8004472:	e7f5      	b.n	8004460 <_printf_i+0x230>
 8004474:	08004f81 	.word	0x08004f81
 8004478:	08004f92 	.word	0x08004f92

0800447c <memchr>:
 800447c:	4603      	mov	r3, r0
 800447e:	b510      	push	{r4, lr}
 8004480:	b2c9      	uxtb	r1, r1
 8004482:	4402      	add	r2, r0
 8004484:	4293      	cmp	r3, r2
 8004486:	4618      	mov	r0, r3
 8004488:	d101      	bne.n	800448e <memchr+0x12>
 800448a:	2000      	movs	r0, #0
 800448c:	e003      	b.n	8004496 <memchr+0x1a>
 800448e:	7804      	ldrb	r4, [r0, #0]
 8004490:	3301      	adds	r3, #1
 8004492:	428c      	cmp	r4, r1
 8004494:	d1f6      	bne.n	8004484 <memchr+0x8>
 8004496:	bd10      	pop	{r4, pc}

08004498 <memcpy>:
 8004498:	440a      	add	r2, r1
 800449a:	4291      	cmp	r1, r2
 800449c:	f100 33ff 	add.w	r3, r0, #4294967295
 80044a0:	d100      	bne.n	80044a4 <memcpy+0xc>
 80044a2:	4770      	bx	lr
 80044a4:	b510      	push	{r4, lr}
 80044a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044aa:	4291      	cmp	r1, r2
 80044ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044b0:	d1f9      	bne.n	80044a6 <memcpy+0xe>
 80044b2:	bd10      	pop	{r4, pc}

080044b4 <memmove>:
 80044b4:	4288      	cmp	r0, r1
 80044b6:	b510      	push	{r4, lr}
 80044b8:	eb01 0402 	add.w	r4, r1, r2
 80044bc:	d902      	bls.n	80044c4 <memmove+0x10>
 80044be:	4284      	cmp	r4, r0
 80044c0:	4623      	mov	r3, r4
 80044c2:	d807      	bhi.n	80044d4 <memmove+0x20>
 80044c4:	1e43      	subs	r3, r0, #1
 80044c6:	42a1      	cmp	r1, r4
 80044c8:	d008      	beq.n	80044dc <memmove+0x28>
 80044ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044d2:	e7f8      	b.n	80044c6 <memmove+0x12>
 80044d4:	4601      	mov	r1, r0
 80044d6:	4402      	add	r2, r0
 80044d8:	428a      	cmp	r2, r1
 80044da:	d100      	bne.n	80044de <memmove+0x2a>
 80044dc:	bd10      	pop	{r4, pc}
 80044de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044e6:	e7f7      	b.n	80044d8 <memmove+0x24>

080044e8 <_free_r>:
 80044e8:	b538      	push	{r3, r4, r5, lr}
 80044ea:	4605      	mov	r5, r0
 80044ec:	2900      	cmp	r1, #0
 80044ee:	d043      	beq.n	8004578 <_free_r+0x90>
 80044f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044f4:	1f0c      	subs	r4, r1, #4
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	bfb8      	it	lt
 80044fa:	18e4      	addlt	r4, r4, r3
 80044fc:	f000 f8d0 	bl	80046a0 <__malloc_lock>
 8004500:	4a1e      	ldr	r2, [pc, #120]	; (800457c <_free_r+0x94>)
 8004502:	6813      	ldr	r3, [r2, #0]
 8004504:	4610      	mov	r0, r2
 8004506:	b933      	cbnz	r3, 8004516 <_free_r+0x2e>
 8004508:	6063      	str	r3, [r4, #4]
 800450a:	6014      	str	r4, [r2, #0]
 800450c:	4628      	mov	r0, r5
 800450e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004512:	f000 b8cb 	b.w	80046ac <__malloc_unlock>
 8004516:	42a3      	cmp	r3, r4
 8004518:	d90a      	bls.n	8004530 <_free_r+0x48>
 800451a:	6821      	ldr	r1, [r4, #0]
 800451c:	1862      	adds	r2, r4, r1
 800451e:	4293      	cmp	r3, r2
 8004520:	bf01      	itttt	eq
 8004522:	681a      	ldreq	r2, [r3, #0]
 8004524:	685b      	ldreq	r3, [r3, #4]
 8004526:	1852      	addeq	r2, r2, r1
 8004528:	6022      	streq	r2, [r4, #0]
 800452a:	6063      	str	r3, [r4, #4]
 800452c:	6004      	str	r4, [r0, #0]
 800452e:	e7ed      	b.n	800450c <_free_r+0x24>
 8004530:	461a      	mov	r2, r3
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	b10b      	cbz	r3, 800453a <_free_r+0x52>
 8004536:	42a3      	cmp	r3, r4
 8004538:	d9fa      	bls.n	8004530 <_free_r+0x48>
 800453a:	6811      	ldr	r1, [r2, #0]
 800453c:	1850      	adds	r0, r2, r1
 800453e:	42a0      	cmp	r0, r4
 8004540:	d10b      	bne.n	800455a <_free_r+0x72>
 8004542:	6820      	ldr	r0, [r4, #0]
 8004544:	4401      	add	r1, r0
 8004546:	1850      	adds	r0, r2, r1
 8004548:	4283      	cmp	r3, r0
 800454a:	6011      	str	r1, [r2, #0]
 800454c:	d1de      	bne.n	800450c <_free_r+0x24>
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	4401      	add	r1, r0
 8004554:	6011      	str	r1, [r2, #0]
 8004556:	6053      	str	r3, [r2, #4]
 8004558:	e7d8      	b.n	800450c <_free_r+0x24>
 800455a:	d902      	bls.n	8004562 <_free_r+0x7a>
 800455c:	230c      	movs	r3, #12
 800455e:	602b      	str	r3, [r5, #0]
 8004560:	e7d4      	b.n	800450c <_free_r+0x24>
 8004562:	6820      	ldr	r0, [r4, #0]
 8004564:	1821      	adds	r1, r4, r0
 8004566:	428b      	cmp	r3, r1
 8004568:	bf01      	itttt	eq
 800456a:	6819      	ldreq	r1, [r3, #0]
 800456c:	685b      	ldreq	r3, [r3, #4]
 800456e:	1809      	addeq	r1, r1, r0
 8004570:	6021      	streq	r1, [r4, #0]
 8004572:	6063      	str	r3, [r4, #4]
 8004574:	6054      	str	r4, [r2, #4]
 8004576:	e7c9      	b.n	800450c <_free_r+0x24>
 8004578:	bd38      	pop	{r3, r4, r5, pc}
 800457a:	bf00      	nop
 800457c:	20000530 	.word	0x20000530

08004580 <_malloc_r>:
 8004580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004582:	1ccd      	adds	r5, r1, #3
 8004584:	f025 0503 	bic.w	r5, r5, #3
 8004588:	3508      	adds	r5, #8
 800458a:	2d0c      	cmp	r5, #12
 800458c:	bf38      	it	cc
 800458e:	250c      	movcc	r5, #12
 8004590:	2d00      	cmp	r5, #0
 8004592:	4606      	mov	r6, r0
 8004594:	db01      	blt.n	800459a <_malloc_r+0x1a>
 8004596:	42a9      	cmp	r1, r5
 8004598:	d903      	bls.n	80045a2 <_malloc_r+0x22>
 800459a:	230c      	movs	r3, #12
 800459c:	6033      	str	r3, [r6, #0]
 800459e:	2000      	movs	r0, #0
 80045a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045a2:	f000 f87d 	bl	80046a0 <__malloc_lock>
 80045a6:	4921      	ldr	r1, [pc, #132]	; (800462c <_malloc_r+0xac>)
 80045a8:	680a      	ldr	r2, [r1, #0]
 80045aa:	4614      	mov	r4, r2
 80045ac:	b99c      	cbnz	r4, 80045d6 <_malloc_r+0x56>
 80045ae:	4f20      	ldr	r7, [pc, #128]	; (8004630 <_malloc_r+0xb0>)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	b923      	cbnz	r3, 80045be <_malloc_r+0x3e>
 80045b4:	4621      	mov	r1, r4
 80045b6:	4630      	mov	r0, r6
 80045b8:	f000 f862 	bl	8004680 <_sbrk_r>
 80045bc:	6038      	str	r0, [r7, #0]
 80045be:	4629      	mov	r1, r5
 80045c0:	4630      	mov	r0, r6
 80045c2:	f000 f85d 	bl	8004680 <_sbrk_r>
 80045c6:	1c43      	adds	r3, r0, #1
 80045c8:	d123      	bne.n	8004612 <_malloc_r+0x92>
 80045ca:	230c      	movs	r3, #12
 80045cc:	4630      	mov	r0, r6
 80045ce:	6033      	str	r3, [r6, #0]
 80045d0:	f000 f86c 	bl	80046ac <__malloc_unlock>
 80045d4:	e7e3      	b.n	800459e <_malloc_r+0x1e>
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	1b5b      	subs	r3, r3, r5
 80045da:	d417      	bmi.n	800460c <_malloc_r+0x8c>
 80045dc:	2b0b      	cmp	r3, #11
 80045de:	d903      	bls.n	80045e8 <_malloc_r+0x68>
 80045e0:	6023      	str	r3, [r4, #0]
 80045e2:	441c      	add	r4, r3
 80045e4:	6025      	str	r5, [r4, #0]
 80045e6:	e004      	b.n	80045f2 <_malloc_r+0x72>
 80045e8:	6863      	ldr	r3, [r4, #4]
 80045ea:	42a2      	cmp	r2, r4
 80045ec:	bf0c      	ite	eq
 80045ee:	600b      	streq	r3, [r1, #0]
 80045f0:	6053      	strne	r3, [r2, #4]
 80045f2:	4630      	mov	r0, r6
 80045f4:	f000 f85a 	bl	80046ac <__malloc_unlock>
 80045f8:	f104 000b 	add.w	r0, r4, #11
 80045fc:	1d23      	adds	r3, r4, #4
 80045fe:	f020 0007 	bic.w	r0, r0, #7
 8004602:	1ac2      	subs	r2, r0, r3
 8004604:	d0cc      	beq.n	80045a0 <_malloc_r+0x20>
 8004606:	1a1b      	subs	r3, r3, r0
 8004608:	50a3      	str	r3, [r4, r2]
 800460a:	e7c9      	b.n	80045a0 <_malloc_r+0x20>
 800460c:	4622      	mov	r2, r4
 800460e:	6864      	ldr	r4, [r4, #4]
 8004610:	e7cc      	b.n	80045ac <_malloc_r+0x2c>
 8004612:	1cc4      	adds	r4, r0, #3
 8004614:	f024 0403 	bic.w	r4, r4, #3
 8004618:	42a0      	cmp	r0, r4
 800461a:	d0e3      	beq.n	80045e4 <_malloc_r+0x64>
 800461c:	1a21      	subs	r1, r4, r0
 800461e:	4630      	mov	r0, r6
 8004620:	f000 f82e 	bl	8004680 <_sbrk_r>
 8004624:	3001      	adds	r0, #1
 8004626:	d1dd      	bne.n	80045e4 <_malloc_r+0x64>
 8004628:	e7cf      	b.n	80045ca <_malloc_r+0x4a>
 800462a:	bf00      	nop
 800462c:	20000530 	.word	0x20000530
 8004630:	20000534 	.word	0x20000534

08004634 <_realloc_r>:
 8004634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004636:	4607      	mov	r7, r0
 8004638:	4614      	mov	r4, r2
 800463a:	460e      	mov	r6, r1
 800463c:	b921      	cbnz	r1, 8004648 <_realloc_r+0x14>
 800463e:	4611      	mov	r1, r2
 8004640:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004644:	f7ff bf9c 	b.w	8004580 <_malloc_r>
 8004648:	b922      	cbnz	r2, 8004654 <_realloc_r+0x20>
 800464a:	f7ff ff4d 	bl	80044e8 <_free_r>
 800464e:	4625      	mov	r5, r4
 8004650:	4628      	mov	r0, r5
 8004652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004654:	f000 f830 	bl	80046b8 <_malloc_usable_size_r>
 8004658:	42a0      	cmp	r0, r4
 800465a:	d20f      	bcs.n	800467c <_realloc_r+0x48>
 800465c:	4621      	mov	r1, r4
 800465e:	4638      	mov	r0, r7
 8004660:	f7ff ff8e 	bl	8004580 <_malloc_r>
 8004664:	4605      	mov	r5, r0
 8004666:	2800      	cmp	r0, #0
 8004668:	d0f2      	beq.n	8004650 <_realloc_r+0x1c>
 800466a:	4631      	mov	r1, r6
 800466c:	4622      	mov	r2, r4
 800466e:	f7ff ff13 	bl	8004498 <memcpy>
 8004672:	4631      	mov	r1, r6
 8004674:	4638      	mov	r0, r7
 8004676:	f7ff ff37 	bl	80044e8 <_free_r>
 800467a:	e7e9      	b.n	8004650 <_realloc_r+0x1c>
 800467c:	4635      	mov	r5, r6
 800467e:	e7e7      	b.n	8004650 <_realloc_r+0x1c>

08004680 <_sbrk_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	2300      	movs	r3, #0
 8004684:	4d05      	ldr	r5, [pc, #20]	; (800469c <_sbrk_r+0x1c>)
 8004686:	4604      	mov	r4, r0
 8004688:	4608      	mov	r0, r1
 800468a:	602b      	str	r3, [r5, #0]
 800468c:	f7ff fb50 	bl	8003d30 <_sbrk>
 8004690:	1c43      	adds	r3, r0, #1
 8004692:	d102      	bne.n	800469a <_sbrk_r+0x1a>
 8004694:	682b      	ldr	r3, [r5, #0]
 8004696:	b103      	cbz	r3, 800469a <_sbrk_r+0x1a>
 8004698:	6023      	str	r3, [r4, #0]
 800469a:	bd38      	pop	{r3, r4, r5, pc}
 800469c:	200005f8 	.word	0x200005f8

080046a0 <__malloc_lock>:
 80046a0:	4801      	ldr	r0, [pc, #4]	; (80046a8 <__malloc_lock+0x8>)
 80046a2:	f000 b811 	b.w	80046c8 <__retarget_lock_acquire_recursive>
 80046a6:	bf00      	nop
 80046a8:	20000600 	.word	0x20000600

080046ac <__malloc_unlock>:
 80046ac:	4801      	ldr	r0, [pc, #4]	; (80046b4 <__malloc_unlock+0x8>)
 80046ae:	f000 b80c 	b.w	80046ca <__retarget_lock_release_recursive>
 80046b2:	bf00      	nop
 80046b4:	20000600 	.word	0x20000600

080046b8 <_malloc_usable_size_r>:
 80046b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046bc:	1f18      	subs	r0, r3, #4
 80046be:	2b00      	cmp	r3, #0
 80046c0:	bfbc      	itt	lt
 80046c2:	580b      	ldrlt	r3, [r1, r0]
 80046c4:	18c0      	addlt	r0, r0, r3
 80046c6:	4770      	bx	lr

080046c8 <__retarget_lock_acquire_recursive>:
 80046c8:	4770      	bx	lr

080046ca <__retarget_lock_release_recursive>:
 80046ca:	4770      	bx	lr

080046cc <_init>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	bf00      	nop
 80046d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d2:	bc08      	pop	{r3}
 80046d4:	469e      	mov	lr, r3
 80046d6:	4770      	bx	lr

080046d8 <_fini>:
 80046d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046da:	bf00      	nop
 80046dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046de:	bc08      	pop	{r3}
 80046e0:	469e      	mov	lr, r3
 80046e2:	4770      	bx	lr
